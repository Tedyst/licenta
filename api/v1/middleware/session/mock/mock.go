// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/tedyst/licenta/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// ClearSession mocks base method.
func (m *MockSessionStore) ClearSession(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSession", ctx)
}

// ClearSession indicates an expected call of ClearSession.
func (mr *MockSessionStoreMockRecorder) ClearSession(ctx any) *SessionStoreClearSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSession", reflect.TypeOf((*MockSessionStore)(nil).ClearSession), ctx)
	return &SessionStoreClearSessionCall{Call: call}
}

// SessionStoreClearSessionCall wrap *gomock.Call
type SessionStoreClearSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreClearSessionCall) Return() *SessionStoreClearSessionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreClearSessionCall) Do(f func(context.Context)) *SessionStoreClearSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreClearSessionCall) DoAndReturn(f func(context.Context)) *SessionStoreClearSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScope mocks base method.
func (m *MockSessionStore) GetScope(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetScope indicates an expected call of GetScope.
func (mr *MockSessionStoreMockRecorder) GetScope(ctx any) *SessionStoreGetScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockSessionStore)(nil).GetScope), ctx)
	return &SessionStoreGetScopeCall{Call: call}
}

// SessionStoreGetScopeCall wrap *gomock.Call
type SessionStoreGetScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreGetScopeCall) Return(arg0 []string) *SessionStoreGetScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreGetScopeCall) Do(f func(context.Context) []string) *SessionStoreGetScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreGetScopeCall) DoAndReturn(f func(context.Context) []string) *SessionStoreGetScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockSessionStore) GetUser(ctx context.Context) *models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSessionStoreMockRecorder) GetUser(ctx any) *SessionStoreGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSessionStore)(nil).GetUser), ctx)
	return &SessionStoreGetUserCall{Call: call}
}

// SessionStoreGetUserCall wrap *gomock.Call
type SessionStoreGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreGetUserCall) Return(arg0 *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreGetUserCall) Do(f func(context.Context) *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreGetUserCall) DoAndReturn(f func(context.Context) *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handler mocks base method.
func (m *MockSessionStore) Handler(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockSessionStoreMockRecorder) Handler(next any) *SessionStoreHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockSessionStore)(nil).Handler), next)
	return &SessionStoreHandlerCall{Call: call}
}

// SessionStoreHandlerCall wrap *gomock.Call
type SessionStoreHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreHandlerCall) Return(arg0 http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreHandlerCall) Do(f func(http.Handler) http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreHandlerCall) DoAndReturn(f func(http.Handler) http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetScope mocks base method.
func (m *MockSessionStore) SetScope(ctx context.Context, scope []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetScope", ctx, scope)
}

// SetScope indicates an expected call of SetScope.
func (mr *MockSessionStoreMockRecorder) SetScope(ctx, scope any) *SessionStoreSetScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScope", reflect.TypeOf((*MockSessionStore)(nil).SetScope), ctx, scope)
	return &SessionStoreSetScopeCall{Call: call}
}

// SessionStoreSetScopeCall wrap *gomock.Call
type SessionStoreSetScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreSetScopeCall) Return() *SessionStoreSetScopeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreSetScopeCall) Do(f func(context.Context, []string)) *SessionStoreSetScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreSetScopeCall) DoAndReturn(f func(context.Context, []string)) *SessionStoreSetScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUser mocks base method.
func (m *MockSessionStore) SetUser(ctx context.Context, user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", ctx, user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockSessionStoreMockRecorder) SetUser(ctx, user any) *SessionStoreSetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockSessionStore)(nil).SetUser), ctx, user)
	return &SessionStoreSetUserCall{Call: call}
}

// SessionStoreSetUserCall wrap *gomock.Call
type SessionStoreSetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreSetUserCall) Return() *SessionStoreSetUserCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreSetUserCall) Do(f func(context.Context, *models.User)) *SessionStoreSetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreSetUserCall) DoAndReturn(f func(context.Context, *models.User)) *SessionStoreSetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
