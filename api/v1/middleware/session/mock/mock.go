// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/tedyst/licenta/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// ClearSession mocks base method.
func (m *MockSessionStore) ClearSession(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSession", ctx)
}

// ClearSession indicates an expected call of ClearSession.
func (mr *MockSessionStoreMockRecorder) ClearSession(ctx any) *SessionStoreClearSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSession", reflect.TypeOf((*MockSessionStore)(nil).ClearSession), ctx)
	return &SessionStoreClearSessionCall{Call: call}
}

// SessionStoreClearSessionCall wrap *gomock.Call
type SessionStoreClearSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreClearSessionCall) Return() *SessionStoreClearSessionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreClearSessionCall) Do(f func(context.Context)) *SessionStoreClearSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreClearSessionCall) DoAndReturn(f func(context.Context)) *SessionStoreClearSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPKey mocks base method.
func (m *MockSessionStore) GetTOTPKey(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPKey", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPKey indicates an expected call of GetTOTPKey.
func (mr *MockSessionStoreMockRecorder) GetTOTPKey(ctx any) *SessionStoreGetTOTPKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPKey", reflect.TypeOf((*MockSessionStore)(nil).GetTOTPKey), ctx)
	return &SessionStoreGetTOTPKeyCall{Call: call}
}

// SessionStoreGetTOTPKeyCall wrap *gomock.Call
type SessionStoreGetTOTPKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreGetTOTPKeyCall) Return(arg0 string, arg1 error) *SessionStoreGetTOTPKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreGetTOTPKeyCall) Do(f func(context.Context) (string, error)) *SessionStoreGetTOTPKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreGetTOTPKeyCall) DoAndReturn(f func(context.Context) (string, error)) *SessionStoreGetTOTPKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockSessionStore) GetUser(ctx context.Context) *models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSessionStoreMockRecorder) GetUser(ctx any) *SessionStoreGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSessionStore)(nil).GetUser), ctx)
	return &SessionStoreGetUserCall{Call: call}
}

// SessionStoreGetUserCall wrap *gomock.Call
type SessionStoreGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreGetUserCall) Return(arg0 *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreGetUserCall) Do(f func(context.Context) *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreGetUserCall) DoAndReturn(f func(context.Context) *models.User) *SessionStoreGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWaiting2FA mocks base method.
func (m *MockSessionStore) GetWaiting2FA(ctx context.Context) *models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaiting2FA", ctx)
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// GetWaiting2FA indicates an expected call of GetWaiting2FA.
func (mr *MockSessionStoreMockRecorder) GetWaiting2FA(ctx any) *SessionStoreGetWaiting2FACall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaiting2FA", reflect.TypeOf((*MockSessionStore)(nil).GetWaiting2FA), ctx)
	return &SessionStoreGetWaiting2FACall{Call: call}
}

// SessionStoreGetWaiting2FACall wrap *gomock.Call
type SessionStoreGetWaiting2FACall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreGetWaiting2FACall) Return(arg0 *models.User) *SessionStoreGetWaiting2FACall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreGetWaiting2FACall) Do(f func(context.Context) *models.User) *SessionStoreGetWaiting2FACall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreGetWaiting2FACall) DoAndReturn(f func(context.Context) *models.User) *SessionStoreGetWaiting2FACall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handler mocks base method.
func (m *MockSessionStore) Handler(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockSessionStoreMockRecorder) Handler(next any) *SessionStoreHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockSessionStore)(nil).Handler), next)
	return &SessionStoreHandlerCall{Call: call}
}

// SessionStoreHandlerCall wrap *gomock.Call
type SessionStoreHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreHandlerCall) Return(arg0 http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreHandlerCall) Do(f func(http.Handler) http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreHandlerCall) DoAndReturn(f func(http.Handler) http.Handler) *SessionStoreHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTOTPKey mocks base method.
func (m *MockSessionStore) SetTOTPKey(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTOTPKey", ctx, key)
}

// SetTOTPKey indicates an expected call of SetTOTPKey.
func (mr *MockSessionStoreMockRecorder) SetTOTPKey(ctx, key any) *SessionStoreSetTOTPKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTOTPKey", reflect.TypeOf((*MockSessionStore)(nil).SetTOTPKey), ctx, key)
	return &SessionStoreSetTOTPKeyCall{Call: call}
}

// SessionStoreSetTOTPKeyCall wrap *gomock.Call
type SessionStoreSetTOTPKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreSetTOTPKeyCall) Return() *SessionStoreSetTOTPKeyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreSetTOTPKeyCall) Do(f func(context.Context, string)) *SessionStoreSetTOTPKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreSetTOTPKeyCall) DoAndReturn(f func(context.Context, string)) *SessionStoreSetTOTPKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUser mocks base method.
func (m *MockSessionStore) SetUser(ctx context.Context, user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", ctx, user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockSessionStoreMockRecorder) SetUser(ctx, user any) *SessionStoreSetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockSessionStore)(nil).SetUser), ctx, user)
	return &SessionStoreSetUserCall{Call: call}
}

// SessionStoreSetUserCall wrap *gomock.Call
type SessionStoreSetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreSetUserCall) Return() *SessionStoreSetUserCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreSetUserCall) Do(f func(context.Context, *models.User)) *SessionStoreSetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreSetUserCall) DoAndReturn(f func(context.Context, *models.User)) *SessionStoreSetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetWaiting2FA mocks base method.
func (m *MockSessionStore) SetWaiting2FA(ctx context.Context, waitingUser *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWaiting2FA", ctx, waitingUser)
}

// SetWaiting2FA indicates an expected call of SetWaiting2FA.
func (mr *MockSessionStoreMockRecorder) SetWaiting2FA(ctx, waitingUser any) *SessionStoreSetWaiting2FACall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWaiting2FA", reflect.TypeOf((*MockSessionStore)(nil).SetWaiting2FA), ctx, waitingUser)
	return &SessionStoreSetWaiting2FACall{Call: call}
}

// SessionStoreSetWaiting2FACall wrap *gomock.Call
type SessionStoreSetWaiting2FACall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionStoreSetWaiting2FACall) Return() *SessionStoreSetWaiting2FACall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionStoreSetWaiting2FACall) Do(f func(context.Context, *models.User)) *SessionStoreSetWaiting2FACall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionStoreSetWaiting2FACall) DoAndReturn(f func(context.Context, *models.User)) *SessionStoreSetWaiting2FACall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
