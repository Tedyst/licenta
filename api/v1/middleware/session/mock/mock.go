// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -package mock -typed -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/tedyst/licenta/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionStore is a mock of SessionStore interface.
type MockSessionStore struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStoreMockRecorder
}

// MockSessionStoreMockRecorder is the mock recorder for MockSessionStore.
type MockSessionStoreMockRecorder struct {
	mock *MockSessionStore
}

// NewMockSessionStore creates a new mock instance.
func NewMockSessionStore(ctrl *gomock.Controller) *MockSessionStore {
	mock := &MockSessionStore{ctrl: ctrl}
	mock.recorder = &MockSessionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStore) EXPECT() *MockSessionStoreMockRecorder {
	return m.recorder
}

// ClearSession mocks base method.
func (m *MockSessionStore) ClearSession(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSession", ctx)
}

// ClearSession indicates an expected call of ClearSession.
func (mr *MockSessionStoreMockRecorder) ClearSession(ctx any) *MockSessionStoreClearSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSession", reflect.TypeOf((*MockSessionStore)(nil).ClearSession), ctx)
	return &MockSessionStoreClearSessionCall{Call: call}
}

// MockSessionStoreClearSessionCall wrap *gomock.Call
type MockSessionStoreClearSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionStoreClearSessionCall) Return() *MockSessionStoreClearSessionCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionStoreClearSessionCall) Do(f func(context.Context)) *MockSessionStoreClearSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionStoreClearSessionCall) DoAndReturn(f func(context.Context)) *MockSessionStoreClearSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockSessionStore) GetUser(ctx context.Context) *models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].(*models.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockSessionStoreMockRecorder) GetUser(ctx any) *MockSessionStoreGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockSessionStore)(nil).GetUser), ctx)
	return &MockSessionStoreGetUserCall{Call: call}
}

// MockSessionStoreGetUserCall wrap *gomock.Call
type MockSessionStoreGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionStoreGetUserCall) Return(arg0 *models.User) *MockSessionStoreGetUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionStoreGetUserCall) Do(f func(context.Context) *models.User) *MockSessionStoreGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionStoreGetUserCall) DoAndReturn(f func(context.Context) *models.User) *MockSessionStoreGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handler mocks base method.
func (m *MockSessionStore) Handler(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockSessionStoreMockRecorder) Handler(next any) *MockSessionStoreHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockSessionStore)(nil).Handler), next)
	return &MockSessionStoreHandlerCall{Call: call}
}

// MockSessionStoreHandlerCall wrap *gomock.Call
type MockSessionStoreHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionStoreHandlerCall) Return(arg0 http.Handler) *MockSessionStoreHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionStoreHandlerCall) Do(f func(http.Handler) http.Handler) *MockSessionStoreHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionStoreHandlerCall) DoAndReturn(f func(http.Handler) http.Handler) *MockSessionStoreHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUser mocks base method.
func (m *MockSessionStore) SetUser(ctx context.Context, user *models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", ctx, user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockSessionStoreMockRecorder) SetUser(ctx, user any) *MockSessionStoreSetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockSessionStore)(nil).SetUser), ctx, user)
	return &MockSessionStoreSetUserCall{Call: call}
}

// MockSessionStoreSetUserCall wrap *gomock.Call
type MockSessionStoreSetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionStoreSetUserCall) Return() *MockSessionStoreSetUserCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionStoreSetUserCall) Do(f func(context.Context, *models.User)) *MockSessionStoreSetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionStoreSetUserCall) DoAndReturn(f func(context.Context, *models.User)) *MockSessionStoreSetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
