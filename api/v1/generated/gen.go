// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success *bool `json:"success,omitempty"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password"`

	// TotpCode The TOTP code
	TotpCode *string `json:"totpCode,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count    *int                      `json:"count,omitempty"`
	Next     *PaginatedResult_Next     `json:"next,omitempty"`
	Previous *PaginatedResult_Previous `json:"previous,omitempty"`
	Results  *[]interface{}            `json:"results,omitempty"`
}

// PaginatedResultNext0 defines model for .
type PaginatedResultNext0 = string

// PaginatedResultNext1 defines model for .
type PaginatedResultNext1 = map[string]interface{}

// PaginatedResult_Next defines model for PaginatedResult.Next.
type PaginatedResult_Next struct {
	union json.RawMessage
}

// PaginatedResultPrevious0 defines model for .
type PaginatedResultPrevious0 = string

// PaginatedResultPrevious1 defines model for .
type PaginatedResultPrevious1 = map[string]interface{}

// PaginatedResult_Previous defines model for PaginatedResult.Previous.
type PaginatedResult_Previous struct {
	union json.RawMessage
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email"`

	// Password The password for login in clear text
	Password string `json:"password"`

	// Username The user name for login
	Username string `json:"username"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success *bool `json:"success,omitempty"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// User defines model for User.
type User struct {
	// Email The email of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName *string `json:"firstName,omitempty"`

	// Id The user ID
	Id int64 `json:"id"`

	// LastName The last name of the user
	LastName *string `json:"lastName,omitempty"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// Post2faTotpSecondStepJSONRequestBody defines body for Post2faTotpSecondStep for application/json ContentType.
type Post2faTotpSecondStepJSONRequestBody = TOTPSecondStep

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginUser

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterUser

// AsPaginatedResultNext0 returns the union data inside the PaginatedResult_Next as a PaginatedResultNext0
func (t PaginatedResult_Next) AsPaginatedResultNext0() (PaginatedResultNext0, error) {
	var body PaginatedResultNext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultNext0 overwrites any union data inside the PaginatedResult_Next as the provided PaginatedResultNext0
func (t *PaginatedResult_Next) FromPaginatedResultNext0(v PaginatedResultNext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultNext0 performs a merge with any union data inside the PaginatedResult_Next, using the provided PaginatedResultNext0
func (t *PaginatedResult_Next) MergePaginatedResultNext0(v PaginatedResultNext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginatedResultNext1 returns the union data inside the PaginatedResult_Next as a PaginatedResultNext1
func (t PaginatedResult_Next) AsPaginatedResultNext1() (PaginatedResultNext1, error) {
	var body PaginatedResultNext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultNext1 overwrites any union data inside the PaginatedResult_Next as the provided PaginatedResultNext1
func (t *PaginatedResult_Next) FromPaginatedResultNext1(v PaginatedResultNext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultNext1 performs a merge with any union data inside the PaginatedResult_Next, using the provided PaginatedResultNext1
func (t *PaginatedResult_Next) MergePaginatedResultNext1(v PaginatedResultNext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaginatedResult_Next) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginatedResult_Next) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginatedResultPrevious0 returns the union data inside the PaginatedResult_Previous as a PaginatedResultPrevious0
func (t PaginatedResult_Previous) AsPaginatedResultPrevious0() (PaginatedResultPrevious0, error) {
	var body PaginatedResultPrevious0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultPrevious0 overwrites any union data inside the PaginatedResult_Previous as the provided PaginatedResultPrevious0
func (t *PaginatedResult_Previous) FromPaginatedResultPrevious0(v PaginatedResultPrevious0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultPrevious0 performs a merge with any union data inside the PaginatedResult_Previous, using the provided PaginatedResultPrevious0
func (t *PaginatedResult_Previous) MergePaginatedResultPrevious0(v PaginatedResultPrevious0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginatedResultPrevious1 returns the union data inside the PaginatedResult_Previous as a PaginatedResultPrevious1
func (t PaginatedResult_Previous) AsPaginatedResultPrevious1() (PaginatedResultPrevious1, error) {
	var body PaginatedResultPrevious1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultPrevious1 overwrites any union data inside the PaginatedResult_Previous as the provided PaginatedResultPrevious1
func (t *PaginatedResult_Previous) FromPaginatedResultPrevious1(v PaginatedResultPrevious1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultPrevious1 performs a merge with any union data inside the PaginatedResult_Previous, using the provided PaginatedResultPrevious1
func (t *PaginatedResult_Previous) MergePaginatedResultPrevious1(v PaginatedResultPrevious1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaginatedResult_Previous) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginatedResult_Previous) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// First step of the TOTP authentication process
	// (POST /2fa/totp-first-step)
	Post2faTotpFirstStep(c *fiber.Ctx) error
	// Second step of the TOTP authentication process
	// (POST /2fa/totp-second-step)
	Post2faTotpSecondStep(c *fiber.Ctx) error
	// Logs user into the system
	// (POST /login)
	PostLogin(c *fiber.Ctx) error
	// Logs out current logged in user session
	// (POST /logout)
	PostLogout(c *fiber.Ctx) error
	// Creates a new user
	// (POST /register)
	PostRegister(c *fiber.Ctx) error
	// Get all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Post2faTotpFirstStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpFirstStep(c *fiber.Ctx) error {

	return siw.Handler.Post2faTotpFirstStep(c)
}

// Post2faTotpSecondStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpSecondStep(c *fiber.Ctx) error {

	return siw.Handler.Post2faTotpSecondStep(c)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *fiber.Ctx) error {

	return siw.Handler.PostLogin(c)
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(c *fiber.Ctx) error {

	return siw.Handler.PostLogout(c)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(c *fiber.Ctx) error {

	return siw.Handler.PostRegister(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", query, &params.Username)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter username: %w", err).Error())
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(c *fiber.Ctx) error {

	return siw.Handler.GetUsersMe(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/2fa/totp-first-step", wrapper.Post2faTotpFirstStep)

	router.Post(options.BaseURL+"/2fa/totp-second-step", wrapper.Post2faTotpSecondStep)

	router.Post(options.BaseURL+"/login", wrapper.PostLogin)

	router.Post(options.BaseURL+"/logout", wrapper.PostLogout)

	router.Post(options.BaseURL+"/register", wrapper.PostRegister)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY227bOBD9FYK7j6qluBdg9bTZ3pBF2gZ1+lQEBSuNZBYUqZKjJN7A/74Y6mqbdoJt",
	"k2aBAJFFcnh45swMRzc8M1VtNGh0PL3hLltCJfzja2uNpYfamhosSvCvM5MD/c/BZVbWKI3maTuZ+bGI",
	"F8ZWAnnKpcancx5xXNXQ/oQSLF9HvALnRLnXUD88LHVopS5ppWuyDJzbXXm+BNYNMocCG8cjDteiqhXw",
	"tBDKwWDuqzEKhObrdcQtfG+khZynn3l3gH77i3XET00p9ScHASpq4dyVsXkYSz/KCmOZIitMapYpEJYh",
	"XOMUHa9Wg7HAmdFg/TLIO210/uH8rKd+sHg0f/rs+YuArcaB1aLaY4tGGQ2PqDdwfjNL/SU3Ac9sMTls",
	"E400EZ1nopRaIOQfwTUKQ/pqtH89HiUkIE0MpjfcaPhQ8PTzzai6xsoAiTf9G/P1G2TI14SmtnApTeN+",
	"3JL1x/GGJEJFD+thqbBWrDxFWysj/hFK6RBsWGFQCanCnvJDzBQMO7eFhPNgCv2Fqoo6lsgLizE5bBL5",
	"H7MG2iacNHb8SEH4RlqHC4R6d3+K4C8OMgt4IIi7CVNqjhevhr9b6ZnucrEH5AIyo/MDKLOfkmhCyPzS",
	"EK77EX9B7ni/V5R+uFXlpqGR/L/NUocsy/yAzk9ebdCzWQ5fPAuWQyUOIaXRw0BfmWCtrJdG77Hph5hu",
	"qq9gbyPygYJbUixPIrwPa5ondWHa6qBRZDiRBxe1RBDVn+5KlCXYmTQ84i1cvmjfseOzE3YOoqINLC1a",
	"ItYujePJonW0dbhj5vwZaDWPuJIZaOdJ6Kwf1yJbApvPkh27V1dXM+GHZ8aWcbfWxacnL1+/X7x+Mp8l",
	"syVWyld3sJX7UCzAXsoMguBiPycmCiWq6cnOwVHCuATrWtRHs2SWkFlTgxa15Cl/6l9RysSlj6x4XoiY",
	"QvKJD4Inrs8GxrVFtQYriIWTnKf8zDicF+LcYD1mOF/xakOHohXzJOndA235FnWtZOatxN8cQetvl/T0",
	"u4WCp/y3eLx+xt3dM95Mpd79m47p8nXRKDYgpRM/+4kg2ttvYPMTfSmUzFkv1Hiooq6h3SD3wnZNVQm7",
	"4in3R2FEcR9nPo+KBpegsUPHamt8gYo4itL1tY7UH03c5Xzyvru/Jsm+jTVw+JfJVz/VV5NNAny9tEDX",
	"vTZNdCl/GvdUYtf3qKb+SvC/11FL848Jqc3OB5Vz2iXw+1DL2EsFCBlqCZrhMopm9qBi2YftkSslfmcs",
	"sPmbY/axp2pTO6emdC25xKnXjls5hGqvTEyDt+qE5mw5I4dCdG3dXRjcBWkaZFljLWgkFZSQU0/ioTtw",
	"vsYFIduujzoMuu+27knfG83cI8yFj1rehQQ1TX60/R/3vz1xwoSyIPIVg2vp0G3psvWaY4JpuBouybsS",
	"pEfvshIC8nsL+MlPoHuYFRWgn/05dKUer+X+WwJlRAvYWNI+5W/+vQG7Gq+5SlaSlDRSMcThURL4HleJ",
	"a1k1FY0mEa+k7n7ttibrKITPFIUDvDu+dn4YYBBfjyi5K6I+NxKUQqo2xENQJv3FCGanL9nfc95mv+1K",
	"Dhm/+MEAF0p136kO6X37OxudabO9DnyxukPyuP2b1kUgyBZ7E8zRA0S4piuSsfKfnbr4FpAJpVjTRea+",
	"qI7b5vdgYL8D/qhS969nNlzHAzTTSrCXfULcbKWVyYRaGofp8yRJYmpp1xfrfwMAAP//13uDmLkYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
