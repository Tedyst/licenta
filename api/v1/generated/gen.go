// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
	WorkerAuthScopes  = "workerAuth.Scopes"
)

// BruteforcePassword defines model for BruteforcePassword.
type BruteforcePassword struct {
	// Id The internal ID of the bruteforce password
	Id int64 `json:"id"`

	// Password The password
	Password string `json:"password"`
}

// BruteforceScanResult defines model for BruteforceScanResult.
type BruteforceScanResult struct {
	Id       int    `json:"id"`
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
	Username string `json:"username"`
}

// BruteforcedPassword defines model for BruteforcedPassword.
type BruteforcedPassword struct {
	Hash             string `json:"hash"`
	Id               int    `json:"id"`
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
	ProjectId        int    `json:"project_id"`
	Username         string `json:"username"`
}

// CVE defines model for CVE.
type CVE struct {
	// CveId The CVE ID
	CveId string `json:"cve_id"`

	// Description The CVE description
	Description string `json:"description"`

	// Id The internal ID of the CVE
	Id int64 `json:"id"`

	// LastModified The date the CVE was last modified
	LastModified string `json:"last_modified"`

	// PublishedAt The date the CVE was published
	PublishedAt string `json:"published_at"`
}

// ChangePasswordLoggedIn defines model for ChangePasswordLoggedIn.
type ChangePasswordLoggedIn struct {
	// NewPassword The new password
	NewPassword string `json:"new_password" validate:"min=8,alphanum"`

	// OldPassword The old password
	OldPassword string `json:"old_password" validate:"min=8,alphanum"`
}

// CreateBruteforceScanResult defines model for CreateBruteforceScanResult.
type CreateBruteforceScanResult struct {
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
	Username string `json:"username"`
}

// CreateBruteforcedPassword defines model for CreateBruteforcedPassword.
type CreateBruteforcedPassword struct {
	Hash             string `json:"hash"`
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
	ProjectId        int    `json:"project_id"`
	Username         string `json:"username"`
}

// CreateOrganization defines model for CreateOrganization.
type CreateOrganization struct {
	// Name The name of the organization
	Name string `json:"name" validate:"min=4,alphanum,max=32,lowercase"`
}

// CreateScanResult defines model for CreateScanResult.
type CreateScanResult struct {
	Message  string `json:"message"`
	Severity int    `json:"severity"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success bool `json:"success"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,printascii"`

	// Totp The TOTP code
	Totp *string `json:"totp,omitempty" validate:"omitempty,numeric,len=6"`

	// Username The user name for login
	Username string `json:"username" validate:"printascii,min=3,max=20"`
}

// Organization defines model for Organization.
type Organization struct {
	// CreatedAt The date the organization was created
	CreatedAt string `json:"created_at"`

	// Id The internal ID of the organization
	Id int64 `json:"id"`

	// Name The name of the organization
	Name     string            `json:"name"`
	Projects []Project         `json:"projects"`
	Stats    OrganizationStats `json:"stats"`
}

// OrganizationStats defines model for OrganizationStats.
type OrganizationStats struct {
	FailedScans int `json:"failed_scans"`
	Projects    int `json:"projects"`
	Scans       int `json:"scans"`
	Users       int `json:"users"`
}

// PaginatedBruteforcePasswords defines model for PaginatedBruteforcePasswords.
type PaginatedBruteforcePasswords struct {
	Count   int                  `json:"count"`
	Next    *string              `json:"next,omitempty"`
	Results []BruteforcePassword `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count   int           `json:"count"`
	Next    *string       `json:"next,omitempty"`
	Results []interface{} `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedUsers defines model for PaginatedUsers.
type PaginatedUsers struct {
	Count   int     `json:"count"`
	Next    *string `json:"next,omitempty"`
	Results []User  `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PatchBruteforceScanResult defines model for PatchBruteforceScanResult.
type PatchBruteforceScanResult struct {
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
}

// PatchPostgresDatabase defines model for PatchPostgresDatabase.
type PatchPostgresDatabase struct {
	DatabaseName *string `json:"database_name,omitempty"`
	Host         *string `json:"host,omitempty"`
	Password     *string `json:"password,omitempty"`
	Port         *int    `json:"port,omitempty"`
	Username     *string `json:"username,omitempty"`
	Version      *string `json:"version,omitempty"`
}

// PatchScan defines model for PatchScan.
type PatchScan struct {
	EndedAt string `json:"ended_at"`
	Error   string `json:"error"`
	Status  int    `json:"status"`
}

// PostgresDatabase defines model for PostgresDatabase.
type PostgresDatabase struct {
	CreatedAt    string `json:"created_at"`
	DatabaseName string `json:"database_name"`
	Host         string `json:"host"`
	Id           int    `json:"id"`
	Password     string `json:"password"`
	Port         int    `json:"port"`
	ProjectId    int    `json:"project_id"`
	Username     string `json:"username"`
	Version      string `json:"version"`
}

// PostgresScan defines model for PostgresScan.
type PostgresScan struct {
	DatabaseId int `json:"database_id"`
	Id         int `json:"id"`
}

// Project defines model for Project.
type Project struct {
	// CreatedAt The date the project was created
	CreatedAt string `json:"created_at"`

	// Id The internal ID of the project
	Id int64 `json:"id"`

	// Name The name of the project
	Name string `json:"name"`

	// OrganizationId The internal ID of the organization
	OrganizationId int64 `json:"organization_id"`

	// Remote Whether to use the workers associated with the project instead of the default ones
	Remote bool `json:"remote"`
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email" validate:"email"`

	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// Scan defines model for Scan.
type Scan struct {
	CreatedAt       string        `json:"created_at"`
	EndedAt         string        `json:"ended_at"`
	Error           string        `json:"error"`
	Id              int           `json:"id"`
	MaximumSeverity int           `json:"maximum_severity"`
	PostgresScan    *PostgresScan `json:"postgres_scan,omitempty"`
	ScanGroupId     int           `json:"scan_group_id"`
	Status          int           `json:"status"`
}

// ScanGroup defines model for ScanGroup.
type ScanGroup struct {
	CreatedBy *User  `json:"created_by,omitempty"`
	Id        int    `json:"id"`
	ProjectId int    `json:"project_id"`
	Scans     []Scan `json:"scans"`
}

// ScanResult defines model for ScanResult.
type ScanResult struct {
	CreatedAt  string `json:"created_at"`
	Id         int    `json:"id"`
	Message    string `json:"message"`
	ScanSource int    `json:"scan_source"`
	Severity   int    `json:"severity"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success bool `json:"success"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPLogin defines model for TOTPLogin.
type TOTPLogin struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code" validate:"numeric,len=6"`
}

// UpdateBruteforcedPassword defines model for UpdateBruteforcedPassword.
type UpdateBruteforcedPassword struct {
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
}

// UpdatePostgresVersion defines model for UpdatePostgresVersion.
type UpdatePostgresVersion struct {
	Version string `json:"version"`
}

// User defines model for User.
type User struct {
	// Admin Whether the user is an admin
	Admin bool `json:"admin"`

	// Email The email of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName *string `json:"firstName,omitempty"`

	// Id The user ID
	Id int64 `json:"id"`

	// LastName The last name of the user
	LastName *string `json:"lastName,omitempty"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Name The organization name to filter for
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetProjectIdBruteforcePasswordsParams defines parameters for GetProjectIdBruteforcePasswords.
type GetProjectIdBruteforcePasswordsParams struct {
	// LastPasswordId The last ID of the item to return
	LastPasswordId *int32 `form:"last_password_id,omitempty" json:"last_password_id,omitempty"`
}

// GetProjectIdBruteforcedPasswordParams defines parameters for GetProjectIdBruteforcedPassword.
type GetProjectIdBruteforcedPasswordParams struct {
	// Hash The hash to filter
	Hash string `form:"hash" json:"hash"`

	// Username The username to filter
	Username string `form:"username" json:"username"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PatchBruteforcedPasswordsIdJSONRequestBody defines body for PatchBruteforcedPasswordsId for application/json ContentType.
type PatchBruteforcedPasswordsIdJSONRequestBody = UpdateBruteforcedPassword

// PatchBruteforceresultsIdJSONRequestBody defines body for PatchBruteforceresultsId for application/json ContentType.
type PatchBruteforceresultsIdJSONRequestBody = PatchBruteforceScanResult

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody = CreateOrganization

// PatchPostgresIdJSONRequestBody defines body for PatchPostgresId for application/json ContentType.
type PatchPostgresIdJSONRequestBody = PatchPostgresDatabase

// PostProjectIdBruteforcedPasswordJSONRequestBody defines body for PostProjectIdBruteforcedPassword for application/json ContentType.
type PostProjectIdBruteforcedPasswordJSONRequestBody = CreateBruteforcedPassword

// PatchScanIdJSONRequestBody defines body for PatchScanId for application/json ContentType.
type PatchScanIdJSONRequestBody = PatchScan

// PostScanIdBruteforceresultsJSONRequestBody defines body for PostScanIdBruteforceresults for application/json ContentType.
type PostScanIdBruteforceresultsJSONRequestBody = CreateBruteforceScanResult

// PostScanIdResultJSONRequestBody defines body for PostScanIdResult for application/json ContentType.
type PostScanIdResultJSONRequestBody = CreateScanResult

// PostUsersMeChangePasswordJSONRequestBody defines body for PostUsersMeChangePassword for application/json ContentType.
type PostUsersMeChangePasswordJSONRequestBody = ChangePasswordLoggedIn

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PatchBruteforcedPasswordsIdWithBody request with any body
	PatchBruteforcedPasswordsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBruteforcedPasswordsId(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBruteforceresultsIdWithBody request with any body
	PatchBruteforceresultsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBruteforceresultsId(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCvesDbTypeVersion request
	GetCvesDbTypeVersion(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsWithBody request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsId request
	DeleteOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsId request
	GetOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostgresId request
	GetPostgresId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPostgresIdWithBody request with any body
	PatchPostgresIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPostgresId(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectId request
	GetProjectId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectIdBruteforcePasswords request
	GetProjectIdBruteforcePasswords(ctx context.Context, id int64, params *GetProjectIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectIdBruteforcedPassword request
	GetProjectIdBruteforcedPassword(ctx context.Context, id int64, params *GetProjectIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectIdBruteforcedPasswordWithBody request with any body
	PostProjectIdBruteforcedPasswordWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectIdBruteforcedPassword(ctx context.Context, id int64, body PostProjectIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectIdRun request
	PostProjectIdRun(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanId request
	GetScanId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScanIdWithBody request with any body
	PatchScanIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScanId(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanIdBruteforceresultsWithBody request with any body
	PostScanIdBruteforceresultsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanIdBruteforceresults(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanIdResultWithBody request with any body
	PostScanIdResultWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanIdResult(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersMeChangePasswordWithBody request with any body
	PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkerGetTask request
	GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PatchBruteforcedPasswordsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforcedPasswordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforcedPasswordsId(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforcedPasswordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforceresultsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforceresultsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforceresultsId(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforceresultsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCvesDbTypeVersion(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCvesDbTypeVersionRequest(c.Server, dbType, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostgresId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostgresIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPostgresIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPostgresIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPostgresId(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPostgresIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectIdBruteforcePasswords(ctx context.Context, id int64, params *GetProjectIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdBruteforcePasswordsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectIdBruteforcedPassword(ctx context.Context, id int64, params *GetProjectIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdBruteforcedPasswordRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectIdBruteforcedPasswordWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectIdBruteforcedPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectIdBruteforcedPassword(ctx context.Context, id int64, body PostProjectIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectIdBruteforcedPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectIdRun(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectIdRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScanId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanId(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdBruteforceresultsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdBruteforceresultsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdBruteforceresults(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdBruteforceresultsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdResultWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdResultRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdResult(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdResultRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkerGetTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPatchBruteforcedPasswordsIdRequest calls the generic PatchBruteforcedPasswordsId builder with application/json body
func NewPatchBruteforcedPasswordsIdRequest(server string, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBruteforcedPasswordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchBruteforcedPasswordsIdRequestWithBody generates requests for PatchBruteforcedPasswordsId with any type of body
func NewPatchBruteforcedPasswordsIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bruteforced-passwords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchBruteforceresultsIdRequest calls the generic PatchBruteforceresultsId builder with application/json body
func NewPatchBruteforceresultsIdRequest(server string, id int64, body PatchBruteforceresultsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBruteforceresultsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchBruteforceresultsIdRequestWithBody generates requests for PatchBruteforceresultsId with any type of body
func NewPatchBruteforceresultsIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bruteforceresults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCvesDbTypeVersionRequest generates requests for GetCvesDbTypeVersion
func NewGetCvesDbTypeVersionRequest(server string, dbType string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dbType", runtime.ParamLocationPath, dbType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cves/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsIdRequest generates requests for DeleteOrganizationsId
func NewDeleteOrganizationsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsIdRequest generates requests for GetOrganizationsId
func NewGetOrganizationsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostgresIdRequest generates requests for GetPostgresId
func NewGetPostgresIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postgres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPostgresIdRequest calls the generic PatchPostgresId builder with application/json body
func NewPatchPostgresIdRequest(server string, id int64, body PatchPostgresIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPostgresIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchPostgresIdRequestWithBody generates requests for PatchPostgresId with any type of body
func NewPatchPostgresIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postgres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectIdRequest generates requests for GetProjectId
func NewGetProjectIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectIdBruteforcePasswordsRequest generates requests for GetProjectIdBruteforcePasswords
func NewGetProjectIdBruteforcePasswordsRequest(server string, id int64, params *GetProjectIdBruteforcePasswordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/bruteforce-passwords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LastPasswordId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_password_id", runtime.ParamLocationQuery, *params.LastPasswordId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectIdBruteforcedPasswordRequest generates requests for GetProjectIdBruteforcedPassword
func NewGetProjectIdBruteforcedPasswordRequest(server string, id int64, params *GetProjectIdBruteforcedPasswordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/bruteforced-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectIdBruteforcedPasswordRequest calls the generic PostProjectIdBruteforcedPassword builder with application/json body
func NewPostProjectIdBruteforcedPasswordRequest(server string, id int64, body PostProjectIdBruteforcedPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectIdBruteforcedPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostProjectIdBruteforcedPasswordRequestWithBody generates requests for PostProjectIdBruteforcedPassword with any type of body
func NewPostProjectIdBruteforcedPasswordRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/bruteforced-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectIdRunRequest generates requests for PostProjectIdRun
func NewPostProjectIdRunRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanIdRequest generates requests for GetScanId
func NewGetScanIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScanIdRequest calls the generic PatchScanId builder with application/json body
func NewPatchScanIdRequest(server string, id int64, body PatchScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchScanIdRequestWithBody generates requests for PatchScanId with any type of body
func NewPatchScanIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScanIdBruteforceresultsRequest calls the generic PostScanIdBruteforceresults builder with application/json body
func NewPostScanIdBruteforceresultsRequest(server string, id int64, body PostScanIdBruteforceresultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanIdBruteforceresultsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostScanIdBruteforceresultsRequestWithBody generates requests for PostScanIdBruteforceresults with any type of body
func NewPostScanIdBruteforceresultsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s/bruteforceresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScanIdResultRequest calls the generic PostScanIdResult builder with application/json body
func NewPostScanIdResultRequest(server string, id int64, body PostScanIdResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanIdResultRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostScanIdResultRequestWithBody generates requests for PostScanIdResult with any type of body
func NewPostScanIdResultRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersMeChangePasswordRequest calls the generic PostUsersMeChangePassword builder with application/json body
func NewPostUsersMeChangePasswordRequest(server string, body PostUsersMeChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersMeChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersMeChangePasswordRequestWithBody generates requests for PostUsersMeChangePassword with any type of body
func NewPostUsersMeChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkerGetTaskRequest generates requests for GetWorkerGetTask
func NewGetWorkerGetTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/worker/get-task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PatchBruteforcedPasswordsIdWithBodyWithResponse request with any body
	PatchBruteforcedPasswordsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error)

	PatchBruteforcedPasswordsIdWithResponse(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error)

	// PatchBruteforceresultsIdWithBodyWithResponse request with any body
	PatchBruteforceresultsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error)

	PatchBruteforceresultsIdWithResponse(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error)

	// GetCvesDbTypeVersionWithResponse request
	GetCvesDbTypeVersionWithResponse(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDbTypeVersionResponse, error)

	// GetOrganizationsWithResponse request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PostOrganizationsWithBodyWithResponse request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// DeleteOrganizationsIdWithResponse request
	DeleteOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error)

	// GetOrganizationsIdWithResponse request
	GetOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error)

	// GetPostgresIdWithResponse request
	GetPostgresIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostgresIdResponse, error)

	// PatchPostgresIdWithBodyWithResponse request with any body
	PatchPostgresIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error)

	PatchPostgresIdWithResponse(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error)

	// GetProjectIdWithResponse request
	GetProjectIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error)

	// GetProjectIdBruteforcePasswordsWithResponse request
	GetProjectIdBruteforcePasswordsWithResponse(ctx context.Context, id int64, params *GetProjectIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectIdBruteforcePasswordsResponse, error)

	// GetProjectIdBruteforcedPasswordWithResponse request
	GetProjectIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, params *GetProjectIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*GetProjectIdBruteforcedPasswordResponse, error)

	// PostProjectIdBruteforcedPasswordWithBodyWithResponse request with any body
	PostProjectIdBruteforcedPasswordWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectIdBruteforcedPasswordResponse, error)

	PostProjectIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, body PostProjectIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectIdBruteforcedPasswordResponse, error)

	// PostProjectIdRunWithResponse request
	PostProjectIdRunWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostProjectIdRunResponse, error)

	// GetScanIdWithResponse request
	GetScanIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetScanIdResponse, error)

	// PatchScanIdWithBodyWithResponse request with any body
	PatchScanIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error)

	PatchScanIdWithResponse(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error)

	// PostScanIdBruteforceresultsWithBodyWithResponse request with any body
	PostScanIdBruteforceresultsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error)

	PostScanIdBruteforceresultsWithResponse(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error)

	// PostScanIdResultWithBodyWithResponse request with any body
	PostScanIdResultWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error)

	PostScanIdResultWithResponse(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// PostUsersMeChangePasswordWithBodyWithResponse request with any body
	PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// GetWorkerGetTaskWithResponse request
	GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error)
}

type PatchBruteforcedPasswordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
		Success             bool                 `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchBruteforcedPasswordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBruteforcedPasswordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBruteforceresultsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
		Success              bool                  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchBruteforceresultsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBruteforceresultsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCvesDbTypeVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cves    []CVE `json:"cves"`
		Success bool  `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetCvesDbTypeVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCvesDbTypeVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Organizations []Organization `json:"organizations"`
		Success       bool           `json:"success"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Organization Organization `json:"organization"`
		Success      bool         `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {
		Success bool `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Organization Organization `json:"organization"`
		Success      bool         `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostgresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabase PostgresDatabase `json:"postgres_database"`
		Success          bool             `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetPostgresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostgresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPostgresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabase PostgresDatabase `json:"postgres_database"`
		Success          bool             `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchPostgresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPostgresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
		Project           Project            `json:"project"`
		Success           bool               `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdBruteforcePasswordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBruteforcePasswords
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectIdBruteforcePasswordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdBruteforcePasswordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdBruteforcedPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
		Success             bool                `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectIdBruteforcedPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdBruteforcedPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectIdBruteforcedPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
		Success             bool                 `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectIdBruteforcedPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectIdBruteforcedPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ScanGroup *ScanGroup `json:"scan_group,omitempty"`
		Success   bool       `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
		Results           []ScanResult           `json:"results"`
		Scan              Scan                   `json:"scan"`
		Success           bool                   `json:"success"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *Scan `json:"scan,omitempty"`
		Success bool  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanIdBruteforceresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
		Success              bool                  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScanIdBruteforceresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanIdBruteforceresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanIdResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *ScanResult `json:"scan,omitempty"`
		Success bool        `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScanIdResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanIdResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUsers
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
		User    User `json:"user"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersMeChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersMeChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersMeChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkerGetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan      Scan      `json:"scan"`
		ScanGroup ScanGroup `json:"scan_group"`
		Success   bool      `json:"success"`
	}
	JSON202 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkerGetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkerGetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PatchBruteforcedPasswordsIdWithBodyWithResponse request with arbitrary body returning *PatchBruteforcedPasswordsIdResponse
func (c *ClientWithResponses) PatchBruteforcedPasswordsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error) {
	rsp, err := c.PatchBruteforcedPasswordsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforcedPasswordsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBruteforcedPasswordsIdWithResponse(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error) {
	rsp, err := c.PatchBruteforcedPasswordsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforcedPasswordsIdResponse(rsp)
}

// PatchBruteforceresultsIdWithBodyWithResponse request with arbitrary body returning *PatchBruteforceresultsIdResponse
func (c *ClientWithResponses) PatchBruteforceresultsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error) {
	rsp, err := c.PatchBruteforceresultsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforceresultsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBruteforceresultsIdWithResponse(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error) {
	rsp, err := c.PatchBruteforceresultsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforceresultsIdResponse(rsp)
}

// GetCvesDbTypeVersionWithResponse request returning *GetCvesDbTypeVersionResponse
func (c *ClientWithResponses) GetCvesDbTypeVersionWithResponse(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDbTypeVersionResponse, error) {
	rsp, err := c.GetCvesDbTypeVersion(ctx, dbType, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCvesDbTypeVersionResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// DeleteOrganizationsIdWithResponse request returning *DeleteOrganizationsIdResponse
func (c *ClientWithResponses) DeleteOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdResponse(rsp)
}

// GetOrganizationsIdWithResponse request returning *GetOrganizationsIdResponse
func (c *ClientWithResponses) GetOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error) {
	rsp, err := c.GetOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdResponse(rsp)
}

// GetPostgresIdWithResponse request returning *GetPostgresIdResponse
func (c *ClientWithResponses) GetPostgresIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostgresIdResponse, error) {
	rsp, err := c.GetPostgresId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostgresIdResponse(rsp)
}

// PatchPostgresIdWithBodyWithResponse request with arbitrary body returning *PatchPostgresIdResponse
func (c *ClientWithResponses) PatchPostgresIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error) {
	rsp, err := c.PatchPostgresIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPostgresIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPostgresIdWithResponse(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error) {
	rsp, err := c.PatchPostgresId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPostgresIdResponse(rsp)
}

// GetProjectIdWithResponse request returning *GetProjectIdResponse
func (c *ClientWithResponses) GetProjectIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error) {
	rsp, err := c.GetProjectId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdResponse(rsp)
}

// GetProjectIdBruteforcePasswordsWithResponse request returning *GetProjectIdBruteforcePasswordsResponse
func (c *ClientWithResponses) GetProjectIdBruteforcePasswordsWithResponse(ctx context.Context, id int64, params *GetProjectIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectIdBruteforcePasswordsResponse, error) {
	rsp, err := c.GetProjectIdBruteforcePasswords(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdBruteforcePasswordsResponse(rsp)
}

// GetProjectIdBruteforcedPasswordWithResponse request returning *GetProjectIdBruteforcedPasswordResponse
func (c *ClientWithResponses) GetProjectIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, params *GetProjectIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*GetProjectIdBruteforcedPasswordResponse, error) {
	rsp, err := c.GetProjectIdBruteforcedPassword(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdBruteforcedPasswordResponse(rsp)
}

// PostProjectIdBruteforcedPasswordWithBodyWithResponse request with arbitrary body returning *PostProjectIdBruteforcedPasswordResponse
func (c *ClientWithResponses) PostProjectIdBruteforcedPasswordWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectIdBruteforcedPasswordResponse, error) {
	rsp, err := c.PostProjectIdBruteforcedPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectIdBruteforcedPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostProjectIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, body PostProjectIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectIdBruteforcedPasswordResponse, error) {
	rsp, err := c.PostProjectIdBruteforcedPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectIdBruteforcedPasswordResponse(rsp)
}

// PostProjectIdRunWithResponse request returning *PostProjectIdRunResponse
func (c *ClientWithResponses) PostProjectIdRunWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostProjectIdRunResponse, error) {
	rsp, err := c.PostProjectIdRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectIdRunResponse(rsp)
}

// GetScanIdWithResponse request returning *GetScanIdResponse
func (c *ClientWithResponses) GetScanIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetScanIdResponse, error) {
	rsp, err := c.GetScanId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanIdResponse(rsp)
}

// PatchScanIdWithBodyWithResponse request with arbitrary body returning *PatchScanIdResponse
func (c *ClientWithResponses) PatchScanIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error) {
	rsp, err := c.PatchScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanIdResponse(rsp)
}

func (c *ClientWithResponses) PatchScanIdWithResponse(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error) {
	rsp, err := c.PatchScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanIdResponse(rsp)
}

// PostScanIdBruteforceresultsWithBodyWithResponse request with arbitrary body returning *PostScanIdBruteforceresultsResponse
func (c *ClientWithResponses) PostScanIdBruteforceresultsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error) {
	rsp, err := c.PostScanIdBruteforceresultsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdBruteforceresultsResponse(rsp)
}

func (c *ClientWithResponses) PostScanIdBruteforceresultsWithResponse(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error) {
	rsp, err := c.PostScanIdBruteforceresults(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdBruteforceresultsResponse(rsp)
}

// PostScanIdResultWithBodyWithResponse request with arbitrary body returning *PostScanIdResultResponse
func (c *ClientWithResponses) PostScanIdResultWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error) {
	rsp, err := c.PostScanIdResultWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdResultResponse(rsp)
}

func (c *ClientWithResponses) PostScanIdResultWithResponse(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error) {
	rsp, err := c.PostScanIdResult(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdResultResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// PostUsersMeChangePasswordWithBodyWithResponse request with arbitrary body returning *PostUsersMeChangePasswordResponse
func (c *ClientWithResponses) PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// GetWorkerGetTaskWithResponse request returning *GetWorkerGetTaskResponse
func (c *ClientWithResponses) GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error) {
	rsp, err := c.GetWorkerGetTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkerGetTaskResponse(rsp)
}

// ParsePatchBruteforcedPasswordsIdResponse parses an HTTP response from a PatchBruteforcedPasswordsIdWithResponse call
func ParsePatchBruteforcedPasswordsIdResponse(rsp *http.Response) (*PatchBruteforcedPasswordsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBruteforcedPasswordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
			Success             bool                 `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchBruteforceresultsIdResponse parses an HTTP response from a PatchBruteforceresultsIdWithResponse call
func ParsePatchBruteforceresultsIdResponse(rsp *http.Response) (*PatchBruteforceresultsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBruteforceresultsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
			Success              bool                  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCvesDbTypeVersionResponse parses an HTTP response from a GetCvesDbTypeVersionWithResponse call
func ParseGetCvesDbTypeVersionResponse(rsp *http.Response) (*GetCvesDbTypeVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCvesDbTypeVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cves    []CVE `json:"cves"`
			Success bool  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Organizations []Organization `json:"organizations"`
			Success       bool           `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Organization Organization `json:"organization"`
			Success      bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationsIdResponse parses an HTTP response from a DeleteOrganizationsIdWithResponse call
func ParseDeleteOrganizationsIdResponse(rsp *http.Response) (*DeleteOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsIdResponse parses an HTTP response from a GetOrganizationsIdWithResponse call
func ParseGetOrganizationsIdResponse(rsp *http.Response) (*GetOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Organization Organization `json:"organization"`
			Success      bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPostgresIdResponse parses an HTTP response from a GetPostgresIdWithResponse call
func ParseGetPostgresIdResponse(rsp *http.Response) (*GetPostgresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostgresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabase PostgresDatabase `json:"postgres_database"`
			Success          bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchPostgresIdResponse parses an HTTP response from a PatchPostgresIdWithResponse call
func ParsePatchPostgresIdResponse(rsp *http.Response) (*PatchPostgresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPostgresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabase PostgresDatabase `json:"postgres_database"`
			Success          bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectIdResponse parses an HTTP response from a GetProjectIdWithResponse call
func ParseGetProjectIdResponse(rsp *http.Response) (*GetProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
			Project           Project            `json:"project"`
			Success           bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectIdBruteforcePasswordsResponse parses an HTTP response from a GetProjectIdBruteforcePasswordsWithResponse call
func ParseGetProjectIdBruteforcePasswordsResponse(rsp *http.Response) (*GetProjectIdBruteforcePasswordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdBruteforcePasswordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBruteforcePasswords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetProjectIdBruteforcedPasswordResponse parses an HTTP response from a GetProjectIdBruteforcedPasswordWithResponse call
func ParseGetProjectIdBruteforcedPasswordResponse(rsp *http.Response) (*GetProjectIdBruteforcedPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdBruteforcedPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
			Success             bool                `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostProjectIdBruteforcedPasswordResponse parses an HTTP response from a PostProjectIdBruteforcedPasswordWithResponse call
func ParsePostProjectIdBruteforcedPasswordResponse(rsp *http.Response) (*PostProjectIdBruteforcedPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectIdBruteforcedPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
			Success             bool                 `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostProjectIdRunResponse parses an HTTP response from a PostProjectIdRunWithResponse call
func ParsePostProjectIdRunResponse(rsp *http.Response) (*PostProjectIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ScanGroup *ScanGroup `json:"scan_group,omitempty"`
			Success   bool       `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetScanIdResponse parses an HTTP response from a GetScanIdWithResponse call
func ParseGetScanIdResponse(rsp *http.Response) (*GetScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
			Results           []ScanResult           `json:"results"`
			Scan              Scan                   `json:"scan"`
			Success           bool                   `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchScanIdResponse parses an HTTP response from a PatchScanIdWithResponse call
func ParsePatchScanIdResponse(rsp *http.Response) (*PatchScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *Scan `json:"scan,omitempty"`
			Success bool  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScanIdBruteforceresultsResponse parses an HTTP response from a PostScanIdBruteforceresultsWithResponse call
func ParsePostScanIdBruteforceresultsResponse(rsp *http.Response) (*PostScanIdBruteforceresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanIdBruteforceresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
			Success              bool                  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScanIdResultResponse parses an HTTP response from a PostScanIdResultWithResponse call
func ParsePostScanIdResultResponse(rsp *http.Response) (*PostScanIdResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanIdResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *ScanResult `json:"scan,omitempty"`
			Success bool        `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
			User    User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostUsersMeChangePasswordResponse parses an HTTP response from a PostUsersMeChangePasswordWithResponse call
func ParsePostUsersMeChangePasswordResponse(rsp *http.Response) (*PostUsersMeChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersMeChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkerGetTaskResponse parses an HTTP response from a GetWorkerGetTaskWithResponse call
func ParseGetWorkerGetTaskResponse(rsp *http.Response) (*GetWorkerGetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkerGetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan      Scan      `json:"scan"`
			ScanGroup ScanGroup `json:"scan_group"`
			Success   bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Update a bruteforced password by ID
	// (PATCH /bruteforced-passwords/{id})
	PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a bruteforce scan result by ID
	// (PATCH /bruteforceresults/{id})
	PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get all CVEs for a database type and version
	// (GET /cves/{dbType}/{version})
	GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string)
	// Get all organizations that the user can see
	// (GET /organizations)
	GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams)
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(w http.ResponseWriter, r *http.Request)
	// Delete organization by ID
	// (DELETE /organizations/{id})
	DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get organization by ID
	// (GET /organizations/{id})
	GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get postgres database by ID
	// (GET /postgres/{id})
	GetPostgresId(w http.ResponseWriter, r *http.Request, id int64)
	// Update postgres database by ID
	// (PATCH /postgres/{id})
	PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64)
	// Get project by ID
	// (GET /project/{id})
	GetProjectId(w http.ResponseWriter, r *http.Request, id int64)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{id}/bruteforce-passwords)
	GetProjectIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcePasswordsParams)
	// Get bruteforced password for a project
	// (GET /project/{id}/bruteforced-password)
	GetProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcedPasswordParams)
	// Create a bruteforced password for a project
	// (POST /project/{id}/bruteforced-password)
	PostProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64)
	// Run all extractors and scanners for a project
	// (POST /project/{id}/run)
	PostProjectIdRun(w http.ResponseWriter, r *http.Request, id int64)
	// Get a scan by ID
	// (GET /scan/{id})
	GetScanId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a scan by ID
	// (PATCH /scan/{id})
	PatchScanId(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new bruteforce scan result
	// (POST /scan/{id}/bruteforceresults)
	PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new scan result
	// (POST /scan/{id}/result)
	PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64)
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Update a bruteforced password by ID
// (PATCH /bruteforced-passwords/{id})
func (_ Unimplemented) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a bruteforce scan result by ID
// (PATCH /bruteforceresults/{id})
func (_ Unimplemented) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all CVEs for a database type and version
// (GET /cves/{dbType}/{version})
func (_ Unimplemented) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all organizations that the user can see
// (GET /organizations)
func (_ Unimplemented) GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new organization
// (POST /organizations)
func (_ Unimplemented) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete organization by ID
// (DELETE /organizations/{id})
func (_ Unimplemented) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization by ID
// (GET /organizations/{id})
func (_ Unimplemented) GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get postgres database by ID
// (GET /postgres/{id})
func (_ Unimplemented) GetPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update postgres database by ID
// (PATCH /postgres/{id})
func (_ Unimplemented) PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get project by ID
// (GET /project/{id})
func (_ Unimplemented) GetProjectId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all bruteforce passwords associated with a project
// (GET /project/{id}/bruteforce-passwords)
func (_ Unimplemented) GetProjectIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcePasswordsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get bruteforced password for a project
// (GET /project/{id}/bruteforced-password)
func (_ Unimplemented) GetProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcedPasswordParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a bruteforced password for a project
// (POST /project/{id}/bruteforced-password)
func (_ Unimplemented) PostProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run all extractors and scanners for a project
// (POST /project/{id}/run)
func (_ Unimplemented) PostProjectIdRun(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a scan by ID
// (GET /scan/{id})
func (_ Unimplemented) GetScanId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a scan by ID
// (PATCH /scan/{id})
func (_ Unimplemented) PatchScanId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new bruteforce scan result
// (POST /scan/{id}/bruteforceresults)
func (_ Unimplemented) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new scan result
// (POST /scan/{id}/result)
func (_ Unimplemented) PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current logged in user
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change password of current logged in user
// (POST /users/me/change-password)
func (_ Unimplemented) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task for the worker
// (GET /worker/get-task)
func (_ Unimplemented) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PatchBruteforcedPasswordsId operation middleware
func (siw *ServerInterfaceWrapper) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchBruteforcedPasswordsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchBruteforceresultsId operation middleware
func (siw *ServerInterfaceWrapper) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchBruteforceresultsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCvesDbTypeVersion operation middleware
func (siw *ServerInterfaceWrapper) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dbType" -------------
	var dbType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dbType", runtime.ParamLocationPath, chi.URLParam(r, "dbType"), &dbType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dbType", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCvesDbTypeVersion(w, r, dbType, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostOrganizations operation middleware
func (siw *ServerInterfaceWrapper) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrganizations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteOrganizationsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrganizationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizationsId operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPostgresId operation middleware
func (siw *ServerInterfaceWrapper) GetPostgresId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostgresId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchPostgresId operation middleware
func (siw *ServerInterfaceWrapper) PatchPostgresId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchPostgresId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectIdBruteforcePasswords operation middleware
func (siw *ServerInterfaceWrapper) GetProjectIdBruteforcePasswords(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectIdBruteforcePasswordsParams

	// ------------- Optional query parameter "last_password_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_password_id", r.URL.Query(), &params.LastPasswordId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_password_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectIdBruteforcePasswords(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectIdBruteforcedPassword operation middleware
func (siw *ServerInterfaceWrapper) GetProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectIdBruteforcedPasswordParams

	// ------------- Required query parameter "hash" -------------

	if paramValue := r.URL.Query().Get("hash"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "hash"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "hash", r.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectIdBruteforcedPassword(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectIdBruteforcedPassword operation middleware
func (siw *ServerInterfaceWrapper) PostProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectIdBruteforcedPassword(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectIdRun operation middleware
func (siw *ServerInterfaceWrapper) PostProjectIdRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectIdRun(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScanId operation middleware
func (siw *ServerInterfaceWrapper) GetScanId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScanId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchScanId operation middleware
func (siw *ServerInterfaceWrapper) PatchScanId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchScanId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScanIdBruteforceresults operation middleware
func (siw *ServerInterfaceWrapper) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScanIdBruteforceresults(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScanIdResult operation middleware
func (siw *ServerInterfaceWrapper) PostScanIdResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScanIdResult(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersMeChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersMeChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkerGetTask operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkerGetTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/bruteforced-passwords/{id}", wrapper.PatchBruteforcedPasswordsId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/bruteforceresults/{id}", wrapper.PatchBruteforceresultsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cves/{dbType}/{version}", wrapper.GetCvesDbTypeVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/organizations", wrapper.GetOrganizations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/organizations", wrapper.PostOrganizations)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/organizations/{id}", wrapper.DeleteOrganizationsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/organizations/{id}", wrapper.GetOrganizationsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/postgres/{id}", wrapper.GetPostgresId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/postgres/{id}", wrapper.PatchPostgresId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{id}", wrapper.GetProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{id}/bruteforce-passwords", wrapper.GetProjectIdBruteforcePasswords)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{id}/bruteforced-password", wrapper.GetProjectIdBruteforcedPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{id}/bruteforced-password", wrapper.PostProjectIdBruteforcedPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{id}/run", wrapper.PostProjectIdRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scan/{id}", wrapper.GetScanId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/scan/{id}", wrapper.PatchScanId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scan/{id}/bruteforceresults", wrapper.PostScanIdBruteforceresults)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scan/{id}/result", wrapper.PostScanIdResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/me/change-password", wrapper.PostUsersMeChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/worker/get-task", wrapper.GetWorkerGetTask)
	})

	return r
}

type PatchBruteforcedPasswordsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchBruteforcedPasswordsIdJSONRequestBody
}

type PatchBruteforcedPasswordsIdResponseObject interface {
	VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error
}

type PatchBruteforcedPasswordsId200JSONResponse struct {
	BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
	Success             bool                 `json:"success"`
}

func (response PatchBruteforcedPasswordsId200JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId400JSONResponse Error

func (response PatchBruteforcedPasswordsId400JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId401JSONResponse Error

func (response PatchBruteforcedPasswordsId401JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId404JSONResponse Error

func (response PatchBruteforcedPasswordsId404JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchBruteforceresultsIdJSONRequestBody
}

type PatchBruteforceresultsIdResponseObject interface {
	VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error
}

type PatchBruteforceresultsId200JSONResponse struct {
	Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
	Success              bool                  `json:"success"`
}

func (response PatchBruteforceresultsId200JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId400JSONResponse Error

func (response PatchBruteforceresultsId400JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId401JSONResponse Error

func (response PatchBruteforceresultsId401JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId404JSONResponse Error

func (response PatchBruteforceresultsId404JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersionRequestObject struct {
	DbType  string `json:"dbType"`
	Version string `json:"version"`
}

type GetCvesDbTypeVersionResponseObject interface {
	VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error
}

type GetCvesDbTypeVersion200JSONResponse struct {
	Cves    []CVE `json:"cves"`
	Success bool  `json:"success"`
}

func (response GetCvesDbTypeVersion200JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersion401JSONResponse Error

func (response GetCvesDbTypeVersion401JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersion404JSONResponse Error

func (response GetCvesDbTypeVersion404JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsRequestObject struct {
	Params GetOrganizationsParams
}

type GetOrganizationsResponseObject interface {
	VisitGetOrganizationsResponse(w http.ResponseWriter) error
}

type GetOrganizations200JSONResponse struct {
	Organizations []Organization `json:"organizations"`
	Success       bool           `json:"success"`
}

func (response GetOrganizations200JSONResponse) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizations401JSONResponse Error

func (response GetOrganizations401JSONResponse) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsRequestObject struct {
	Body *PostOrganizationsJSONRequestBody
}

type PostOrganizationsResponseObject interface {
	VisitPostOrganizationsResponse(w http.ResponseWriter) error
}

type PostOrganizations201JSONResponse struct {
	Organization Organization `json:"organization"`
	Success      bool         `json:"success"`
}

func (response PostOrganizations201JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizations400JSONResponse Error

func (response PostOrganizations400JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizations401JSONResponse Error

func (response PostOrganizations401JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteOrganizationsIdResponseObject interface {
	VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error
}

type DeleteOrganizationsId204JSONResponse struct {
	Success bool `json:"success"`
}

func (response DeleteOrganizationsId204JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsId401JSONResponse Error

func (response DeleteOrganizationsId401JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsId404JSONResponse Error

func (response DeleteOrganizationsId404JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetOrganizationsIdResponseObject interface {
	VisitGetOrganizationsIdResponse(w http.ResponseWriter) error
}

type GetOrganizationsId200JSONResponse struct {
	Organization Organization `json:"organization"`
	Success      bool         `json:"success"`
}

func (response GetOrganizationsId200JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsId401JSONResponse Error

func (response GetOrganizationsId401JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsId404JSONResponse Error

func (response GetOrganizationsId404JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetPostgresIdResponseObject interface {
	VisitGetPostgresIdResponse(w http.ResponseWriter) error
}

type GetPostgresId200JSONResponse struct {
	PostgresDatabase PostgresDatabase `json:"postgres_database"`
	Success          bool             `json:"success"`
}

func (response GetPostgresId200JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresId401JSONResponse Error

func (response GetPostgresId401JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresId404JSONResponse Error

func (response GetPostgresId404JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchPostgresIdJSONRequestBody
}

type PatchPostgresIdResponseObject interface {
	VisitPatchPostgresIdResponse(w http.ResponseWriter) error
}

type PatchPostgresId200JSONResponse struct {
	PostgresDatabase PostgresDatabase `json:"postgres_database"`
	Success          bool             `json:"success"`
}

func (response PatchPostgresId200JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId400JSONResponse Error

func (response PatchPostgresId400JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId401JSONResponse Error

func (response PatchPostgresId401JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId404JSONResponse Error

func (response PatchPostgresId404JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetProjectIdResponseObject interface {
	VisitGetProjectIdResponse(w http.ResponseWriter) error
}

type GetProjectId200JSONResponse struct {
	PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
	Project           Project            `json:"project"`
	Success           bool               `json:"success"`
}

func (response GetProjectId200JSONResponse) VisitGetProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectId401JSONResponse Error

func (response GetProjectId401JSONResponse) VisitGetProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectId404JSONResponse Error

func (response GetProjectId404JSONResponse) VisitGetProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdBruteforcePasswordsRequestObject struct {
	Id     int64 `json:"id"`
	Params GetProjectIdBruteforcePasswordsParams
}

type GetProjectIdBruteforcePasswordsResponseObject interface {
	VisitGetProjectIdBruteforcePasswordsResponse(w http.ResponseWriter) error
}

type GetProjectIdBruteforcePasswords200JSONResponse PaginatedBruteforcePasswords

func (response GetProjectIdBruteforcePasswords200JSONResponse) VisitGetProjectIdBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdBruteforcePasswords401JSONResponse Error

func (response GetProjectIdBruteforcePasswords401JSONResponse) VisitGetProjectIdBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdBruteforcedPasswordRequestObject struct {
	Id     int64 `json:"id"`
	Params GetProjectIdBruteforcedPasswordParams
}

type GetProjectIdBruteforcedPasswordResponseObject interface {
	VisitGetProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error
}

type GetProjectIdBruteforcedPassword200JSONResponse struct {
	BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
	Success             bool                `json:"success"`
}

func (response GetProjectIdBruteforcedPassword200JSONResponse) VisitGetProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdBruteforcedPassword401JSONResponse Error

func (response GetProjectIdBruteforcedPassword401JSONResponse) VisitGetProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectIdBruteforcedPassword404JSONResponse Error

func (response GetProjectIdBruteforcedPassword404JSONResponse) VisitGetProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdBruteforcedPasswordRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostProjectIdBruteforcedPasswordJSONRequestBody
}

type PostProjectIdBruteforcedPasswordResponseObject interface {
	VisitPostProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error
}

type PostProjectIdBruteforcedPassword200JSONResponse struct {
	BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
	Success             bool                 `json:"success"`
}

func (response PostProjectIdBruteforcedPassword200JSONResponse) VisitPostProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdBruteforcedPassword400JSONResponse Error

func (response PostProjectIdBruteforcedPassword400JSONResponse) VisitPostProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdBruteforcedPassword401JSONResponse Error

func (response PostProjectIdBruteforcedPassword401JSONResponse) VisitPostProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdBruteforcedPassword404JSONResponse Error

func (response PostProjectIdBruteforcedPassword404JSONResponse) VisitPostProjectIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdRunRequestObject struct {
	Id int64 `json:"id"`
}

type PostProjectIdRunResponseObject interface {
	VisitPostProjectIdRunResponse(w http.ResponseWriter) error
}

type PostProjectIdRun200JSONResponse struct {
	ScanGroup *ScanGroup `json:"scan_group,omitempty"`
	Success   bool       `json:"success"`
}

func (response PostProjectIdRun200JSONResponse) VisitPostProjectIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdRun400JSONResponse Error

func (response PostProjectIdRun400JSONResponse) VisitPostProjectIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdRun401JSONResponse Error

func (response PostProjectIdRun401JSONResponse) VisitPostProjectIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectIdRun404JSONResponse Error

func (response PostProjectIdRun404JSONResponse) VisitPostProjectIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScanIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetScanIdResponseObject interface {
	VisitGetScanIdResponse(w http.ResponseWriter) error
}

type GetScanId200JSONResponse struct {
	BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
	Results           []ScanResult           `json:"results"`
	Scan              Scan                   `json:"scan"`
	Success           bool                   `json:"success"`
}

func (response GetScanId200JSONResponse) VisitGetScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScanId404JSONResponse Error

func (response GetScanId404JSONResponse) VisitGetScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchScanIdJSONRequestBody
}

type PatchScanIdResponseObject interface {
	VisitPatchScanIdResponse(w http.ResponseWriter) error
}

type PatchScanId200JSONResponse struct {
	Scan    *Scan `json:"scan,omitempty"`
	Success bool  `json:"success"`
}

func (response PatchScanId200JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId400JSONResponse Error

func (response PatchScanId400JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId401JSONResponse Error

func (response PatchScanId401JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId404JSONResponse Error

func (response PatchScanId404JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresultsRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostScanIdBruteforceresultsJSONRequestBody
}

type PostScanIdBruteforceresultsResponseObject interface {
	VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error
}

type PostScanIdBruteforceresults200JSONResponse struct {
	Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
	Success              bool                  `json:"success"`
}

func (response PostScanIdBruteforceresults200JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults400JSONResponse Error

func (response PostScanIdBruteforceresults400JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults401JSONResponse Error

func (response PostScanIdBruteforceresults401JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults404JSONResponse Error

func (response PostScanIdBruteforceresults404JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResultRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostScanIdResultJSONRequestBody
}

type PostScanIdResultResponseObject interface {
	VisitPostScanIdResultResponse(w http.ResponseWriter) error
}

type PostScanIdResult200JSONResponse struct {
	Scan    *ScanResult `json:"scan,omitempty"`
	Success bool        `json:"success"`
}

func (response PostScanIdResult200JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult400JSONResponse Error

func (response PostScanIdResult400JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult401JSONResponse Error

func (response PostScanIdResult401JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult404JSONResponse Error

func (response PostScanIdResult404JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse PaginatedUsers

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse Error

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePasswordRequestObject struct {
	Body *PostUsersMeChangePasswordJSONRequestBody
}

type PostUsersMeChangePasswordResponseObject interface {
	VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error
}

type PostUsersMeChangePassword200JSONResponse Success

func (response PostUsersMeChangePassword200JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword400JSONResponse Error

func (response PostUsersMeChangePassword400JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword401JSONResponse Error

func (response PostUsersMeChangePassword401JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse User

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId401JSONResponse Error

func (response GetUsersId401JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId404JSONResponse Error

func (response GetUsersId404JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTaskRequestObject struct {
}

type GetWorkerGetTaskResponseObject interface {
	VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error
}

type GetWorkerGetTask200JSONResponse struct {
	Scan      Scan      `json:"scan"`
	ScanGroup ScanGroup `json:"scan_group"`
	Success   bool      `json:"success"`
}

func (response GetWorkerGetTask200JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask202JSONResponse Error

func (response GetWorkerGetTask202JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask401JSONResponse Error

func (response GetWorkerGetTask401JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Update a bruteforced password by ID
	// (PATCH /bruteforced-passwords/{id})
	PatchBruteforcedPasswordsId(ctx context.Context, request PatchBruteforcedPasswordsIdRequestObject) (PatchBruteforcedPasswordsIdResponseObject, error)
	// Update a bruteforce scan result by ID
	// (PATCH /bruteforceresults/{id})
	PatchBruteforceresultsId(ctx context.Context, request PatchBruteforceresultsIdRequestObject) (PatchBruteforceresultsIdResponseObject, error)
	// Get all CVEs for a database type and version
	// (GET /cves/{dbType}/{version})
	GetCvesDbTypeVersion(ctx context.Context, request GetCvesDbTypeVersionRequestObject) (GetCvesDbTypeVersionResponseObject, error)
	// Get all organizations that the user can see
	// (GET /organizations)
	GetOrganizations(ctx context.Context, request GetOrganizationsRequestObject) (GetOrganizationsResponseObject, error)
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(ctx context.Context, request PostOrganizationsRequestObject) (PostOrganizationsResponseObject, error)
	// Delete organization by ID
	// (DELETE /organizations/{id})
	DeleteOrganizationsId(ctx context.Context, request DeleteOrganizationsIdRequestObject) (DeleteOrganizationsIdResponseObject, error)
	// Get organization by ID
	// (GET /organizations/{id})
	GetOrganizationsId(ctx context.Context, request GetOrganizationsIdRequestObject) (GetOrganizationsIdResponseObject, error)
	// Get postgres database by ID
	// (GET /postgres/{id})
	GetPostgresId(ctx context.Context, request GetPostgresIdRequestObject) (GetPostgresIdResponseObject, error)
	// Update postgres database by ID
	// (PATCH /postgres/{id})
	PatchPostgresId(ctx context.Context, request PatchPostgresIdRequestObject) (PatchPostgresIdResponseObject, error)
	// Get project by ID
	// (GET /project/{id})
	GetProjectId(ctx context.Context, request GetProjectIdRequestObject) (GetProjectIdResponseObject, error)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{id}/bruteforce-passwords)
	GetProjectIdBruteforcePasswords(ctx context.Context, request GetProjectIdBruteforcePasswordsRequestObject) (GetProjectIdBruteforcePasswordsResponseObject, error)
	// Get bruteforced password for a project
	// (GET /project/{id}/bruteforced-password)
	GetProjectIdBruteforcedPassword(ctx context.Context, request GetProjectIdBruteforcedPasswordRequestObject) (GetProjectIdBruteforcedPasswordResponseObject, error)
	// Create a bruteforced password for a project
	// (POST /project/{id}/bruteforced-password)
	PostProjectIdBruteforcedPassword(ctx context.Context, request PostProjectIdBruteforcedPasswordRequestObject) (PostProjectIdBruteforcedPasswordResponseObject, error)
	// Run all extractors and scanners for a project
	// (POST /project/{id}/run)
	PostProjectIdRun(ctx context.Context, request PostProjectIdRunRequestObject) (PostProjectIdRunResponseObject, error)
	// Get a scan by ID
	// (GET /scan/{id})
	GetScanId(ctx context.Context, request GetScanIdRequestObject) (GetScanIdResponseObject, error)
	// Update a scan by ID
	// (PATCH /scan/{id})
	PatchScanId(ctx context.Context, request PatchScanIdRequestObject) (PatchScanIdResponseObject, error)
	// Create a new bruteforce scan result
	// (POST /scan/{id}/bruteforceresults)
	PostScanIdBruteforceresults(ctx context.Context, request PostScanIdBruteforceresultsRequestObject) (PostScanIdBruteforceresultsResponseObject, error)
	// Create a new scan result
	// (POST /scan/{id}/result)
	PostScanIdResult(ctx context.Context, request PostScanIdResultRequestObject) (PostScanIdResultResponseObject, error)
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(ctx context.Context, request PostUsersMeChangePasswordRequestObject) (PostUsersMeChangePasswordResponseObject, error)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(ctx context.Context, request GetWorkerGetTaskRequestObject) (GetWorkerGetTaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PatchBruteforcedPasswordsId operation middleware
func (sh *strictHandler) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchBruteforcedPasswordsIdRequestObject

	request.Id = id

	var body PatchBruteforcedPasswordsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchBruteforcedPasswordsId(ctx, request.(PatchBruteforcedPasswordsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchBruteforcedPasswordsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchBruteforcedPasswordsIdResponseObject); ok {
		if err := validResponse.VisitPatchBruteforcedPasswordsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchBruteforceresultsId operation middleware
func (sh *strictHandler) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchBruteforceresultsIdRequestObject

	request.Id = id

	var body PatchBruteforceresultsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchBruteforceresultsId(ctx, request.(PatchBruteforceresultsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchBruteforceresultsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchBruteforceresultsIdResponseObject); ok {
		if err := validResponse.VisitPatchBruteforceresultsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCvesDbTypeVersion operation middleware
func (sh *strictHandler) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string) {
	var request GetCvesDbTypeVersionRequestObject

	request.DbType = dbType
	request.Version = version

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCvesDbTypeVersion(ctx, request.(GetCvesDbTypeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCvesDbTypeVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCvesDbTypeVersionResponseObject); ok {
		if err := validResponse.VisitGetCvesDbTypeVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrganizations operation middleware
func (sh *strictHandler) GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams) {
	var request GetOrganizationsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganizations(ctx, request.(GetOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganizations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrganizationsResponseObject); ok {
		if err := validResponse.VisitGetOrganizationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOrganizations operation middleware
func (sh *strictHandler) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	var request PostOrganizationsRequestObject

	var body PostOrganizationsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostOrganizations(ctx, request.(PostOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOrganizations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostOrganizationsResponseObject); ok {
		if err := validResponse.VisitPostOrganizationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrganizationsId operation middleware
func (sh *strictHandler) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteOrganizationsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrganizationsId(ctx, request.(DeleteOrganizationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrganizationsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrganizationsIdResponseObject); ok {
		if err := validResponse.VisitDeleteOrganizationsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrganizationsId operation middleware
func (sh *strictHandler) GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetOrganizationsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganizationsId(ctx, request.(GetOrganizationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganizationsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrganizationsIdResponseObject); ok {
		if err := validResponse.VisitGetOrganizationsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostgresId operation middleware
func (sh *strictHandler) GetPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetPostgresIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostgresId(ctx, request.(GetPostgresIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostgresId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostgresIdResponseObject); ok {
		if err := validResponse.VisitGetPostgresIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchPostgresId operation middleware
func (sh *strictHandler) PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchPostgresIdRequestObject

	request.Id = id

	var body PatchPostgresIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchPostgresId(ctx, request.(PatchPostgresIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchPostgresId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchPostgresIdResponseObject); ok {
		if err := validResponse.VisitPatchPostgresIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectId operation middleware
func (sh *strictHandler) GetProjectId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetProjectIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectId(ctx, request.(GetProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectIdResponseObject); ok {
		if err := validResponse.VisitGetProjectIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectIdBruteforcePasswords operation middleware
func (sh *strictHandler) GetProjectIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcePasswordsParams) {
	var request GetProjectIdBruteforcePasswordsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectIdBruteforcePasswords(ctx, request.(GetProjectIdBruteforcePasswordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectIdBruteforcePasswords")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectIdBruteforcePasswordsResponseObject); ok {
		if err := validResponse.VisitGetProjectIdBruteforcePasswordsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectIdBruteforcedPassword operation middleware
func (sh *strictHandler) GetProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectIdBruteforcedPasswordParams) {
	var request GetProjectIdBruteforcedPasswordRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectIdBruteforcedPassword(ctx, request.(GetProjectIdBruteforcedPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectIdBruteforcedPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectIdBruteforcedPasswordResponseObject); ok {
		if err := validResponse.VisitGetProjectIdBruteforcedPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectIdBruteforcedPassword operation middleware
func (sh *strictHandler) PostProjectIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostProjectIdBruteforcedPasswordRequestObject

	request.Id = id

	var body PostProjectIdBruteforcedPasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectIdBruteforcedPassword(ctx, request.(PostProjectIdBruteforcedPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectIdBruteforcedPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectIdBruteforcedPasswordResponseObject); ok {
		if err := validResponse.VisitPostProjectIdBruteforcedPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectIdRun operation middleware
func (sh *strictHandler) PostProjectIdRun(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostProjectIdRunRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectIdRun(ctx, request.(PostProjectIdRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectIdRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectIdRunResponseObject); ok {
		if err := validResponse.VisitPostProjectIdRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScanId operation middleware
func (sh *strictHandler) GetScanId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetScanIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetScanId(ctx, request.(GetScanIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScanId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetScanIdResponseObject); ok {
		if err := validResponse.VisitGetScanIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchScanId operation middleware
func (sh *strictHandler) PatchScanId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchScanIdRequestObject

	request.Id = id

	var body PatchScanIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchScanId(ctx, request.(PatchScanIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchScanId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchScanIdResponseObject); ok {
		if err := validResponse.VisitPatchScanIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScanIdBruteforceresults operation middleware
func (sh *strictHandler) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostScanIdBruteforceresultsRequestObject

	request.Id = id

	var body PostScanIdBruteforceresultsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScanIdBruteforceresults(ctx, request.(PostScanIdBruteforceresultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScanIdBruteforceresults")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScanIdBruteforceresultsResponseObject); ok {
		if err := validResponse.VisitPostScanIdBruteforceresultsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScanIdResult operation middleware
func (sh *strictHandler) PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostScanIdResultRequestObject

	request.Id = id

	var body PostScanIdResultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScanIdResult(ctx, request.(PostScanIdResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScanIdResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScanIdResultResponseObject); ok {
		if err := validResponse.VisitPostScanIdResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersMeChangePassword operation middleware
func (sh *strictHandler) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	var request PostUsersMeChangePasswordRequestObject

	var body PostUsersMeChangePasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersMeChangePassword(ctx, request.(PostUsersMeChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersMeChangePassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersMeChangePasswordResponseObject); ok {
		if err := validResponse.VisitPostUsersMeChangePasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkerGetTask operation middleware
func (sh *strictHandler) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	var request GetWorkerGetTaskRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkerGetTask(ctx, request.(GetWorkerGetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkerGetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkerGetTaskResponseObject); ok {
		if err := validResponse.VisitGetWorkerGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9e2/bOPJfhdDv96cSO2m3uDOwwHaTXC933SZI0uzhiiCgpbHFrURqScputsh3P5DU",
	"W5Qs2XFeNbDANpLIGQ7nPUP6u+OxKGYUqBTO5LsjvAAirP/5K08kzBj34BwLsWTcV09jzmLgkoD+huhn",
	"PgiPk1gSRp2JcxUAIlQCpzhEp8eIzZAMAE3z6VCczec68A1HcQjO5MB1ZoxHWDoTh1D57q3jOvIuBvMn",
	"zIE7964TlzBpQrXN60R3pcfpjEJyQufO/b3rcPgzIRx8Z/JFraYE4ubeLdHg0sP0AkQSyjYqdGNbg+w6",
	"kkkc2sdJTqBlykQoukZgmbJzMaWRGegMzk1OFjb9AzzpVNbtt29+gEVgXVobPUIs5G3BB7dr0S3mTGHZ",
	"OngghfQiKtQp0cyCcAUBG+mOrk+apPIW2WqbXHt0fYJOjys8e3R9snc4Pvj73ng8PmiyrVudpW3S8tPy",
	"7O/RIgkpcDwlIZF3iFAtoEuY7k2xAB9FmOI5REClEeQZ9kCJ8RERHkOXEQ5D9GsiCAUh0MX1m8MxwtTX",
	"//oJHSc4RB/IHE+JRL+//4Suzz+hC5ZI4AJ5LAl9hMOQLRGmKKE4kQFQSTwswXcRh4hJQFhK7H0FjiRD",
	"HBSbLgAJoIJIslDaxagKwug+UqutrUcgPwE1lkRmGxD2PIWrx6jkLBRoxjj6fPFR7KP3tIBmsINvcciI",
	"RDIgojbz9E5NQcGThM4VAEwRns3Ak+AjHxbEA7QgGP3z6uocMa7/f6lpo/gOhB4mYvDIjHgZAkgkGrtZ",
	"Euawy3RSe1MmiM+WNGTY1y+4JqzCakbmCdc0UZB9kJiECiuC55QJSbwK2WxMNUCZKyYfrLy1NEXMJ7NU",
	"vTVB+VhCBgAtsUBqDMrHlLnYyMfB3uGbq4N3k/F4Mh7/17aqOJmGRATg32LZE2g+ZA2ANh2TSn9VbGuY",
	"1cmjrM9RgOk8t74f2XwO/iltahcKy9tuy0hh2WYdKSxbDaTrfNtjOCZ7HvNhDnQPvkmO9ySea7gLHBJF",
	"PDUPoT//zcVhHGCaRJoMLPRXYMVCf7DN3gCl2tZU8HOrRNTU54Al9PMAntTSr2vk6wtcx9Q/M5P+8NZc",
	"0+iMzzElf+HM3tbEL0XNInY4gkxlsvIcZWb/7Q6dVd9twvFvc453I/zt5zeHbsiWwD0soCkCGvOC17s4",
	"PAIh8Bys+ydgAZzIO9vu1SDmn7r5jDayn3DOeCcSVWLr71H22mIFUhtr36b0JRISy0SUN2eGQwH5dFPG",
	"QsC0sagCbgZG0fQjmxP6WQDvVhftYYz2UkI1i3LRvBAwRxK+yW2pypgTKrHwCNErlEzGdgSvzq7OkZq0",
	"4gMcvnn707v1cWARkRDF8s6lSQSceG4I9Od3GpWyAmiio94aUcsJViHRHyygtz6DDQhUkMZVtHqjZetw",
	"3JQom+ZRzNCtQTwtfj08lLIS0a5KOnItz2iAv9emvPo5fltWkIUFMdG4hEj/4/85zJyJ83+jIsUxSvMb",
	"o3MzQNtgMxnmHN9pVSGxXDm+jNClHmD1/FJWKO1vCdcMVJ0/LjMEqkwy0w79rfAwFS1GtkSF5tuOgYpr",
	"RQ/tbb6rLkHP6laxUys6x3NC1aqbeSQNCofh2cyZfFmxT9ksqV26d+tk4fpF/523pLUaTHDfMEmVFbXZ",
	"SI8lVD8uy4dFHJQOt9lRy1Js/LmeKZM8WW3JsrnddC0FTjYrnRPkc8Y/T7Wp2sz23kbpBU/k1tfIbb4r",
	"fPXCZFipLb3gnAk55yCOscRT5dM1cPbTN7ctHrPrBEzY+a/bSWdcDnbPXWcBXKQ2r+m629eodqS5LqB+",
	"biEbUCDzF5uOnxGEHp5pLjF6LrcAaN2MlftQtenNDN7627RejNW6fRtEXyu2t5mOLkCl60sRq9OjLYSr",
	"GNIMdtf+2HkpB9a2ZtJHek1KpzSVFZHU0Vjf50uJ9pjuXgpyW56eZXrl5J3njxu4l33D20fzW002ugns",
	"9wBkYJKxiTCbtGT8K3CBsBDMI2qP0JLIoLKBhAoJ2M9w82GGk1AiRmGNmLPsXtapU5OTdBnK9l3AnAgJ",
	"3B6WQoRJaKetfpVhrmSzsnnqwS/pn/seizaItAwO971rfY8dJFdSnE8elxa5nsFRqZuSWrGFXUuusGBr",
	"GuQ2lRvhbyRKotuuZJKyFkav60BjZZBXNgJpBHQ75yyJWxV/b3dBi1nuM1TkLSdM4Us0FldHxmY6FNof",
	"1AftWzO96+sZtzoNK6x/HjX28sMzSjf88G5XII0aW2jQGm5182cro3VlMtWmCJZwD1rI0T/VaVbWzHfW",
	"uKUM0kqBItyrLv8x4kAbQldnV+f/IFzISwkW1pRMxrcCPA6yI3uYflApS18e5/+trKuVobQhqROwLQjq",
	"7OWmyU0rUnpoG0qX4DHqdxDuQfDqbz/qqdZBC/oc+33rRw9QJqqhZi/mdMXPBt3MJlwXgUsV1d4RTVf4",
	"YfevsB8R2uFOZj4DEbqxQH+92jF0h/ptDa03U9L8qdWP0a8rDnzDAfwXC+iQmEMvs9r00r+HoB1T3S3Q",
	"iegxs5aH4oDRljn1K0STaAp8FSG35A9aLUvJpzP776b8dXOv7ZSXKLtzqQxzai9AKH59n0hdylWc6HiM",
	"fSWQRRKT7JsCAxyTf4NOO5oIpzI6AOxrQqSj/7P3u/5o74p9BcskCjFCZ8zkSqnEJi5O2Vd9JgFHv4gl",
	"ns+B7xNWTH1pnqH356foCrCKMBKuBgVSxmIyGpUG1fujnPdIaBqr0Y7rhMQDalI26ezvY+wFgA73x415",
	"l8vlPtav9xmfj9KxYvTx9Ojk0+XJ3uH+eD+QUai9HuCROJtdAl8Q5UBYkBvpb0aKNkSG5ZVdgSgnNSbO",
	"wf54f6yD3xgojokzcd7oR0rPyUDv6ajQgP5epv3E6Dvx703+Unp6u5QW0uHhqe9M6hnQXG+LU6NEOY5A",
	"6ozuFxsf23o6K40cmjkUjsX+aZYteNg4IcZr1LWNVZJ/f2OGg5C/Mv8u4yAw+XYcxyHx9AJHfwijvIvJ",
	"O93jVhumubW5eNuSUar46ys0Kf2YKYZRiByOx4MQr1qPEuRKX02/YodfrnaUXMfeBQGJxVeLrWtS6bJo",
	"Z8vZTgF9O3D1Xesy/QEW4KdUezdoqphEAz3YPtDPuo2RcfIX+Abo2+0DVZERokyiGUuo75SVvpbbsr7+",
	"cqPkRyRRhPmdQlhzPcJ2bp7eGdNs/MUv6UzGrpQUTlqjGahs0lHraxpkZnhZaqa95tSiZlRUmK70sbWL",
	"As3zkLufdikvaKdeduqloV4qDN2pYLwFiNF3f3p1F8P96HvqD2kNMzcphap++QDyaAHiWA/IoroeuiUr",
	"3CDNcVZtYpDo1CgNR70T1CJHzwKteNkf3M2D6gBF+t6pvqPrE6e7O6F/r4GCu5nsv1YxPC5zKWI8Y6F1",
	"RfMDSITDEB1dn5hTELgqCPqwQsGJmYR6C0jFs1xrEl1CeVb5sIdAVnrbdJgsGZqRUAJXmGZC82cC/K6Q",
	"mjQEfiwRaSy/l6xU2tceSGiqmLww6amzbCU30cazlRUjGWBZpMyUdREAJZatlH5v0tKRxT1losGq2/AA",
	"LY3kLa5fRQ56+34HD8TUQ1l5U9bd+Xw9gA4SF8NpCOtDP7UGiBbhaCj2PKjzIQTTAlEVm2P9vCI4Q0O6",
	"Gmpbi+YqYvJ2AzEZzup9eFv8cD7NWcXQt/sxnVxuGLCqLOtxRcME9PJVXgQfj1+zut+JxFoiofykIfKg",
	"tH7WT5Mr/DYRyeqmQ6UjA5CHGS9CRPI2I7/U39un1SjvB15TVpqAd3GxDeh5na02kpoGkzZEJ/vCRBId",
	"me4XISdbSnA3hcAe4TTJ/Sgp7lcj1LtE97PUJGnae5Ay0TbYtEKuNsHmu8GaJW+rf4F2d8CJTouw1vNs",
	"cXEYo+fh0LXEPSe4ZTk7c24VwvSIxEZGPJ2jIW3pdjSFrVTMLppnekmg7UzrMxJKt7U5rsBACVV6v1LC",
	"aUt2XXdZZqTJerUzPNIDLM5kr9a79+bQcZ2IUBIlkXn74Gqj1/FS2y69rLx4n1KO5WK95jkkXOI4a9m1",
	"RS6KrrKBclH0Gz13uQiwCIpSU4sgpBfLbFgIzno2V4IrNXc+VTH4idvNrOB3xvOhWzWUErE2gZnacIfS",
	"6CqovRR9cLPNWt+uqXTX9fUjqZK87riePmk4ITyhWUi4QstcJPT1hsTFOdE+hy/NedE1pVGfqd1J46uJ",
	"ii8SqiMEffzPk4wL3d6ltpkCF60ymX6QCqX6a2VuSvHe0MSUZreXIIKlY4br3zZVbZGuZ6aGzts9W5/D",
	"8fmh+HUVRYG0a6PQZnrkGdi61T1ppqm5nm8qpKe7UvQcRWZLhSHDax0nHR7F1922VOyc2Vd4hMEq4hWn",
	"NbePzbNR3f6rUQCNo1GvXSN03Ku9Owy10ySvNiymsGw5ELVasxQsuEqdXGQz/gA65Blqjr4+xk4/7PSD",
	"RT/0UAr5Xc1tofjn7JLmVQqguNNEh5yri8EkItJeAT4Y2yrA5tIz9XZcqgcf9C3MsdlMgOyPn/nejuC4",
	"q0I97ovROvW7gSVCc2HPqvmzG1+2VwzsVWA3rPb8S+qNmnl2kXkmYfpCn5J8jcwdPp0i9pupzj6c6Wg3",
	"BOa2n35X/bUaDbPGl9V+39g8L+EcqESh/jEkRGh+F1P7To48/TtKlU6Gdjcq3dvqby9t61Cg/QeeWpwZ",
	"fdBRsvy2U8n2H9yb6fRbUlYaxDI/hp9R4VOzq6VC7mwNtl2VcNdsOjR9mHFQ9pt6zzT73kPJ7do+9B2D",
	"daezoiv1btdTVyVGM27laA5yTwcUHdxm7nX7APJKffh0WdlHroVWIG4Sbx2OD7fPEJ8YUvuI8AKTEE9D",
	"eClNjAbtGeOlq9St4c+qEo1rBQZ8kSnH4m6/yWgUMg+HARNy8tN4PB7hmIwWB879zf3/AgAA//+wDW2g",
	"FXkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
