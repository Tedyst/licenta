// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success bool `json:"success"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// TotpCode The TOTP code
	TotpCode *string `json:"totpCode,omitempty" validate:"omitempty,numeric,len=6"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count    *int                      `json:"count,omitempty"`
	Next     *PaginatedResult_Next     `json:"next,omitempty"`
	Previous *PaginatedResult_Previous `json:"previous,omitempty"`
	Results  *[]interface{}            `json:"results,omitempty"`
}

// PaginatedResultNext0 defines model for .
type PaginatedResultNext0 = string

// PaginatedResultNext1 defines model for .
type PaginatedResultNext1 = map[string]interface{}

// PaginatedResult_Next defines model for PaginatedResult.Next.
type PaginatedResult_Next struct {
	union json.RawMessage
}

// PaginatedResultPrevious0 defines model for .
type PaginatedResultPrevious0 = string

// PaginatedResultPrevious1 defines model for .
type PaginatedResultPrevious1 = map[string]interface{}

// PaginatedResult_Previous defines model for PaginatedResult.Previous.
type PaginatedResult_Previous struct {
	union json.RawMessage
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email" validate:"email"`

	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success *bool `json:"success,omitempty"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// User defines model for User.
type User struct {
	// Email The email of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName *string `json:"firstName,omitempty"`

	// Id The user ID
	Id int64 `json:"id"`

	// LastName The last name of the user
	LastName *string `json:"lastName,omitempty"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// Post2faTotpSecondStepJSONRequestBody defines body for Post2faTotpSecondStep for application/json ContentType.
type Post2faTotpSecondStepJSONRequestBody = TOTPSecondStep

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginUser

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterUser

// AsPaginatedResultNext0 returns the union data inside the PaginatedResult_Next as a PaginatedResultNext0
func (t PaginatedResult_Next) AsPaginatedResultNext0() (PaginatedResultNext0, error) {
	var body PaginatedResultNext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultNext0 overwrites any union data inside the PaginatedResult_Next as the provided PaginatedResultNext0
func (t *PaginatedResult_Next) FromPaginatedResultNext0(v PaginatedResultNext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultNext0 performs a merge with any union data inside the PaginatedResult_Next, using the provided PaginatedResultNext0
func (t *PaginatedResult_Next) MergePaginatedResultNext0(v PaginatedResultNext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginatedResultNext1 returns the union data inside the PaginatedResult_Next as a PaginatedResultNext1
func (t PaginatedResult_Next) AsPaginatedResultNext1() (PaginatedResultNext1, error) {
	var body PaginatedResultNext1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultNext1 overwrites any union data inside the PaginatedResult_Next as the provided PaginatedResultNext1
func (t *PaginatedResult_Next) FromPaginatedResultNext1(v PaginatedResultNext1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultNext1 performs a merge with any union data inside the PaginatedResult_Next, using the provided PaginatedResultNext1
func (t *PaginatedResult_Next) MergePaginatedResultNext1(v PaginatedResultNext1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaginatedResult_Next) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginatedResult_Next) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaginatedResultPrevious0 returns the union data inside the PaginatedResult_Previous as a PaginatedResultPrevious0
func (t PaginatedResult_Previous) AsPaginatedResultPrevious0() (PaginatedResultPrevious0, error) {
	var body PaginatedResultPrevious0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultPrevious0 overwrites any union data inside the PaginatedResult_Previous as the provided PaginatedResultPrevious0
func (t *PaginatedResult_Previous) FromPaginatedResultPrevious0(v PaginatedResultPrevious0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultPrevious0 performs a merge with any union data inside the PaginatedResult_Previous, using the provided PaginatedResultPrevious0
func (t *PaginatedResult_Previous) MergePaginatedResultPrevious0(v PaginatedResultPrevious0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaginatedResultPrevious1 returns the union data inside the PaginatedResult_Previous as a PaginatedResultPrevious1
func (t PaginatedResult_Previous) AsPaginatedResultPrevious1() (PaginatedResultPrevious1, error) {
	var body PaginatedResultPrevious1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaginatedResultPrevious1 overwrites any union data inside the PaginatedResult_Previous as the provided PaginatedResultPrevious1
func (t *PaginatedResult_Previous) FromPaginatedResultPrevious1(v PaginatedResultPrevious1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaginatedResultPrevious1 performs a merge with any union data inside the PaginatedResult_Previous, using the provided PaginatedResultPrevious1
func (t *PaginatedResult_Previous) MergePaginatedResultPrevious1(v PaginatedResultPrevious1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaginatedResult_Previous) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginatedResult_Previous) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// First step of the TOTP authentication process
	// (POST /2fa/totp-first-step)
	Post2faTotpFirstStep(c *fiber.Ctx) error
	// Second step of the TOTP authentication process
	// (POST /2fa/totp-second-step)
	Post2faTotpSecondStep(c *fiber.Ctx) error
	// Logs user into the system
	// (POST /login)
	PostLogin(c *fiber.Ctx) error
	// Logs out current logged in user session
	// (POST /logout)
	PostLogout(c *fiber.Ctx) error
	// Creates a new user
	// (POST /register)
	PostRegister(c *fiber.Ctx) error
	// Get all users
	// (GET /users)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Post2faTotpFirstStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpFirstStep(c *fiber.Ctx) error {

	return siw.Handler.Post2faTotpFirstStep(c)
}

// Post2faTotpSecondStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpSecondStep(c *fiber.Ctx) error {

	return siw.Handler.Post2faTotpSecondStep(c)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *fiber.Ctx) error {

	return siw.Handler.PostLogin(c)
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(c *fiber.Ctx) error {

	return siw.Handler.PostLogout(c)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(c *fiber.Ctx) error {

	return siw.Handler.PostRegister(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", query, &params.Username)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter username: %w", err).Error())
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", query, &params.Email)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter email: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(c *fiber.Ctx) error {

	return siw.Handler.GetUsersMe(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/2fa/totp-first-step", wrapper.Post2faTotpFirstStep)

	router.Post(options.BaseURL+"/2fa/totp-second-step", wrapper.Post2faTotpSecondStep)

	router.Post(options.BaseURL+"/login", wrapper.PostLogin)

	router.Post(options.BaseURL+"/logout", wrapper.PostLogout)

	router.Post(options.BaseURL+"/register", wrapper.PostRegister)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)

}

type Post2faTotpFirstStepRequestObject struct {
}

type Post2faTotpFirstStepResponseObject interface {
	VisitPost2faTotpFirstStepResponse(ctx *fiber.Ctx) error
}

type Post2faTotpFirstStep200JSONResponse TOTPFirstStep

func (response Post2faTotpFirstStep200JSONResponse) VisitPost2faTotpFirstStepResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Post2faTotpFirstStep400JSONResponse Error

func (response Post2faTotpFirstStep400JSONResponse) VisitPost2faTotpFirstStepResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type Post2faTotpSecondStepRequestObject struct {
	Body *Post2faTotpSecondStepJSONRequestBody
}

type Post2faTotpSecondStepResponseObject interface {
	VisitPost2faTotpSecondStepResponse(ctx *fiber.Ctx) error
}

type Post2faTotpSecondStep200JSONResponse Success

func (response Post2faTotpSecondStep200JSONResponse) VisitPost2faTotpSecondStepResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Post2faTotpSecondStep400JSONResponse Error

func (response Post2faTotpSecondStep400JSONResponse) VisitPost2faTotpSecondStepResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(ctx *fiber.Ctx) error
}

type PostLogin200JSONResponse struct {
	Success *bool `json:"success,omitempty"`
	User    *User `json:"user,omitempty"`
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostLogin400JSONResponse Error

func (response PostLogin400JSONResponse) VisitPostLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostLogin401JSONResponse Error

func (response PostLogin401JSONResponse) VisitPostLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostLogoutRequestObject struct {
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(ctx *fiber.Ctx) error
}

type PostLogoutdefaultResponse struct {
	StatusCode int
}

func (response PostLogoutdefaultResponse) VisitPostLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Status(response.StatusCode)
	return nil
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(ctx *fiber.Ctx) error
}

type PostRegister200JSONResponse User

func (response PostRegister200JSONResponse) VisitPostRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostRegister400JSONResponse Error

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostRegister409JSONResponse Error

func (response PostRegister409JSONResponse) VisitPostRegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(ctx *fiber.Ctx) error
}

type GetUsers200JSONResponse struct {
	Count    *int                              `json:"count,omitempty"`
	Next     *GetUsers200JSONResponse_Next     `json:"next,omitempty"`
	Previous *GetUsers200JSONResponse_Previous `json:"previous,omitempty"`
	Results  *[]User                           `json:"results,omitempty"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(ctx *fiber.Ctx) error
}

type GetUsersMe200JSONResponse User

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUsersMe401JSONResponse Error

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// First step of the TOTP authentication process
	// (POST /2fa/totp-first-step)
	Post2faTotpFirstStep(ctx context.Context, request Post2faTotpFirstStepRequestObject) (Post2faTotpFirstStepResponseObject, error)
	// Second step of the TOTP authentication process
	// (POST /2fa/totp-second-step)
	Post2faTotpSecondStep(ctx context.Context, request Post2faTotpSecondStepRequestObject) (Post2faTotpSecondStepResponseObject, error)
	// Logs user into the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logs out current logged in user session
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Creates a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Post2faTotpFirstStep operation middleware
func (sh *strictHandler) Post2faTotpFirstStep(ctx *fiber.Ctx) error {
	var request Post2faTotpFirstStepRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Post2faTotpFirstStep(ctx.UserContext(), request.(Post2faTotpFirstStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Post2faTotpFirstStep")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(Post2faTotpFirstStepResponseObject); ok {
		if err := validResponse.VisitPost2faTotpFirstStepResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Post2faTotpSecondStep operation middleware
func (sh *strictHandler) Post2faTotpSecondStep(ctx *fiber.Ctx) error {
	var request Post2faTotpSecondStepRequestObject

	var body Post2faTotpSecondStepJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Post2faTotpSecondStep(ctx.UserContext(), request.(Post2faTotpSecondStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Post2faTotpSecondStep")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(Post2faTotpSecondStepResponseObject); ok {
		if err := validResponse.VisitPost2faTotpSecondStepResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx *fiber.Ctx) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.UserContext(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx *fiber.Ctx) error {
	var request PostLogoutRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.UserContext(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		if err := validResponse.VisitPostLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx *fiber.Ctx) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.UserContext(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		if err := validResponse.VisitPostRegisterResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *fiber.Ctx, params GetUsersParams) error {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.UserContext(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(ctx *fiber.Ctx) error {
	var request GetUsersMeRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx.UserContext(), request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
