// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
	WorkerAuthScopes  = "workerAuth.Scopes"
)

// Defines values for WorkerTaskType.
const (
	WorkerTaskTypePostgresScan WorkerTaskType = "postgres_scan"
)

// BruteforcePassword defines model for BruteforcePassword.
type BruteforcePassword struct {
	// Id The internal ID of the bruteforce password
	Id int64 `json:"id"`

	// Password The password
	Password string `json:"password"`
}

// ChangePasswordLoggedIn defines model for ChangePasswordLoggedIn.
type ChangePasswordLoggedIn struct {
	// NewPassword The new password
	NewPassword string `json:"new_password" validate:"min=8,alphanum"`

	// OldPassword The old password
	OldPassword string `json:"old_password" validate:"min=8,alphanum"`
}

// CreatePostgresScanResult defines model for CreatePostgresScanResult.
type CreatePostgresScanResult struct {
	Message  string `json:"message"`
	Severity int    `json:"severity"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success bool `json:"success"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,printascii"`

	// Totp The TOTP code
	Totp *string `json:"totp,omitempty" validate:"omitempty,numeric,len=6"`

	// Username The user name for login
	Username string `json:"username" validate:"printascii,min=3,max=20"`
}

// PaginatedBruteforcePasswords defines model for PaginatedBruteforcePasswords.
type PaginatedBruteforcePasswords struct {
	Count   int                  `json:"count"`
	Next    *string              `json:"next,omitempty"`
	Results []BruteforcePassword `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count   int           `json:"count"`
	Next    *string       `json:"next,omitempty"`
	Results []interface{} `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedUsers defines model for PaginatedUsers.
type PaginatedUsers struct {
	Count   int     `json:"count"`
	Next    *string `json:"next,omitempty"`
	Results []User  `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PatchPostgresScan defines model for PatchPostgresScan.
type PatchPostgresScan struct {
	EndedAt string `json:"ended_at"`
	Error   string `json:"error"`
	Status  int    `json:"status"`
}

// PostgresDatabase defines model for PostgresDatabase.
type PostgresDatabase struct {
	CreatedAt    string `json:"created_at"`
	DatabaseName string `json:"database_name"`
	Host         string `json:"host"`
	Id           int    `json:"id"`
	Password     string `json:"password"`
	Port         int    `json:"port"`
	ProjectId    int    `json:"project_id"`
	Remote       bool   `json:"remote"`
	Username     string `json:"username"`
}

// PostgresScan defines model for PostgresScan.
type PostgresScan struct {
	CreatedAt          string `json:"created_at"`
	EndedAt            string `json:"ended_at"`
	Error              string `json:"error"`
	Id                 int    `json:"id"`
	PostgresDatabaseId int    `json:"postgres_database_id"`
	Status             int    `json:"status"`
}

// PostgresScanResult defines model for PostgresScanResult.
type PostgresScanResult struct {
	CreatedAt      string `json:"created_at"`
	Id             int    `json:"id"`
	Message        string `json:"message"`
	PostgresScanId int    `json:"postgres_scan_id"`
	Severity       int    `json:"severity"`
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email" validate:"email"`

	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success bool `json:"success"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPLogin defines model for TOTPLogin.
type TOTPLogin struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code" validate:"numeric,len=6"`
}

// User defines model for User.
type User struct {
	// Email The email of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName *string `json:"firstName,omitempty"`

	// Id The user ID
	Id int64 `json:"id"`

	// LastName The last name of the user
	LastName *string `json:"lastName,omitempty"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// WorkerTask defines model for WorkerTask.
type WorkerTask struct {
	PostgresScan *struct {
		PostgresDatabase *PostgresDatabase `json:"postgres_database,omitempty"`
		Scan             *PostgresScan     `json:"scan,omitempty"`
	} `json:"postgres_scan,omitempty"`

	// Type The Task type
	Type WorkerTaskType `json:"type"`
}

// WorkerTaskType The Task type
type WorkerTaskType string

// GetProjectProjectidBruteforcePasswordsParams defines parameters for GetProjectProjectidBruteforcePasswords.
type GetProjectProjectidBruteforcePasswordsParams struct {
	// LastId The last ID of the item to return
	LastId *int32 `form:"last_id,omitempty" json:"last_id,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// Post2faTotpSecondStepJSONRequestBody defines body for Post2faTotpSecondStep for application/json ContentType.
type Post2faTotpSecondStepJSONRequestBody = TOTPSecondStep

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginUser

// PatchProjectProjectidScannerPostgresScanidJSONRequestBody defines body for PatchProjectProjectidScannerPostgresScanid for application/json ContentType.
type PatchProjectProjectidScannerPostgresScanidJSONRequestBody = PatchPostgresScan

// PostProjectProjectidScannerPostgresScanidResultJSONRequestBody defines body for PostProjectProjectidScannerPostgresScanidResult for application/json ContentType.
type PostProjectProjectidScannerPostgresScanidResultJSONRequestBody = CreatePostgresScanResult

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterUser

// PostUsersMeChangePasswordJSONRequestBody defines body for PostUsersMeChangePassword for application/json ContentType.
type PostUsersMeChangePasswordJSONRequestBody = ChangePasswordLoggedIn

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// First step of the TOTP authentication process
	// (POST /2fa/totp-first-step)
	Post2faTotpFirstStep(w http.ResponseWriter, r *http.Request)
	// Second step of the TOTP authentication process
	// (POST /2fa/totp-second-step)
	Post2faTotpSecondStep(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Logs out current logged in user session
	// (POST /logout)
	PostLogout(w http.ResponseWriter, r *http.Request)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{projectid}/bruteforce-passwords)
	GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams)
	// Get the postgres scan associated with a project
	// (GET /project/{projectid}/scanner/postgres/{scanid})
	GetProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64)
	// Update the postgres scan associated with a project
	// (PATCH /project/{projectid}/scanner/postgres/{scanid})
	PatchProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64)
	// Create a new postgres scan result
	// (POST /project/{projectid}/scanner/postgres/{scanid}/result)
	PostProjectProjectidScannerPostgresScanidResult(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64)
	// Creates a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(w http.ResponseWriter, r *http.Request)
	// Create a task
	// (POST /worker/get-task)
	PostWorkerGetTask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// First step of the TOTP authentication process
// (POST /2fa/totp-first-step)
func (_ Unimplemented) Post2faTotpFirstStep(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Second step of the TOTP authentication process
// (POST /2fa/totp-second-step)
func (_ Unimplemented) Post2faTotpSecondStep(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs user into the system
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs out current logged in user session
// (POST /logout)
func (_ Unimplemented) PostLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all bruteforce passwords associated with a project
// (GET /project/{projectid}/bruteforce-passwords)
func (_ Unimplemented) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the postgres scan associated with a project
// (GET /project/{projectid}/scanner/postgres/{scanid})
func (_ Unimplemented) GetProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the postgres scan associated with a project
// (PATCH /project/{projectid}/scanner/postgres/{scanid})
func (_ Unimplemented) PatchProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new postgres scan result
// (POST /project/{projectid}/scanner/postgres/{scanid}/result)
func (_ Unimplemented) PostProjectProjectidScannerPostgresScanidResult(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a new user
// (POST /register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current logged in user
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change password of current logged in user
// (POST /users/me/change-password)
func (_ Unimplemented) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task for the worker
// (GET /worker/get-task)
func (_ Unimplemented) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a task
// (POST /worker/get-task)
func (_ Unimplemented) PostWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Post2faTotpFirstStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpFirstStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Post2faTotpFirstStep(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Post2faTotpSecondStep operation middleware
func (siw *ServerInterfaceWrapper) Post2faTotpSecondStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Post2faTotpSecondStep(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectidBruteforcePasswords operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectProjectidBruteforcePasswordsParams

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", r.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectidBruteforcePasswords(w, r, projectid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectidScannerPostgresScanid operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectidScannerPostgresScanid(w, r, projectid, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchProjectProjectidScannerPostgresScanid operation middleware
func (siw *ServerInterfaceWrapper) PatchProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchProjectProjectidScannerPostgresScanid(w, r, projectid, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectProjectidScannerPostgresScanidResult operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectidScannerPostgresScanidResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectProjectidScannerPostgresScanidResult(w, r, projectid, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersMeChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersMeChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkerGetTask operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkerGetTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostWorkerGetTask operation middleware
func (siw *ServerInterfaceWrapper) PostWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWorkerGetTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/2fa/totp-first-step", wrapper.Post2faTotpFirstStep)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/2fa/totp-second-step", wrapper.Post2faTotpSecondStep)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/logout", wrapper.PostLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{projectid}/bruteforce-passwords", wrapper.GetProjectProjectidBruteforcePasswords)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{projectid}/scanner/postgres/{scanid}", wrapper.GetProjectProjectidScannerPostgresScanid)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/project/{projectid}/scanner/postgres/{scanid}", wrapper.PatchProjectProjectidScannerPostgresScanid)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{projectid}/scanner/postgres/{scanid}/result", wrapper.PostProjectProjectidScannerPostgresScanidResult)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.PostRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/me/change-password", wrapper.PostUsersMeChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/worker/get-task", wrapper.GetWorkerGetTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/worker/get-task", wrapper.PostWorkerGetTask)
	})

	return r
}

type Post2faTotpFirstStepRequestObject struct {
}

type Post2faTotpFirstStepResponseObject interface {
	VisitPost2faTotpFirstStepResponse(w http.ResponseWriter) error
}

type Post2faTotpFirstStep200JSONResponse TOTPFirstStep

func (response Post2faTotpFirstStep200JSONResponse) VisitPost2faTotpFirstStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Post2faTotpFirstStep401JSONResponse Error

func (response Post2faTotpFirstStep401JSONResponse) VisitPost2faTotpFirstStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Post2faTotpSecondStepRequestObject struct {
	Body *Post2faTotpSecondStepJSONRequestBody
}

type Post2faTotpSecondStepResponseObject interface {
	VisitPost2faTotpSecondStepResponse(w http.ResponseWriter) error
}

type Post2faTotpSecondStep200JSONResponse struct {
	Success bool `json:"success"`
}

func (response Post2faTotpSecondStep200JSONResponse) VisitPost2faTotpSecondStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Post2faTotpSecondStep400JSONResponse Error

func (response Post2faTotpSecondStep400JSONResponse) VisitPost2faTotpSecondStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Post2faTotpSecondStep401JSONResponse Error

func (response Post2faTotpSecondStep401JSONResponse) VisitPost2faTotpSecondStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400JSONResponse Error

func (response PostLogin400JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin401JSONResponse Error

func (response PostLogin401JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLogoutRequestObject struct {
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout200JSONResponse Success

func (response PostLogout200JSONResponse) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidBruteforcePasswordsRequestObject struct {
	Projectid int64 `json:"projectid"`
	Params    GetProjectProjectidBruteforcePasswordsParams
}

type GetProjectProjectidBruteforcePasswordsResponseObject interface {
	VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error
}

type GetProjectProjectidBruteforcePasswords200JSONResponse PaginatedBruteforcePasswords

func (response GetProjectProjectidBruteforcePasswords200JSONResponse) VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidBruteforcePasswords401JSONResponse Error

func (response GetProjectProjectidBruteforcePasswords401JSONResponse) VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidScannerPostgresScanidRequestObject struct {
	Projectid int64 `json:"projectid"`
	Scanid    int64 `json:"scanid"`
}

type GetProjectProjectidScannerPostgresScanidResponseObject interface {
	VisitGetProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error
}

type GetProjectProjectidScannerPostgresScanid200JSONResponse struct {
	Scan    *PostgresScan `json:"scan,omitempty"`
	Success bool          `json:"success"`
}

func (response GetProjectProjectidScannerPostgresScanid200JSONResponse) VisitGetProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidScannerPostgresScanid401JSONResponse Error

func (response GetProjectProjectidScannerPostgresScanid401JSONResponse) VisitGetProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchProjectProjectidScannerPostgresScanidRequestObject struct {
	Projectid int64 `json:"projectid"`
	Scanid    int64 `json:"scanid"`
	Body      *PatchProjectProjectidScannerPostgresScanidJSONRequestBody
}

type PatchProjectProjectidScannerPostgresScanidResponseObject interface {
	VisitPatchProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error
}

type PatchProjectProjectidScannerPostgresScanid200JSONResponse struct {
	Scan    *PostgresScan `json:"scan,omitempty"`
	Success bool          `json:"success"`
}

func (response PatchProjectProjectidScannerPostgresScanid200JSONResponse) VisitPatchProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchProjectProjectidScannerPostgresScanid400JSONResponse Error

func (response PatchProjectProjectidScannerPostgresScanid400JSONResponse) VisitPatchProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchProjectProjectidScannerPostgresScanid401JSONResponse Error

func (response PatchProjectProjectidScannerPostgresScanid401JSONResponse) VisitPatchProjectProjectidScannerPostgresScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidScannerPostgresScanidResultRequestObject struct {
	Projectid int64 `json:"projectid"`
	Scanid    int64 `json:"scanid"`
	Body      *PostProjectProjectidScannerPostgresScanidResultJSONRequestBody
}

type PostProjectProjectidScannerPostgresScanidResultResponseObject interface {
	VisitPostProjectProjectidScannerPostgresScanidResultResponse(w http.ResponseWriter) error
}

type PostProjectProjectidScannerPostgresScanidResult200JSONResponse struct {
	Scan    *PostgresScanResult `json:"scan,omitempty"`
	Success bool                `json:"success"`
}

func (response PostProjectProjectidScannerPostgresScanidResult200JSONResponse) VisitPostProjectProjectidScannerPostgresScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidScannerPostgresScanidResult400JSONResponse Error

func (response PostProjectProjectidScannerPostgresScanidResult400JSONResponse) VisitPostProjectProjectidScannerPostgresScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidScannerPostgresScanidResult401JSONResponse Error

func (response PostProjectProjectidScannerPostgresScanidResult401JSONResponse) VisitPostProjectProjectidScannerPostgresScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response PostRegister200JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse Error

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister409JSONResponse Error

func (response PostRegister409JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse PaginatedUsers

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse Error

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePasswordRequestObject struct {
	Body *PostUsersMeChangePasswordJSONRequestBody
}

type PostUsersMeChangePasswordResponseObject interface {
	VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error
}

type PostUsersMeChangePassword200JSONResponse Success

func (response PostUsersMeChangePassword200JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword400JSONResponse Error

func (response PostUsersMeChangePassword400JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword401JSONResponse Error

func (response PostUsersMeChangePassword401JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse User

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId401JSONResponse Error

func (response GetUsersId401JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId404JSONResponse Error

func (response GetUsersId404JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTaskRequestObject struct {
}

type GetWorkerGetTaskResponseObject interface {
	VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error
}

type GetWorkerGetTask200JSONResponse struct {
	Success bool       `json:"success"`
	Task    WorkerTask `json:"task"`
}

func (response GetWorkerGetTask200JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask204JSONResponse Error

func (response GetWorkerGetTask204JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask401JSONResponse Error

func (response GetWorkerGetTask401JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostWorkerGetTaskRequestObject struct {
}

type PostWorkerGetTaskResponseObject interface {
	VisitPostWorkerGetTaskResponse(w http.ResponseWriter) error
}

type PostWorkerGetTask200JSONResponse Success

func (response PostWorkerGetTask200JSONResponse) VisitPostWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostWorkerGetTask400JSONResponse Error

func (response PostWorkerGetTask400JSONResponse) VisitPostWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostWorkerGetTask401JSONResponse Error

func (response PostWorkerGetTask401JSONResponse) VisitPostWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// First step of the TOTP authentication process
	// (POST /2fa/totp-first-step)
	Post2faTotpFirstStep(ctx context.Context, request Post2faTotpFirstStepRequestObject) (Post2faTotpFirstStepResponseObject, error)
	// Second step of the TOTP authentication process
	// (POST /2fa/totp-second-step)
	Post2faTotpSecondStep(ctx context.Context, request Post2faTotpSecondStepRequestObject) (Post2faTotpSecondStepResponseObject, error)
	// Logs user into the system
	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)
	// Logs out current logged in user session
	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{projectid}/bruteforce-passwords)
	GetProjectProjectidBruteforcePasswords(ctx context.Context, request GetProjectProjectidBruteforcePasswordsRequestObject) (GetProjectProjectidBruteforcePasswordsResponseObject, error)
	// Get the postgres scan associated with a project
	// (GET /project/{projectid}/scanner/postgres/{scanid})
	GetProjectProjectidScannerPostgresScanid(ctx context.Context, request GetProjectProjectidScannerPostgresScanidRequestObject) (GetProjectProjectidScannerPostgresScanidResponseObject, error)
	// Update the postgres scan associated with a project
	// (PATCH /project/{projectid}/scanner/postgres/{scanid})
	PatchProjectProjectidScannerPostgresScanid(ctx context.Context, request PatchProjectProjectidScannerPostgresScanidRequestObject) (PatchProjectProjectidScannerPostgresScanidResponseObject, error)
	// Create a new postgres scan result
	// (POST /project/{projectid}/scanner/postgres/{scanid}/result)
	PostProjectProjectidScannerPostgresScanidResult(ctx context.Context, request PostProjectProjectidScannerPostgresScanidResultRequestObject) (PostProjectProjectidScannerPostgresScanidResultResponseObject, error)
	// Creates a new user
	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(ctx context.Context, request PostUsersMeChangePasswordRequestObject) (PostUsersMeChangePasswordResponseObject, error)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(ctx context.Context, request GetWorkerGetTaskRequestObject) (GetWorkerGetTaskResponseObject, error)
	// Create a task
	// (POST /worker/get-task)
	PostWorkerGetTask(ctx context.Context, request PostWorkerGetTaskRequestObject) (PostWorkerGetTaskResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Post2faTotpFirstStep operation middleware
func (sh *strictHandler) Post2faTotpFirstStep(w http.ResponseWriter, r *http.Request) {
	var request Post2faTotpFirstStepRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Post2faTotpFirstStep(ctx, request.(Post2faTotpFirstStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Post2faTotpFirstStep")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(Post2faTotpFirstStepResponseObject); ok {
		if err := validResponse.VisitPost2faTotpFirstStepResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Post2faTotpSecondStep operation middleware
func (sh *strictHandler) Post2faTotpSecondStep(w http.ResponseWriter, r *http.Request) {
	var request Post2faTotpSecondStepRequestObject

	var body Post2faTotpSecondStepJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Post2faTotpSecondStep(ctx, request.(Post2faTotpSecondStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Post2faTotpSecondStep")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(Post2faTotpSecondStepResponseObject); ok {
		if err := validResponse.VisitPost2faTotpSecondStepResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(w http.ResponseWriter, r *http.Request) {
	var request PostLogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx, request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		if err := validResponse.VisitPostLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetProjectProjectidBruteforcePasswords operation middleware
func (sh *strictHandler) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams) {
	var request GetProjectProjectidBruteforcePasswordsRequestObject

	request.Projectid = projectid
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectidBruteforcePasswords(ctx, request.(GetProjectProjectidBruteforcePasswordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectidBruteforcePasswords")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectidBruteforcePasswordsResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectidBruteforcePasswordsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetProjectProjectidScannerPostgresScanid operation middleware
func (sh *strictHandler) GetProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	var request GetProjectProjectidScannerPostgresScanidRequestObject

	request.Projectid = projectid
	request.Scanid = scanid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectidScannerPostgresScanid(ctx, request.(GetProjectProjectidScannerPostgresScanidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectidScannerPostgresScanid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectidScannerPostgresScanidResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectidScannerPostgresScanidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PatchProjectProjectidScannerPostgresScanid operation middleware
func (sh *strictHandler) PatchProjectProjectidScannerPostgresScanid(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	var request PatchProjectProjectidScannerPostgresScanidRequestObject

	request.Projectid = projectid
	request.Scanid = scanid

	var body PatchProjectProjectidScannerPostgresScanidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectProjectidScannerPostgresScanid(ctx, request.(PatchProjectProjectidScannerPostgresScanidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectProjectidScannerPostgresScanid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchProjectProjectidScannerPostgresScanidResponseObject); ok {
		if err := validResponse.VisitPatchProjectProjectidScannerPostgresScanidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostProjectProjectidScannerPostgresScanidResult operation middleware
func (sh *strictHandler) PostProjectProjectidScannerPostgresScanidResult(w http.ResponseWriter, r *http.Request, projectid int64, scanid int64) {
	var request PostProjectProjectidScannerPostgresScanidResultRequestObject

	request.Projectid = projectid
	request.Scanid = scanid

	var body PostProjectProjectidScannerPostgresScanidResultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectidScannerPostgresScanidResult(ctx, request.(PostProjectProjectidScannerPostgresScanidResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectidScannerPostgresScanidResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectProjectidScannerPostgresScanidResultResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectidScannerPostgresScanidResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(w http.ResponseWriter, r *http.Request) {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx, request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		if err := validResponse.VisitPostRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostUsersMeChangePassword operation middleware
func (sh *strictHandler) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	var request PostUsersMeChangePasswordRequestObject

	var body PostUsersMeChangePasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersMeChangePassword(ctx, request.(PostUsersMeChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersMeChangePassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersMeChangePasswordResponseObject); ok {
		if err := validResponse.VisitPostUsersMeChangePasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetWorkerGetTask operation middleware
func (sh *strictHandler) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	var request GetWorkerGetTaskRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkerGetTask(ctx, request.(GetWorkerGetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkerGetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkerGetTaskResponseObject); ok {
		if err := validResponse.VisitGetWorkerGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostWorkerGetTask operation middleware
func (sh *strictHandler) PostWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	var request PostWorkerGetTaskRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostWorkerGetTask(ctx, request.(PostWorkerGetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWorkerGetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostWorkerGetTaskResponseObject); ok {
		if err := validResponse.VisitPostWorkerGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
