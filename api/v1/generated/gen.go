// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
	WorkerAuthScopes  = "workerAuth.Scopes"
)

// Defines values for WorkerTaskType.
const (
	WorkerTaskTypePostgresScan WorkerTaskType = "postgres_scan"
)

// BruteforcePassword defines model for BruteforcePassword.
type BruteforcePassword struct {
	// Id The internal ID of the bruteforce password
	Id int64 `json:"id"`

	// Password The password
	Password string `json:"password"`
}

// CVE defines model for CVE.
type CVE struct {
	// CveId The CVE ID
	CveId string `json:"cve_id"`

	// Description The CVE description
	Description string `json:"description"`

	// Id The internal ID of the CVE
	Id int64 `json:"id"`

	// LastModified The date the CVE was last modified
	LastModified string `json:"last_modified"`

	// PublishedAt The date the CVE was published
	PublishedAt string `json:"published_at"`
}

// ChangePasswordLoggedIn defines model for ChangePasswordLoggedIn.
type ChangePasswordLoggedIn struct {
	// NewPassword The new password
	NewPassword string `json:"new_password" validate:"min=8,alphanum"`

	// OldPassword The old password
	OldPassword string `json:"old_password" validate:"min=8,alphanum"`
}

// CreatePostgresScanResult defines model for CreatePostgresScanResult.
type CreatePostgresScanResult struct {
	Message  string `json:"message"`
	Severity int    `json:"severity"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success bool `json:"success"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,printascii"`

	// Totp The TOTP code
	Totp *string `json:"totp,omitempty" validate:"omitempty,numeric,len=6"`

	// Username The user name for login
	Username string `json:"username" validate:"printascii,min=3,max=20"`
}

// PaginatedBruteforcePasswords defines model for PaginatedBruteforcePasswords.
type PaginatedBruteforcePasswords struct {
	Count   int                  `json:"count"`
	Next    *string              `json:"next,omitempty"`
	Results []BruteforcePassword `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count   int           `json:"count"`
	Next    *string       `json:"next,omitempty"`
	Results []interface{} `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedUsers defines model for PaginatedUsers.
type PaginatedUsers struct {
	Count   int     `json:"count"`
	Next    *string `json:"next,omitempty"`
	Results []User  `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PatchPostgresDatabase defines model for PatchPostgresDatabase.
type PatchPostgresDatabase struct {
	DatabaseName *string `json:"database_name,omitempty"`
	Host         *string `json:"host,omitempty"`
	Password     *string `json:"password,omitempty"`
	Port         *int    `json:"port,omitempty"`
	Remote       *bool   `json:"remote,omitempty"`
	Username     *string `json:"username,omitempty"`
	Version      *string `json:"version,omitempty"`
}

// PatchPostgresScan defines model for PatchPostgresScan.
type PatchPostgresScan struct {
	EndedAt string `json:"ended_at"`
	Error   string `json:"error"`
	Status  int    `json:"status"`
}

// PostgresDatabase defines model for PostgresDatabase.
type PostgresDatabase struct {
	CreatedAt    string `json:"created_at"`
	DatabaseName string `json:"database_name"`
	Host         string `json:"host"`
	Id           int    `json:"id"`
	Password     string `json:"password"`
	Port         int    `json:"port"`
	ProjectId    int    `json:"project_id"`
	Remote       bool   `json:"remote"`
	Username     string `json:"username"`
	Version      string `json:"version"`
}

// PostgresScan defines model for PostgresScan.
type PostgresScan struct {
	CreatedAt       string `json:"created_at"`
	EndedAt         string `json:"ended_at"`
	Error           string `json:"error"`
	Id              int    `json:"id"`
	MaximumSeverity int    `json:"maximum_severity"`
	Status          int    `json:"status"`
}

// PostgresScanResult defines model for PostgresScanResult.
type PostgresScanResult struct {
	CreatedAt string `json:"created_at"`
	Id        int    `json:"id"`
	Message   string `json:"message"`
	Severity  int    `json:"severity"`
}

// Project defines model for Project.
type Project struct {
	// CreatedAt The date the project was created
	CreatedAt string `json:"created_at"`

	// Id The internal ID of the project
	Id int64 `json:"id"`

	// Name The name of the project
	Name string `json:"name"`

	// OrganizationId The internal ID of the organization
	OrganizationId int64 `json:"organization_id"`
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email" validate:"email"`

	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success bool `json:"success"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPLogin defines model for TOTPLogin.
type TOTPLogin struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code" validate:"numeric,len=6"`
}

// UpdatePostgresVersion defines model for UpdatePostgresVersion.
type UpdatePostgresVersion struct {
	Version string `json:"version"`
}

// User defines model for User.
type User struct {
	// Email The email of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName *string `json:"firstName,omitempty"`

	// Id The user ID
	Id int64 `json:"id"`

	// LastName The last name of the user
	LastName *string `json:"lastName,omitempty"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// WorkerTask defines model for WorkerTask.
type WorkerTask struct {
	PostgresScan *struct {
		PostgresDatabase *PostgresDatabase `json:"postgres_database,omitempty"`
		Scan             *PostgresScan     `json:"scan,omitempty"`
	} `json:"postgres_scan,omitempty"`

	// Type The Task type
	Type WorkerTaskType `json:"type"`
}

// WorkerTaskType The Task type
type WorkerTaskType string

// GetProjectProjectidBruteforcePasswordsParams defines parameters for GetProjectProjectidBruteforcePasswords.
type GetProjectProjectidBruteforcePasswordsParams struct {
	// LastId The last ID of the item to return
	LastId *int32 `form:"last_id,omitempty" json:"last_id,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody defines body for PatchScannerPostgresDatabasePostgresDatabaseId for application/json ContentType.
type PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody = PatchPostgresDatabase

// PatchScannerPostgresScanScanidJSONRequestBody defines body for PatchScannerPostgresScanScanid for application/json ContentType.
type PatchScannerPostgresScanScanidJSONRequestBody = PatchPostgresScan

// PostScannerPostgresScanScanidResultJSONRequestBody defines body for PostScannerPostgresScanScanidResult for application/json ContentType.
type PostScannerPostgresScanScanidResultJSONRequestBody = CreatePostgresScanResult

// PostUsersMeChangePasswordJSONRequestBody defines body for PostUsersMeChangePassword for application/json ContentType.
type PostUsersMeChangePasswordJSONRequestBody = ChangePasswordLoggedIn

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCvesDatabaseTypeVersion request
	GetCvesDatabaseTypeVersion(ctx context.Context, databaseType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectid request
	GetProjectProjectid(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectidBruteforcePasswords request
	GetProjectProjectidBruteforcePasswords(ctx context.Context, projectid int64, params *GetProjectProjectidBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectProjectidRun request
	PostProjectProjectidRun(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScannerPostgresDatabasePostgresDatabaseId request
	GetScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScannerPostgresDatabasePostgresDatabaseIdWithBody request with any body
	PatchScannerPostgresDatabasePostgresDatabaseIdWithBody(ctx context.Context, postgresDatabaseId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScannerPostgresDatabasePostgresDatabaseId request
	PostScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScannerPostgresScanScanid request
	GetScannerPostgresScanScanid(ctx context.Context, scanid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScannerPostgresScanScanidWithBody request with any body
	PatchScannerPostgresScanScanidWithBody(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScannerPostgresScanScanid(ctx context.Context, scanid int64, body PatchScannerPostgresScanScanidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScannerPostgresScanScanidResultWithBody request with any body
	PostScannerPostgresScanScanidResultWithBody(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScannerPostgresScanScanidResult(ctx context.Context, scanid int64, body PostScannerPostgresScanScanidResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersMeChangePasswordWithBody request with any body
	PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkerGetTask request
	GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCvesDatabaseTypeVersion(ctx context.Context, databaseType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCvesDatabaseTypeVersionRequest(c.Server, databaseType, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectid(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectidRequest(c.Server, projectid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectidBruteforcePasswords(ctx context.Context, projectid int64, params *GetProjectProjectidBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectidBruteforcePasswordsRequest(c.Server, projectid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectidRun(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectidRunRequest(c.Server, projectid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScannerPostgresDatabasePostgresDatabaseIdRequest(c.Server, postgresDatabaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScannerPostgresDatabasePostgresDatabaseIdWithBody(ctx context.Context, postgresDatabaseId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScannerPostgresDatabasePostgresDatabaseIdRequestWithBody(c.Server, postgresDatabaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScannerPostgresDatabasePostgresDatabaseIdRequest(c.Server, postgresDatabaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScannerPostgresDatabasePostgresDatabaseIdRequest(c.Server, postgresDatabaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScannerPostgresScanScanid(ctx context.Context, scanid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScannerPostgresScanScanidRequest(c.Server, scanid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScannerPostgresScanScanidWithBody(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScannerPostgresScanScanidRequestWithBody(c.Server, scanid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScannerPostgresScanScanid(ctx context.Context, scanid int64, body PatchScannerPostgresScanScanidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScannerPostgresScanScanidRequest(c.Server, scanid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScannerPostgresScanScanidResultWithBody(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScannerPostgresScanScanidResultRequestWithBody(c.Server, scanid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScannerPostgresScanScanidResult(ctx context.Context, scanid int64, body PostScannerPostgresScanScanidResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScannerPostgresScanScanidResultRequest(c.Server, scanid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkerGetTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCvesDatabaseTypeVersionRequest generates requests for GetCvesDatabaseTypeVersion
func NewGetCvesDatabaseTypeVersionRequest(server string, databaseType string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseType", runtime.ParamLocationPath, databaseType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cves/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectProjectidRequest generates requests for GetProjectProjectid
func NewGetProjectProjectidRequest(server string, projectid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectid", runtime.ParamLocationPath, projectid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectProjectidBruteforcePasswordsRequest generates requests for GetProjectProjectidBruteforcePasswords
func NewGetProjectProjectidBruteforcePasswordsRequest(server string, projectid int64, params *GetProjectProjectidBruteforcePasswordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectid", runtime.ParamLocationPath, projectid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/bruteforce-passwords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LastId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_id", runtime.ParamLocationQuery, *params.LastId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectProjectidRunRequest generates requests for PostProjectProjectidRun
func NewPostProjectProjectidRunRequest(server string, projectid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectid", runtime.ParamLocationPath, projectid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScannerPostgresDatabasePostgresDatabaseIdRequest generates requests for GetScannerPostgresDatabasePostgresDatabaseId
func NewGetScannerPostgresDatabasePostgresDatabaseIdRequest(server string, postgresDatabaseId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, postgresDatabaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScannerPostgresDatabasePostgresDatabaseIdRequest calls the generic PatchScannerPostgresDatabasePostgresDatabaseId builder with application/json body
func NewPatchScannerPostgresDatabasePostgresDatabaseIdRequest(server string, postgresDatabaseId int64, body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScannerPostgresDatabasePostgresDatabaseIdRequestWithBody(server, postgresDatabaseId, "application/json", bodyReader)
}

// NewPatchScannerPostgresDatabasePostgresDatabaseIdRequestWithBody generates requests for PatchScannerPostgresDatabasePostgresDatabaseId with any type of body
func NewPatchScannerPostgresDatabasePostgresDatabaseIdRequestWithBody(server string, postgresDatabaseId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, postgresDatabaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScannerPostgresDatabasePostgresDatabaseIdRequest generates requests for PostScannerPostgresDatabasePostgresDatabaseId
func NewPostScannerPostgresDatabasePostgresDatabaseIdRequest(server string, postgresDatabaseId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, postgresDatabaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScannerPostgresScanScanidRequest generates requests for GetScannerPostgresScanScanid
func NewGetScannerPostgresScanScanidRequest(server string, scanid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanid", runtime.ParamLocationPath, scanid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScannerPostgresScanScanidRequest calls the generic PatchScannerPostgresScanScanid builder with application/json body
func NewPatchScannerPostgresScanScanidRequest(server string, scanid int64, body PatchScannerPostgresScanScanidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScannerPostgresScanScanidRequestWithBody(server, scanid, "application/json", bodyReader)
}

// NewPatchScannerPostgresScanScanidRequestWithBody generates requests for PatchScannerPostgresScanScanid with any type of body
func NewPatchScannerPostgresScanScanidRequestWithBody(server string, scanid int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanid", runtime.ParamLocationPath, scanid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScannerPostgresScanScanidResultRequest calls the generic PostScannerPostgresScanScanidResult builder with application/json body
func NewPostScannerPostgresScanScanidResultRequest(server string, scanid int64, body PostScannerPostgresScanScanidResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScannerPostgresScanScanidResultRequestWithBody(server, scanid, "application/json", bodyReader)
}

// NewPostScannerPostgresScanScanidResultRequestWithBody generates requests for PostScannerPostgresScanScanidResult with any type of body
func NewPostScannerPostgresScanScanidResultRequestWithBody(server string, scanid int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scanid", runtime.ParamLocationPath, scanid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scanner/postgres/scan/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersMeChangePasswordRequest calls the generic PostUsersMeChangePassword builder with application/json body
func NewPostUsersMeChangePasswordRequest(server string, body PostUsersMeChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersMeChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersMeChangePasswordRequestWithBody generates requests for PostUsersMeChangePassword with any type of body
func NewPostUsersMeChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkerGetTaskRequest generates requests for GetWorkerGetTask
func NewGetWorkerGetTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/worker/get-task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCvesDatabaseTypeVersionWithResponse request
	GetCvesDatabaseTypeVersionWithResponse(ctx context.Context, databaseType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDatabaseTypeVersionResponse, error)

	// GetProjectProjectidWithResponse request
	GetProjectProjectidWithResponse(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*GetProjectProjectidResponse, error)

	// GetProjectProjectidBruteforcePasswordsWithResponse request
	GetProjectProjectidBruteforcePasswordsWithResponse(ctx context.Context, projectid int64, params *GetProjectProjectidBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectProjectidBruteforcePasswordsResponse, error)

	// PostProjectProjectidRunWithResponse request
	PostProjectProjectidRunWithResponse(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*PostProjectProjectidRunResponse, error)

	// GetScannerPostgresDatabasePostgresDatabaseIdWithResponse request
	GetScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*GetScannerPostgresDatabasePostgresDatabaseIdResponse, error)

	// PatchScannerPostgresDatabasePostgresDatabaseIdWithBodyWithResponse request with any body
	PatchScannerPostgresDatabasePostgresDatabaseIdWithBodyWithResponse(ctx context.Context, postgresDatabaseId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScannerPostgresDatabasePostgresDatabaseIdResponse, error)

	PatchScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScannerPostgresDatabasePostgresDatabaseIdResponse, error)

	// PostScannerPostgresDatabasePostgresDatabaseIdWithResponse request
	PostScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*PostScannerPostgresDatabasePostgresDatabaseIdResponse, error)

	// GetScannerPostgresScanScanidWithResponse request
	GetScannerPostgresScanScanidWithResponse(ctx context.Context, scanid int64, reqEditors ...RequestEditorFn) (*GetScannerPostgresScanScanidResponse, error)

	// PatchScannerPostgresScanScanidWithBodyWithResponse request with any body
	PatchScannerPostgresScanScanidWithBodyWithResponse(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScannerPostgresScanScanidResponse, error)

	PatchScannerPostgresScanScanidWithResponse(ctx context.Context, scanid int64, body PatchScannerPostgresScanScanidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScannerPostgresScanScanidResponse, error)

	// PostScannerPostgresScanScanidResultWithBodyWithResponse request with any body
	PostScannerPostgresScanScanidResultWithBodyWithResponse(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScannerPostgresScanScanidResultResponse, error)

	PostScannerPostgresScanScanidResultWithResponse(ctx context.Context, scanid int64, body PostScannerPostgresScanScanidResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScannerPostgresScanScanidResultResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// PostUsersMeChangePasswordWithBodyWithResponse request with any body
	PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// GetWorkerGetTaskWithResponse request
	GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error)
}

type GetCvesDatabaseTypeVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cves    []CVE `json:"cves"`
		Success bool  `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetCvesDatabaseTypeVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCvesDatabaseTypeVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
		Project           Project            `json:"project"`
		Success           bool               `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectidBruteforcePasswordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBruteforcePasswords
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectidBruteforcePasswordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectidBruteforcePasswordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectProjectidRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresScans []PostgresScan `json:"postgres_scans"`
		Success       bool           `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectProjectidRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectProjectidRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScannerPostgresDatabasePostgresDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Database PostgresDatabase `json:"database"`

		// ScanCount The number of scans
		ScanCount int `json:"scan_count"`

		// Scans The list of scans
		Scans []PostgresScan `json:"scans"`

		// Success The success status
		Success bool `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetScannerPostgresDatabasePostgresDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScannerPostgresDatabasePostgresDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScannerPostgresDatabasePostgresDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Database *PostgresDatabase `json:"database,omitempty"`
		Success  bool              `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchScannerPostgresDatabasePostgresDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScannerPostgresDatabasePostgresDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScannerPostgresDatabasePostgresDatabaseIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *PostgresScan `json:"scan,omitempty"`
		Success bool          `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScannerPostgresDatabasePostgresDatabaseIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScannerPostgresDatabasePostgresDatabaseIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScannerPostgresScanScanidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results []PostgresScanResult `json:"results"`
		Scan    PostgresScan         `json:"scan"`
		Success bool                 `json:"success"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetScannerPostgresScanScanidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScannerPostgresScanScanidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScannerPostgresScanScanidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *PostgresScan `json:"scan,omitempty"`
		Success bool          `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchScannerPostgresScanScanidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScannerPostgresScanScanidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScannerPostgresScanScanidResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *PostgresScanResult `json:"scan,omitempty"`
		Success bool                `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScannerPostgresScanScanidResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScannerPostgresScanScanidResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUsers
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
		User    User `json:"user"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersMeChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersMeChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersMeChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkerGetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool       `json:"success"`
		Task    WorkerTask `json:"task"`
	}
	JSON202 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkerGetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkerGetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCvesDatabaseTypeVersionWithResponse request returning *GetCvesDatabaseTypeVersionResponse
func (c *ClientWithResponses) GetCvesDatabaseTypeVersionWithResponse(ctx context.Context, databaseType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDatabaseTypeVersionResponse, error) {
	rsp, err := c.GetCvesDatabaseTypeVersion(ctx, databaseType, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCvesDatabaseTypeVersionResponse(rsp)
}

// GetProjectProjectidWithResponse request returning *GetProjectProjectidResponse
func (c *ClientWithResponses) GetProjectProjectidWithResponse(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*GetProjectProjectidResponse, error) {
	rsp, err := c.GetProjectProjectid(ctx, projectid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectidResponse(rsp)
}

// GetProjectProjectidBruteforcePasswordsWithResponse request returning *GetProjectProjectidBruteforcePasswordsResponse
func (c *ClientWithResponses) GetProjectProjectidBruteforcePasswordsWithResponse(ctx context.Context, projectid int64, params *GetProjectProjectidBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectProjectidBruteforcePasswordsResponse, error) {
	rsp, err := c.GetProjectProjectidBruteforcePasswords(ctx, projectid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectidBruteforcePasswordsResponse(rsp)
}

// PostProjectProjectidRunWithResponse request returning *PostProjectProjectidRunResponse
func (c *ClientWithResponses) PostProjectProjectidRunWithResponse(ctx context.Context, projectid int64, reqEditors ...RequestEditorFn) (*PostProjectProjectidRunResponse, error) {
	rsp, err := c.PostProjectProjectidRun(ctx, projectid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectidRunResponse(rsp)
}

// GetScannerPostgresDatabasePostgresDatabaseIdWithResponse request returning *GetScannerPostgresDatabasePostgresDatabaseIdResponse
func (c *ClientWithResponses) GetScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*GetScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	rsp, err := c.GetScannerPostgresDatabasePostgresDatabaseId(ctx, postgresDatabaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScannerPostgresDatabasePostgresDatabaseIdResponse(rsp)
}

// PatchScannerPostgresDatabasePostgresDatabaseIdWithBodyWithResponse request with arbitrary body returning *PatchScannerPostgresDatabasePostgresDatabaseIdResponse
func (c *ClientWithResponses) PatchScannerPostgresDatabasePostgresDatabaseIdWithBodyWithResponse(ctx context.Context, postgresDatabaseId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	rsp, err := c.PatchScannerPostgresDatabasePostgresDatabaseIdWithBody(ctx, postgresDatabaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScannerPostgresDatabasePostgresDatabaseIdResponse(rsp)
}

func (c *ClientWithResponses) PatchScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	rsp, err := c.PatchScannerPostgresDatabasePostgresDatabaseId(ctx, postgresDatabaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScannerPostgresDatabasePostgresDatabaseIdResponse(rsp)
}

// PostScannerPostgresDatabasePostgresDatabaseIdWithResponse request returning *PostScannerPostgresDatabasePostgresDatabaseIdResponse
func (c *ClientWithResponses) PostScannerPostgresDatabasePostgresDatabaseIdWithResponse(ctx context.Context, postgresDatabaseId int64, reqEditors ...RequestEditorFn) (*PostScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	rsp, err := c.PostScannerPostgresDatabasePostgresDatabaseId(ctx, postgresDatabaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScannerPostgresDatabasePostgresDatabaseIdResponse(rsp)
}

// GetScannerPostgresScanScanidWithResponse request returning *GetScannerPostgresScanScanidResponse
func (c *ClientWithResponses) GetScannerPostgresScanScanidWithResponse(ctx context.Context, scanid int64, reqEditors ...RequestEditorFn) (*GetScannerPostgresScanScanidResponse, error) {
	rsp, err := c.GetScannerPostgresScanScanid(ctx, scanid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScannerPostgresScanScanidResponse(rsp)
}

// PatchScannerPostgresScanScanidWithBodyWithResponse request with arbitrary body returning *PatchScannerPostgresScanScanidResponse
func (c *ClientWithResponses) PatchScannerPostgresScanScanidWithBodyWithResponse(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScannerPostgresScanScanidResponse, error) {
	rsp, err := c.PatchScannerPostgresScanScanidWithBody(ctx, scanid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScannerPostgresScanScanidResponse(rsp)
}

func (c *ClientWithResponses) PatchScannerPostgresScanScanidWithResponse(ctx context.Context, scanid int64, body PatchScannerPostgresScanScanidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScannerPostgresScanScanidResponse, error) {
	rsp, err := c.PatchScannerPostgresScanScanid(ctx, scanid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScannerPostgresScanScanidResponse(rsp)
}

// PostScannerPostgresScanScanidResultWithBodyWithResponse request with arbitrary body returning *PostScannerPostgresScanScanidResultResponse
func (c *ClientWithResponses) PostScannerPostgresScanScanidResultWithBodyWithResponse(ctx context.Context, scanid int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScannerPostgresScanScanidResultResponse, error) {
	rsp, err := c.PostScannerPostgresScanScanidResultWithBody(ctx, scanid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScannerPostgresScanScanidResultResponse(rsp)
}

func (c *ClientWithResponses) PostScannerPostgresScanScanidResultWithResponse(ctx context.Context, scanid int64, body PostScannerPostgresScanScanidResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScannerPostgresScanScanidResultResponse, error) {
	rsp, err := c.PostScannerPostgresScanScanidResult(ctx, scanid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScannerPostgresScanScanidResultResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// PostUsersMeChangePasswordWithBodyWithResponse request with arbitrary body returning *PostUsersMeChangePasswordResponse
func (c *ClientWithResponses) PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// GetWorkerGetTaskWithResponse request returning *GetWorkerGetTaskResponse
func (c *ClientWithResponses) GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error) {
	rsp, err := c.GetWorkerGetTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkerGetTaskResponse(rsp)
}

// ParseGetCvesDatabaseTypeVersionResponse parses an HTTP response from a GetCvesDatabaseTypeVersionWithResponse call
func ParseGetCvesDatabaseTypeVersionResponse(rsp *http.Response) (*GetCvesDatabaseTypeVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCvesDatabaseTypeVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cves    []CVE `json:"cves"`
			Success bool  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectidResponse parses an HTTP response from a GetProjectProjectidWithResponse call
func ParseGetProjectProjectidResponse(rsp *http.Response) (*GetProjectProjectidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
			Project           Project            `json:"project"`
			Success           bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectidBruteforcePasswordsResponse parses an HTTP response from a GetProjectProjectidBruteforcePasswordsWithResponse call
func ParseGetProjectProjectidBruteforcePasswordsResponse(rsp *http.Response) (*GetProjectProjectidBruteforcePasswordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectidBruteforcePasswordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBruteforcePasswords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostProjectProjectidRunResponse parses an HTTP response from a PostProjectProjectidRunWithResponse call
func ParsePostProjectProjectidRunResponse(rsp *http.Response) (*PostProjectProjectidRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectProjectidRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresScans []PostgresScan `json:"postgres_scans"`
			Success       bool           `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetScannerPostgresDatabasePostgresDatabaseIdResponse parses an HTTP response from a GetScannerPostgresDatabasePostgresDatabaseIdWithResponse call
func ParseGetScannerPostgresDatabasePostgresDatabaseIdResponse(rsp *http.Response) (*GetScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScannerPostgresDatabasePostgresDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Database PostgresDatabase `json:"database"`

			// ScanCount The number of scans
			ScanCount int `json:"scan_count"`

			// Scans The list of scans
			Scans []PostgresScan `json:"scans"`

			// Success The success status
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchScannerPostgresDatabasePostgresDatabaseIdResponse parses an HTTP response from a PatchScannerPostgresDatabasePostgresDatabaseIdWithResponse call
func ParsePatchScannerPostgresDatabasePostgresDatabaseIdResponse(rsp *http.Response) (*PatchScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScannerPostgresDatabasePostgresDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Database *PostgresDatabase `json:"database,omitempty"`
			Success  bool              `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScannerPostgresDatabasePostgresDatabaseIdResponse parses an HTTP response from a PostScannerPostgresDatabasePostgresDatabaseIdWithResponse call
func ParsePostScannerPostgresDatabasePostgresDatabaseIdResponse(rsp *http.Response) (*PostScannerPostgresDatabasePostgresDatabaseIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScannerPostgresDatabasePostgresDatabaseIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *PostgresScan `json:"scan,omitempty"`
			Success bool          `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetScannerPostgresScanScanidResponse parses an HTTP response from a GetScannerPostgresScanScanidWithResponse call
func ParseGetScannerPostgresScanScanidResponse(rsp *http.Response) (*GetScannerPostgresScanScanidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScannerPostgresScanScanidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results []PostgresScanResult `json:"results"`
			Scan    PostgresScan         `json:"scan"`
			Success bool                 `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchScannerPostgresScanScanidResponse parses an HTTP response from a PatchScannerPostgresScanScanidWithResponse call
func ParsePatchScannerPostgresScanScanidResponse(rsp *http.Response) (*PatchScannerPostgresScanScanidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScannerPostgresScanScanidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *PostgresScan `json:"scan,omitempty"`
			Success bool          `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScannerPostgresScanScanidResultResponse parses an HTTP response from a PostScannerPostgresScanScanidResultWithResponse call
func ParsePostScannerPostgresScanScanidResultResponse(rsp *http.Response) (*PostScannerPostgresScanScanidResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScannerPostgresScanScanidResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *PostgresScanResult `json:"scan,omitempty"`
			Success bool                `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
			User    User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostUsersMeChangePasswordResponse parses an HTTP response from a PostUsersMeChangePasswordWithResponse call
func ParsePostUsersMeChangePasswordResponse(rsp *http.Response) (*PostUsersMeChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersMeChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkerGetTaskResponse parses an HTTP response from a GetWorkerGetTaskWithResponse call
func ParseGetWorkerGetTaskResponse(rsp *http.Response) (*GetWorkerGetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkerGetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool       `json:"success"`
			Task    WorkerTask `json:"task"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all CVEs for a database type and version
	// (GET /cves/{databaseType}/{version})
	GetCvesDatabaseTypeVersion(w http.ResponseWriter, r *http.Request, databaseType string, version string)
	// Get project by ID
	// (GET /project/{projectid})
	GetProjectProjectid(w http.ResponseWriter, r *http.Request, projectid int64)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{projectid}/bruteforce-passwords)
	GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams)
	// Run all extractors and scanners for a project
	// (POST /project/{projectid}/run)
	PostProjectProjectidRun(w http.ResponseWriter, r *http.Request, projectid int64)
	// Get all postgres scans associated with a database
	// (GET /scanner/postgres/database/{postgresDatabaseId})
	GetScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64)
	// Update a postgres database by ID
	// (PATCH /scanner/postgres/database/{postgresDatabaseId})
	PatchScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64)
	// Create a new postgres scan associated with a database
	// (POST /scanner/postgres/database/{postgresDatabaseId})
	PostScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64)
	// Get a postgres scan by ID
	// (GET /scanner/postgres/scan/{scanid})
	GetScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64)
	// Update a postgres scan by ID
	// (PATCH /scanner/postgres/scan/{scanid})
	PatchScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64)
	// Create a new postgres scan result
	// (POST /scanner/postgres/scan/{scanid}/result)
	PostScannerPostgresScanScanidResult(w http.ResponseWriter, r *http.Request, scanid int64)
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all CVEs for a database type and version
// (GET /cves/{databaseType}/{version})
func (_ Unimplemented) GetCvesDatabaseTypeVersion(w http.ResponseWriter, r *http.Request, databaseType string, version string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get project by ID
// (GET /project/{projectid})
func (_ Unimplemented) GetProjectProjectid(w http.ResponseWriter, r *http.Request, projectid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all bruteforce passwords associated with a project
// (GET /project/{projectid}/bruteforce-passwords)
func (_ Unimplemented) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run all extractors and scanners for a project
// (POST /project/{projectid}/run)
func (_ Unimplemented) PostProjectProjectidRun(w http.ResponseWriter, r *http.Request, projectid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all postgres scans associated with a database
// (GET /scanner/postgres/database/{postgresDatabaseId})
func (_ Unimplemented) GetScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a postgres database by ID
// (PATCH /scanner/postgres/database/{postgresDatabaseId})
func (_ Unimplemented) PatchScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new postgres scan associated with a database
// (POST /scanner/postgres/database/{postgresDatabaseId})
func (_ Unimplemented) PostScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a postgres scan by ID
// (GET /scanner/postgres/scan/{scanid})
func (_ Unimplemented) GetScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a postgres scan by ID
// (PATCH /scanner/postgres/scan/{scanid})
func (_ Unimplemented) PatchScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new postgres scan result
// (POST /scanner/postgres/scan/{scanid}/result)
func (_ Unimplemented) PostScannerPostgresScanScanidResult(w http.ResponseWriter, r *http.Request, scanid int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current logged in user
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change password of current logged in user
// (POST /users/me/change-password)
func (_ Unimplemented) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task for the worker
// (GET /worker/get-task)
func (_ Unimplemented) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCvesDatabaseTypeVersion operation middleware
func (siw *ServerInterfaceWrapper) GetCvesDatabaseTypeVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "databaseType" -------------
	var databaseType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "databaseType", runtime.ParamLocationPath, chi.URLParam(r, "databaseType"), &databaseType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "databaseType", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCvesDatabaseTypeVersion(w, r, databaseType, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectid operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectid(w, r, projectid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectidBruteforcePasswords operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectProjectidBruteforcePasswordsParams

	// ------------- Optional query parameter "last_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_id", r.URL.Query(), &params.LastId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectidBruteforcePasswords(w, r, projectid, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectProjectidRun operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectidRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectid" -------------
	var projectid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectid", runtime.ParamLocationPath, chi.URLParam(r, "projectid"), &projectid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectProjectidRun(w, r, projectid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScannerPostgresDatabasePostgresDatabaseId operation middleware
func (siw *ServerInterfaceWrapper) GetScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postgresDatabaseId" -------------
	var postgresDatabaseId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, chi.URLParam(r, "postgresDatabaseId"), &postgresDatabaseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postgresDatabaseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScannerPostgresDatabasePostgresDatabaseId(w, r, postgresDatabaseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchScannerPostgresDatabasePostgresDatabaseId operation middleware
func (siw *ServerInterfaceWrapper) PatchScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postgresDatabaseId" -------------
	var postgresDatabaseId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, chi.URLParam(r, "postgresDatabaseId"), &postgresDatabaseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postgresDatabaseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchScannerPostgresDatabasePostgresDatabaseId(w, r, postgresDatabaseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScannerPostgresDatabasePostgresDatabaseId operation middleware
func (siw *ServerInterfaceWrapper) PostScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postgresDatabaseId" -------------
	var postgresDatabaseId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "postgresDatabaseId", runtime.ParamLocationPath, chi.URLParam(r, "postgresDatabaseId"), &postgresDatabaseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postgresDatabaseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScannerPostgresDatabasePostgresDatabaseId(w, r, postgresDatabaseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScannerPostgresScanScanid operation middleware
func (siw *ServerInterfaceWrapper) GetScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScannerPostgresScanScanid(w, r, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchScannerPostgresScanScanid operation middleware
func (siw *ServerInterfaceWrapper) PatchScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchScannerPostgresScanScanid(w, r, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScannerPostgresScanScanidResult operation middleware
func (siw *ServerInterfaceWrapper) PostScannerPostgresScanScanidResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "scanid" -------------
	var scanid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "scanid", runtime.ParamLocationPath, chi.URLParam(r, "scanid"), &scanid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scanid", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScannerPostgresScanScanidResult(w, r, scanid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersMeChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersMeChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkerGetTask operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkerGetTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cves/{databaseType}/{version}", wrapper.GetCvesDatabaseTypeVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{projectid}", wrapper.GetProjectProjectid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{projectid}/bruteforce-passwords", wrapper.GetProjectProjectidBruteforcePasswords)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{projectid}/run", wrapper.PostProjectProjectidRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scanner/postgres/database/{postgresDatabaseId}", wrapper.GetScannerPostgresDatabasePostgresDatabaseId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/scanner/postgres/database/{postgresDatabaseId}", wrapper.PatchScannerPostgresDatabasePostgresDatabaseId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scanner/postgres/database/{postgresDatabaseId}", wrapper.PostScannerPostgresDatabasePostgresDatabaseId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scanner/postgres/scan/{scanid}", wrapper.GetScannerPostgresScanScanid)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/scanner/postgres/scan/{scanid}", wrapper.PatchScannerPostgresScanScanid)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scanner/postgres/scan/{scanid}/result", wrapper.PostScannerPostgresScanScanidResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/me/change-password", wrapper.PostUsersMeChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/worker/get-task", wrapper.GetWorkerGetTask)
	})

	return r
}

type GetCvesDatabaseTypeVersionRequestObject struct {
	DatabaseType string `json:"databaseType"`
	Version      string `json:"version"`
}

type GetCvesDatabaseTypeVersionResponseObject interface {
	VisitGetCvesDatabaseTypeVersionResponse(w http.ResponseWriter) error
}

type GetCvesDatabaseTypeVersion200JSONResponse struct {
	Cves    []CVE `json:"cves"`
	Success bool  `json:"success"`
}

func (response GetCvesDatabaseTypeVersion200JSONResponse) VisitGetCvesDatabaseTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDatabaseTypeVersion401JSONResponse Error

func (response GetCvesDatabaseTypeVersion401JSONResponse) VisitGetCvesDatabaseTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDatabaseTypeVersion404JSONResponse Error

func (response GetCvesDatabaseTypeVersion404JSONResponse) VisitGetCvesDatabaseTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidRequestObject struct {
	Projectid int64 `json:"projectid"`
}

type GetProjectProjectidResponseObject interface {
	VisitGetProjectProjectidResponse(w http.ResponseWriter) error
}

type GetProjectProjectid200JSONResponse struct {
	PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
	Project           Project            `json:"project"`
	Success           bool               `json:"success"`
}

func (response GetProjectProjectid200JSONResponse) VisitGetProjectProjectidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectid401JSONResponse Error

func (response GetProjectProjectid401JSONResponse) VisitGetProjectProjectidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectid404JSONResponse Error

func (response GetProjectProjectid404JSONResponse) VisitGetProjectProjectidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidBruteforcePasswordsRequestObject struct {
	Projectid int64 `json:"projectid"`
	Params    GetProjectProjectidBruteforcePasswordsParams
}

type GetProjectProjectidBruteforcePasswordsResponseObject interface {
	VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error
}

type GetProjectProjectidBruteforcePasswords200JSONResponse PaginatedBruteforcePasswords

func (response GetProjectProjectidBruteforcePasswords200JSONResponse) VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectidBruteforcePasswords401JSONResponse Error

func (response GetProjectProjectidBruteforcePasswords401JSONResponse) VisitGetProjectProjectidBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidRunRequestObject struct {
	Projectid int64 `json:"projectid"`
}

type PostProjectProjectidRunResponseObject interface {
	VisitPostProjectProjectidRunResponse(w http.ResponseWriter) error
}

type PostProjectProjectidRun200JSONResponse struct {
	PostgresScans []PostgresScan `json:"postgres_scans"`
	Success       bool           `json:"success"`
}

func (response PostProjectProjectidRun200JSONResponse) VisitPostProjectProjectidRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidRun400JSONResponse Error

func (response PostProjectProjectidRun400JSONResponse) VisitPostProjectProjectidRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidRun401JSONResponse Error

func (response PostProjectProjectidRun401JSONResponse) VisitPostProjectProjectidRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectidRun404JSONResponse Error

func (response PostProjectProjectidRun404JSONResponse) VisitPostProjectProjectidRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScannerPostgresDatabasePostgresDatabaseIdRequestObject struct {
	PostgresDatabaseId int64 `json:"postgresDatabaseId"`
}

type GetScannerPostgresDatabasePostgresDatabaseIdResponseObject interface {
	VisitGetScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error
}

type GetScannerPostgresDatabasePostgresDatabaseId200JSONResponse struct {
	Database PostgresDatabase `json:"database"`

	// ScanCount The number of scans
	ScanCount int `json:"scan_count"`

	// Scans The list of scans
	Scans []PostgresScan `json:"scans"`

	// Success The success status
	Success bool `json:"success"`
}

func (response GetScannerPostgresDatabasePostgresDatabaseId200JSONResponse) VisitGetScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScannerPostgresDatabasePostgresDatabaseId401JSONResponse Error

func (response GetScannerPostgresDatabasePostgresDatabaseId401JSONResponse) VisitGetScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetScannerPostgresDatabasePostgresDatabaseId404JSONResponse Error

func (response GetScannerPostgresDatabasePostgresDatabaseId404JSONResponse) VisitGetScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresDatabasePostgresDatabaseIdRequestObject struct {
	PostgresDatabaseId int64 `json:"postgresDatabaseId"`
	Body               *PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody
}

type PatchScannerPostgresDatabasePostgresDatabaseIdResponseObject interface {
	VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error
}

type PatchScannerPostgresDatabasePostgresDatabaseId200JSONResponse struct {
	Database *PostgresDatabase `json:"database,omitempty"`
	Success  bool              `json:"success"`
}

func (response PatchScannerPostgresDatabasePostgresDatabaseId200JSONResponse) VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresDatabasePostgresDatabaseId400JSONResponse Error

func (response PatchScannerPostgresDatabasePostgresDatabaseId400JSONResponse) VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresDatabasePostgresDatabaseId401JSONResponse Error

func (response PatchScannerPostgresDatabasePostgresDatabaseId401JSONResponse) VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresDatabasePostgresDatabaseId404JSONResponse Error

func (response PatchScannerPostgresDatabasePostgresDatabaseId404JSONResponse) VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresDatabasePostgresDatabaseIdRequestObject struct {
	PostgresDatabaseId int64 `json:"postgresDatabaseId"`
}

type PostScannerPostgresDatabasePostgresDatabaseIdResponseObject interface {
	VisitPostScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error
}

type PostScannerPostgresDatabasePostgresDatabaseId200JSONResponse struct {
	Scan    *PostgresScan `json:"scan,omitempty"`
	Success bool          `json:"success"`
}

func (response PostScannerPostgresDatabasePostgresDatabaseId200JSONResponse) VisitPostScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresDatabasePostgresDatabaseId401JSONResponse Error

func (response PostScannerPostgresDatabasePostgresDatabaseId401JSONResponse) VisitPostScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresDatabasePostgresDatabaseId404JSONResponse Error

func (response PostScannerPostgresDatabasePostgresDatabaseId404JSONResponse) VisitPostScannerPostgresDatabasePostgresDatabaseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScannerPostgresScanScanidRequestObject struct {
	Scanid int64 `json:"scanid"`
}

type GetScannerPostgresScanScanidResponseObject interface {
	VisitGetScannerPostgresScanScanidResponse(w http.ResponseWriter) error
}

type GetScannerPostgresScanScanid200JSONResponse struct {
	Results []PostgresScanResult `json:"results"`
	Scan    PostgresScan         `json:"scan"`
	Success bool                 `json:"success"`
}

func (response GetScannerPostgresScanScanid200JSONResponse) VisitGetScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScannerPostgresScanScanid404JSONResponse Error

func (response GetScannerPostgresScanScanid404JSONResponse) VisitGetScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresScanScanidRequestObject struct {
	Scanid int64 `json:"scanid"`
	Body   *PatchScannerPostgresScanScanidJSONRequestBody
}

type PatchScannerPostgresScanScanidResponseObject interface {
	VisitPatchScannerPostgresScanScanidResponse(w http.ResponseWriter) error
}

type PatchScannerPostgresScanScanid200JSONResponse struct {
	Scan    *PostgresScan `json:"scan,omitempty"`
	Success bool          `json:"success"`
}

func (response PatchScannerPostgresScanScanid200JSONResponse) VisitPatchScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresScanScanid400JSONResponse Error

func (response PatchScannerPostgresScanScanid400JSONResponse) VisitPatchScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresScanScanid401JSONResponse Error

func (response PatchScannerPostgresScanScanid401JSONResponse) VisitPatchScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchScannerPostgresScanScanid404JSONResponse Error

func (response PatchScannerPostgresScanScanid404JSONResponse) VisitPatchScannerPostgresScanScanidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresScanScanidResultRequestObject struct {
	Scanid int64 `json:"scanid"`
	Body   *PostScannerPostgresScanScanidResultJSONRequestBody
}

type PostScannerPostgresScanScanidResultResponseObject interface {
	VisitPostScannerPostgresScanScanidResultResponse(w http.ResponseWriter) error
}

type PostScannerPostgresScanScanidResult200JSONResponse struct {
	Scan    *PostgresScanResult `json:"scan,omitempty"`
	Success bool                `json:"success"`
}

func (response PostScannerPostgresScanScanidResult200JSONResponse) VisitPostScannerPostgresScanScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresScanScanidResult400JSONResponse Error

func (response PostScannerPostgresScanScanidResult400JSONResponse) VisitPostScannerPostgresScanScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresScanScanidResult401JSONResponse Error

func (response PostScannerPostgresScanScanidResult401JSONResponse) VisitPostScannerPostgresScanScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScannerPostgresScanScanidResult404JSONResponse Error

func (response PostScannerPostgresScanScanidResult404JSONResponse) VisitPostScannerPostgresScanScanidResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse PaginatedUsers

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse Error

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePasswordRequestObject struct {
	Body *PostUsersMeChangePasswordJSONRequestBody
}

type PostUsersMeChangePasswordResponseObject interface {
	VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error
}

type PostUsersMeChangePassword200JSONResponse Success

func (response PostUsersMeChangePassword200JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword400JSONResponse Error

func (response PostUsersMeChangePassword400JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword401JSONResponse Error

func (response PostUsersMeChangePassword401JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse User

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId401JSONResponse Error

func (response GetUsersId401JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId404JSONResponse Error

func (response GetUsersId404JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTaskRequestObject struct {
}

type GetWorkerGetTaskResponseObject interface {
	VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error
}

type GetWorkerGetTask200JSONResponse struct {
	Success bool       `json:"success"`
	Task    WorkerTask `json:"task"`
}

func (response GetWorkerGetTask200JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask202JSONResponse Error

func (response GetWorkerGetTask202JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask401JSONResponse Error

func (response GetWorkerGetTask401JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all CVEs for a database type and version
	// (GET /cves/{databaseType}/{version})
	GetCvesDatabaseTypeVersion(ctx context.Context, request GetCvesDatabaseTypeVersionRequestObject) (GetCvesDatabaseTypeVersionResponseObject, error)
	// Get project by ID
	// (GET /project/{projectid})
	GetProjectProjectid(ctx context.Context, request GetProjectProjectidRequestObject) (GetProjectProjectidResponseObject, error)
	// Get all bruteforce passwords associated with a project
	// (GET /project/{projectid}/bruteforce-passwords)
	GetProjectProjectidBruteforcePasswords(ctx context.Context, request GetProjectProjectidBruteforcePasswordsRequestObject) (GetProjectProjectidBruteforcePasswordsResponseObject, error)
	// Run all extractors and scanners for a project
	// (POST /project/{projectid}/run)
	PostProjectProjectidRun(ctx context.Context, request PostProjectProjectidRunRequestObject) (PostProjectProjectidRunResponseObject, error)
	// Get all postgres scans associated with a database
	// (GET /scanner/postgres/database/{postgresDatabaseId})
	GetScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, request GetScannerPostgresDatabasePostgresDatabaseIdRequestObject) (GetScannerPostgresDatabasePostgresDatabaseIdResponseObject, error)
	// Update a postgres database by ID
	// (PATCH /scanner/postgres/database/{postgresDatabaseId})
	PatchScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, request PatchScannerPostgresDatabasePostgresDatabaseIdRequestObject) (PatchScannerPostgresDatabasePostgresDatabaseIdResponseObject, error)
	// Create a new postgres scan associated with a database
	// (POST /scanner/postgres/database/{postgresDatabaseId})
	PostScannerPostgresDatabasePostgresDatabaseId(ctx context.Context, request PostScannerPostgresDatabasePostgresDatabaseIdRequestObject) (PostScannerPostgresDatabasePostgresDatabaseIdResponseObject, error)
	// Get a postgres scan by ID
	// (GET /scanner/postgres/scan/{scanid})
	GetScannerPostgresScanScanid(ctx context.Context, request GetScannerPostgresScanScanidRequestObject) (GetScannerPostgresScanScanidResponseObject, error)
	// Update a postgres scan by ID
	// (PATCH /scanner/postgres/scan/{scanid})
	PatchScannerPostgresScanScanid(ctx context.Context, request PatchScannerPostgresScanScanidRequestObject) (PatchScannerPostgresScanScanidResponseObject, error)
	// Create a new postgres scan result
	// (POST /scanner/postgres/scan/{scanid}/result)
	PostScannerPostgresScanScanidResult(ctx context.Context, request PostScannerPostgresScanScanidResultRequestObject) (PostScannerPostgresScanScanidResultResponseObject, error)
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(ctx context.Context, request PostUsersMeChangePasswordRequestObject) (PostUsersMeChangePasswordResponseObject, error)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(ctx context.Context, request GetWorkerGetTaskRequestObject) (GetWorkerGetTaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetCvesDatabaseTypeVersion operation middleware
func (sh *strictHandler) GetCvesDatabaseTypeVersion(w http.ResponseWriter, r *http.Request, databaseType string, version string) {
	var request GetCvesDatabaseTypeVersionRequestObject

	request.DatabaseType = databaseType
	request.Version = version

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCvesDatabaseTypeVersion(ctx, request.(GetCvesDatabaseTypeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCvesDatabaseTypeVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCvesDatabaseTypeVersionResponseObject); ok {
		if err := validResponse.VisitGetCvesDatabaseTypeVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectid operation middleware
func (sh *strictHandler) GetProjectProjectid(w http.ResponseWriter, r *http.Request, projectid int64) {
	var request GetProjectProjectidRequestObject

	request.Projectid = projectid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectid(ctx, request.(GetProjectProjectidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectidResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectidBruteforcePasswords operation middleware
func (sh *strictHandler) GetProjectProjectidBruteforcePasswords(w http.ResponseWriter, r *http.Request, projectid int64, params GetProjectProjectidBruteforcePasswordsParams) {
	var request GetProjectProjectidBruteforcePasswordsRequestObject

	request.Projectid = projectid
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectidBruteforcePasswords(ctx, request.(GetProjectProjectidBruteforcePasswordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectidBruteforcePasswords")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectidBruteforcePasswordsResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectidBruteforcePasswordsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectProjectidRun operation middleware
func (sh *strictHandler) PostProjectProjectidRun(w http.ResponseWriter, r *http.Request, projectid int64) {
	var request PostProjectProjectidRunRequestObject

	request.Projectid = projectid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectidRun(ctx, request.(PostProjectProjectidRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectidRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectProjectidRunResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectidRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScannerPostgresDatabasePostgresDatabaseId operation middleware
func (sh *strictHandler) GetScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	var request GetScannerPostgresDatabasePostgresDatabaseIdRequestObject

	request.PostgresDatabaseId = postgresDatabaseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetScannerPostgresDatabasePostgresDatabaseId(ctx, request.(GetScannerPostgresDatabasePostgresDatabaseIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScannerPostgresDatabasePostgresDatabaseId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetScannerPostgresDatabasePostgresDatabaseIdResponseObject); ok {
		if err := validResponse.VisitGetScannerPostgresDatabasePostgresDatabaseIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchScannerPostgresDatabasePostgresDatabaseId operation middleware
func (sh *strictHandler) PatchScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	var request PatchScannerPostgresDatabasePostgresDatabaseIdRequestObject

	request.PostgresDatabaseId = postgresDatabaseId

	var body PatchScannerPostgresDatabasePostgresDatabaseIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchScannerPostgresDatabasePostgresDatabaseId(ctx, request.(PatchScannerPostgresDatabasePostgresDatabaseIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchScannerPostgresDatabasePostgresDatabaseId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchScannerPostgresDatabasePostgresDatabaseIdResponseObject); ok {
		if err := validResponse.VisitPatchScannerPostgresDatabasePostgresDatabaseIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScannerPostgresDatabasePostgresDatabaseId operation middleware
func (sh *strictHandler) PostScannerPostgresDatabasePostgresDatabaseId(w http.ResponseWriter, r *http.Request, postgresDatabaseId int64) {
	var request PostScannerPostgresDatabasePostgresDatabaseIdRequestObject

	request.PostgresDatabaseId = postgresDatabaseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScannerPostgresDatabasePostgresDatabaseId(ctx, request.(PostScannerPostgresDatabasePostgresDatabaseIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScannerPostgresDatabasePostgresDatabaseId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScannerPostgresDatabasePostgresDatabaseIdResponseObject); ok {
		if err := validResponse.VisitPostScannerPostgresDatabasePostgresDatabaseIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScannerPostgresScanScanid operation middleware
func (sh *strictHandler) GetScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64) {
	var request GetScannerPostgresScanScanidRequestObject

	request.Scanid = scanid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetScannerPostgresScanScanid(ctx, request.(GetScannerPostgresScanScanidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScannerPostgresScanScanid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetScannerPostgresScanScanidResponseObject); ok {
		if err := validResponse.VisitGetScannerPostgresScanScanidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchScannerPostgresScanScanid operation middleware
func (sh *strictHandler) PatchScannerPostgresScanScanid(w http.ResponseWriter, r *http.Request, scanid int64) {
	var request PatchScannerPostgresScanScanidRequestObject

	request.Scanid = scanid

	var body PatchScannerPostgresScanScanidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchScannerPostgresScanScanid(ctx, request.(PatchScannerPostgresScanScanidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchScannerPostgresScanScanid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchScannerPostgresScanScanidResponseObject); ok {
		if err := validResponse.VisitPatchScannerPostgresScanScanidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScannerPostgresScanScanidResult operation middleware
func (sh *strictHandler) PostScannerPostgresScanScanidResult(w http.ResponseWriter, r *http.Request, scanid int64) {
	var request PostScannerPostgresScanScanidResultRequestObject

	request.Scanid = scanid

	var body PostScannerPostgresScanScanidResultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScannerPostgresScanScanidResult(ctx, request.(PostScannerPostgresScanScanidResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScannerPostgresScanScanidResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScannerPostgresScanScanidResultResponseObject); ok {
		if err := validResponse.VisitPostScannerPostgresScanScanidResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersMeChangePassword operation middleware
func (sh *strictHandler) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	var request PostUsersMeChangePasswordRequestObject

	var body PostUsersMeChangePasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersMeChangePassword(ctx, request.(PostUsersMeChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersMeChangePassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersMeChangePasswordResponseObject); ok {
		if err := validResponse.VisitPostUsersMeChangePasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkerGetTask operation middleware
func (sh *strictHandler) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	var request GetWorkerGetTaskRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkerGetTask(ctx, request.(GetWorkerGetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkerGetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkerGetTaskResponseObject); ok {
		if err := validResponse.VisitGetWorkerGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xce2/jNhL/KoTu/pQjJbtd3Bko0DTJ9XK33QZxNj3cIghoaWyzkUiVpOy4gb/7gaTe",
	"omTZeWx6G6DoJqI4HM7zN0MqD07A4oRRoFI44wdHBAuIsf7xR55KmDEewAUWYsV4qJ4mnCXAJQH9DtHP",
	"QhABJ4kkjDpj52oBiFAJnOIInZ8iNkNyAWhakENJTs914B7HSQTO+NB1ZozHWDpjh1D54b3jOnKdgPkV",
	"5sCdjeskFU7aq9roOvG68jijKCQndO5sNq7D4feUcAid8Re1m8oSNxvXObk+a286WMJt18ZPrs/Q+WmN",
	"gZPrs9GRf/j3ke/7h20e3DqVLqLVp1Xqx2iZRhQ4npKIyDUiVEt7BdPRFAsIUYwpnkMMVBqtzHAASicn",
	"RAQMTWIcRejHVBAKQqDL63dHPsI01D99h05THKGfyBxPiUS/Hn9C1xef0CVLJXCBApZGIcJRxFYIU5RS",
	"nMoFUEkCLCF0EYeYSUBYShzcAUeSIQ6SE1gCEkAFkWSpTMXonTB6gNRuG/sRKExBzSWxUQPCQaB4DRiV",
	"nEUCzRhHny8/igN0TMvVDHdwn0SMSCQXRDQoT9eKBIVAEjpXC2CK8GwGgYQQhbAkAaAlweifV1cXiHH9",
	"70TLRtkMCD1NJBCQGQlyBpBINXezNCrWrspJ6aYqkJCtaMRwqAe4FqziakbmKdcyUSuHIDGJFFcEzykT",
	"kgQ1sdmMagfPVEa+sydGWMjbmIVkRqBjqRBLyBdAKyyQmoOKOVUrNv5xODp6d3X4Yez7Y9//r21XSTqN",
	"iFhAeKvYG7RoMWWPBW3xIfP+uts2OGuKR4eSBabzIpR+ZPM5hOe0HV0orG77wxyFVVeoo7DqjHaucz9i",
	"OCGjgIUwBzqCe8nxSOK5XneJI6KEp+gQ+v3fXBwlC0zTWIuBReEWrlgU7hyAH8FSQzU1/ty6ELX0OWAJ",
	"F0zIOQcxCTC9BJFGsi3/GITAc1A/tsxPwBI4kevKYOESDYaKV92C4k2xfTb9DQKpKJ5xzngvE3VJ6/dR",
	"PmzxkCz+2HWUDSIhsUxFVUszHAkoyE0ZiwDT1qbKdfNllGw/sjmhnwVY9jEsX+sIHikqKn0FEWCOJNzL",
	"5zKjhBMqsQgI0TuUTCZ2Bq9+ubpAimgtPh69e//dh/15YDGRECdy7dI0Bk4CNwL6/QfNSipUcI7Bzo4a",
	"RWq4FFhNRL+xBb0NGTxCQKVoXCWrd26M778/8tsOV3DaQEwXeE6oyv9t+KjXwlH0y8wZf3lw/sph5oyd",
	"v3glAvUy+OkVVDIv3bhNy+J6wIBQCbH+oY+iBc1uCjFhzvHa2ELdQWs76ooYAUupflxNoe2MSZVF26KK",
	"ZSst1vZ2bMnT7X6d03azvZQ82WJWIRDl819VqTroDFajDBZ5AjjFEit43FZmmI3c5m7YUteCCbseq8Gu",
	"Pci4tKUNJWoFkytjhZbq8aBFcglcZDVDG7dYtFbZv0qA7b0DDQtk1VoN8kzVTjnG6AbkxMI6NS23XNBq",
	"Zlt1Feik3snxI1RJQruu9lRxwpna1W0X2ecxgXZpW7KR7T1juikr1xre3arAC6ZLJvqUaDe4LQrc0x67",
	"pBzjexKn8W0fitvBmrUUC5OuiaZgvDT11uLbpNWZbfpl1rn5p4G1ZtNtbFsTgHVrxva27aenoMusVxd1",
	"2aS9asgdKuNsyd2r424Mp+FbN3nn5zW6KB63eGd8jin5Q5f9tztspDpv193YLCALDU126lawcZ1LmBMh",
	"gdurA4gxiex70EM59yoY1YSkHvyQ/XoQsPgRgNfwsBncW3zpWqVWhX/18iDnZo/iwM1ErcxiUmLZukW8",
	"BMi1RSdV6P2DcCEnEpI2W6pCvBUQcJA9hWL2Qq07Ozkt/tvaXqqu0sWkrrU7GNSF6mPrWCtTemoXSxMI",
	"GA17BPckfA230WZVvdOGPidhpU90XcKr+r4G464+bPQkQbGVImbKjD91Bgk9XMtCrej6L7aguyROHXfq",
	"hx7De8jdnOpucS+jp8zaAksWjHbQ1EOIpvEU+DZBPlOwtebTSsAso+SvjN8Bv8LiztJYyyz0VliBdTEc",
	"Voqn3tq8WWwpWJiRHjJP43tr3WkeWL0fizukhxViTmMljfq+brZGJzV6s9EYNkgVJp0oxrJkAkL53nEq",
	"F7qjoNYNGLsjkCOYcf5OqSWckH+DbristPhrsxeAQ20s2ez/jIyORlfsDixEFGOEzpjpElGJDQDOXFy9",
	"JgHHP4gVns+BHxBWkp6YZ+j44hxdAVYQJ+Vq0kLKRIw9rzKpeYboHCOh7VDNdlwnIgFQYwMZ9eMEBwtA",
	"Rwd+i+5qtTrAeviA8bmXzRXex/OTs0+Ts9HRgX+wkHGkdQs8Fr/MJsCXJAArc55+x1OyITKq7uwKdAFa",
	"hFLn8MA/8DXKTYDihDhj551+pFCEXGidesEShPeQm/XVOoGN95DR2Kg35iZHK2/QuPQ8dMbOTyBPlqV1",
	"q2l5bFfEOY5B6l7Wl44SRE/LjVXbgmKpVFeVIadqowaaGHexpoveBZcFk5Y1y8Hhy93o1l7ClErV+JHv",
	"58YJpomJkyQigRad95swOa6k1zoJH96sO7k+c/r7msO7lGrddkrdtBxhUp7GFgahFn3vH+607b59mSMc",
	"y+Kf9YE44+QPCM2i759/0dOqrSLGcxNClEk0YykNnWq41BZfjXRfbpSNiDSOMV8bz0E4itDJ9Zk5acd1",
	"d9AH4qUlGjz2RWnIxGUvK3K9h+wHEva6aVb8XuQvD/FPW8Fu8ZekQrPbY7bXw0/rQ61UPdyjbEm76V5J",
	"2XfpJZW9tqdDlnK3bOfNUW2LZhLv88sagLE5Zt4Sm64N/s69L1dHpwd65W2sUVI9nhvqlrbTvdfnqW5n",
	"XVEyojwtu5qU8iLT/p4CX5cM6escpvdZLB/CDOsO7ahR7bw7clwnJpTECtOODp8hhAw6ZrPp6HW73j6J",
	"yXKvUCAsBAuIEgJaEblAuGJvuZMY4j0+wlOaB+i2T6jY23SKy5R+O+lKFWi7pypTJz4NCmyw8rg04z+/",
	"rZ9T3aVCUxau33JbX267TKn2bd3jCyTjQsNMpWcKPMehbZfOXsh8OvvNy+3EyyGJ95A0kNN5PyidGEpN",
	"vHXRorKj+2fzC0TdEQhsy7yeiPDYFtNtcX/GclpWdOqMj9u6iEUgsqR6ImR18lOHqgFnFIOjWc5jRSTl",
	"sfwbht4DPWyFzyrEFD6o5W8BDhXfbIaZMgXpfm2CZbCwIAX1+P8xguhL8D+qZPZ00NV2R8ui+FqTLPOI",
	"5o42ryfK7QFuJBZ3b5DmFfbV9sU05mRRwZamz7bK96IycXuKjzdM0uOtux9dfTUvfXOYDocxn2wgbL53",
	"qabpR2Rpa12gHngP6v9kpzpA/TrRs3bzMW2dVrcSObXX40q73sm23GG0gegXctBM1N3X2Xdx1RfwGrXX",
	"R7WEccNVmrnl8dj1NVv9M0PS7JaDFY5qab8IFP0TJbc3CPqCsaGvW95Gn9boUOuJ9+dJj5cX1IeC1DJ0",
	"ZJnhGwggnV+e9sURI9vXGU7KpP4WVL7toNKD0Hnu39bIkuYfDnYBbfNl4YDoUDaINTjdfpBLYiLtx7iH",
	"vu0Y13y2o0b9yqHu4dDDZjabCZDD+TPv2xn0+46Z/aEc5VdNFSszEkmNBW2sVO6k7nh9zdxT3kbf3IJ8",
	"zstqg07Jjam9/nPxVuc6zXwk9zB9j7niX565utzrYj+by4pPl0u6M4K55Dzsi97O7GH2OCB7iFesvCDl",
	"HKhEkf4bIIjQ4gp6tya9QP/5kFH1I6Vu2JXptv4nR5xnwjf2v2vSgW70tXnJii+oJDt4cnjTx23+5dFO",
	"JvNtAI6anRqtll+9sdkeZvuwpZ2mzXTXBnVuQfmfkrJXBF+9iTYgyL01ifUnUE30WYuVWtvNKrViaAZW",
	"enOQI5l9KNNlbeZTjZ9A6i9qXi7t5Xz1Cajyqc8zlk5H/tHzq/QTQ4pRhJeYRHgawZ/lLqFhe8a4+QN6",
	"pl6xFTDberKudTHgyzy8lR/cjD0vYgGOFkzI8Xe+73s4Id7y0NncbP4XAAD//wiyYNqbUQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
