// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
	WorkerAuthScopes  = "workerAuth.Scopes"
)

// AddUserToOrganization defines model for AddUserToOrganization.
type AddUserToOrganization struct {
	Email string `json:"email"`
}

// BruteforcePassword defines model for BruteforcePassword.
type BruteforcePassword struct {
	// Id The internal ID of the bruteforce password
	Id int64 `json:"id"`

	// Password The password
	Password string `json:"password"`
}

// BruteforceScanResult defines model for BruteforceScanResult.
type BruteforceScanResult struct {
	Id       int    `json:"id"`
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
	Username string `json:"username"`
}

// BruteforcedPassword defines model for BruteforcedPassword.
type BruteforcedPassword struct {
	Hash             string `json:"hash"`
	Id               int    `json:"id"`
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
	ProjectId        int    `json:"project_id"`
	Username         string `json:"username"`
}

// CVE defines model for CVE.
type CVE struct {
	// CveId The CVE ID
	CveId string `json:"cve_id"`

	// Description The CVE description
	Description string `json:"description"`

	// Id The internal ID of the CVE
	Id int64 `json:"id"`

	// LastModified The date the CVE was last modified
	LastModified string `json:"last_modified"`

	// PublishedAt The date the CVE was published
	PublishedAt string `json:"published_at"`
}

// ChangePasswordLoggedIn defines model for ChangePasswordLoggedIn.
type ChangePasswordLoggedIn struct {
	// NewPassword The new password
	NewPassword string `json:"new_password" validate:"min=8,alphanum"`

	// OldPassword The old password
	OldPassword string `json:"old_password" validate:"min=8,alphanum"`
}

// CreateBruteforceScanResult defines model for CreateBruteforceScanResult.
type CreateBruteforceScanResult struct {
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
	Username string `json:"username"`
}

// CreateBruteforcedPassword defines model for CreateBruteforcedPassword.
type CreateBruteforcedPassword struct {
	Hash             string `json:"hash"`
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
	Username         string `json:"username"`
}

// CreateOrganization defines model for CreateOrganization.
type CreateOrganization struct {
	// Name The name of the organization
	Name string `json:"name" validate:"min=4,alphanum,max=32,lowercase"`
}

// CreateProject defines model for CreateProject.
type CreateProject struct {
	Name           string `json:"name"`
	OrganizationId int    `json:"organization_id"`
}

// CreateScanResult defines model for CreateScanResult.
type CreateScanResult struct {
	Message  string `json:"message"`
	Severity int    `json:"severity"`
}

// EditUserRoleInOrganization defines model for EditUserRoleInOrganization.
type EditUserRoleInOrganization struct {
	Id   int    `json:"id"`
	Role string `json:"role"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Success The success status
	Success bool `json:"success"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,printascii"`

	// Totp The TOTP code
	Totp *string `json:"totp,omitempty" validate:"omitempty,numeric,len=6"`

	// Username The user name for login
	Username string `json:"username" validate:"printascii,min=3,max=20"`
}

// MysqlDatabase defines model for MysqlDatabase.
type MysqlDatabase struct {
	CreatedAt    string `json:"created_at"`
	DatabaseName string `json:"database_name"`
	Host         string `json:"host"`
	Id           int    `json:"id"`
	Password     string `json:"password"`
	Port         int    `json:"port"`
	ProjectId    int    `json:"project_id"`
	Username     string `json:"username"`
	Version      string `json:"version"`
}

// MysqlScan defines model for MysqlScan.
type MysqlScan struct {
	DatabaseId int `json:"database_id"`
	Id         int `json:"id"`
}

// Organization defines model for Organization.
type Organization struct {
	// CreatedAt The date the organization was created
	CreatedAt string `json:"created_at"`

	// Id The internal ID of the organization
	Id      int64              `json:"id"`
	Members []OrganizationUser `json:"members"`

	// Name The name of the organization
	Name     string            `json:"name"`
	Projects []Project         `json:"projects"`
	Stats    OrganizationStats `json:"stats"`
}

// OrganizationStats defines model for OrganizationStats.
type OrganizationStats struct {
	FailedScans int `json:"failed_scans"`
	Projects    int `json:"projects"`
	Scans       int `json:"scans"`
	Users       int `json:"users"`
}

// OrganizationUser defines model for OrganizationUser.
type OrganizationUser struct {
	// Email The email of the user
	Email string `json:"email"`

	// Id The user ID
	Id int64 `json:"id"`

	// Role The role of the user
	Role string `json:"role"`

	// Username The user name for login
	Username string `json:"username"`
}

// PaginatedBruteforcePasswords defines model for PaginatedBruteforcePasswords.
type PaginatedBruteforcePasswords struct {
	Count   int                  `json:"count"`
	Next    *string              `json:"next,omitempty"`
	Results []BruteforcePassword `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Count   int           `json:"count"`
	Next    *string       `json:"next,omitempty"`
	Results []interface{} `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PaginatedUsers defines model for PaginatedUsers.
type PaginatedUsers struct {
	Count   int     `json:"count"`
	Next    *string `json:"next,omitempty"`
	Results []User  `json:"results"`

	// Success The success status
	Success bool `json:"success"`
}

// PatchBruteforceScanResult defines model for PatchBruteforceScanResult.
type PatchBruteforceScanResult struct {
	Password string `json:"password"`
	Total    int    `json:"total"`
	Tried    int    `json:"tried"`
}

// PatchMysqlDatabase defines model for PatchMysqlDatabase.
type PatchMysqlDatabase struct {
	DatabaseName *string `json:"database_name,omitempty"`
	Host         *string `json:"host,omitempty"`
	Password     *string `json:"password,omitempty"`
	Port         *int    `json:"port,omitempty"`
	Username     *string `json:"username,omitempty"`
	Version      *string `json:"version,omitempty"`
}

// PatchPostgresDatabase defines model for PatchPostgresDatabase.
type PatchPostgresDatabase struct {
	DatabaseName *string `json:"database_name,omitempty"`
	Host         *string `json:"host,omitempty"`
	Password     *string `json:"password,omitempty"`
	Port         *int    `json:"port,omitempty"`
	Username     *string `json:"username,omitempty"`
	Version      *string `json:"version,omitempty"`
}

// PatchScan defines model for PatchScan.
type PatchScan struct {
	EndedAt string `json:"ended_at"`
	Error   string `json:"error"`
	Status  int    `json:"status"`
}

// PostgresDatabase defines model for PostgresDatabase.
type PostgresDatabase struct {
	CreatedAt    string `json:"created_at"`
	DatabaseName string `json:"database_name"`
	Host         string `json:"host"`
	Id           int    `json:"id"`
	Password     string `json:"password"`
	Port         int    `json:"port"`
	ProjectId    int    `json:"project_id"`
	Username     string `json:"username"`
	Version      string `json:"version"`
}

// PostgresScan defines model for PostgresScan.
type PostgresScan struct {
	DatabaseId int `json:"database_id"`
	Id         int `json:"id"`
}

// Project defines model for Project.
type Project struct {
	// CreatedAt The date the project was created
	CreatedAt string `json:"created_at"`

	// Id The internal ID of the project
	Id int64 `json:"id"`

	// Name The name of the project
	Name string `json:"name"`

	// OrganizationId The internal ID of the organization
	OrganizationId int64 `json:"organization_id"`

	// Remote Whether to use the workers associated with the project instead of the default ones
	Remote bool `json:"remote"`
}

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	// Email The email of the user
	Email string `json:"email" validate:"email"`

	// Password The password for login in clear text
	Password string `json:"password" validate:"min=8,alphanum"`

	// Username The user name for login
	Username string `json:"username" validate:"alphanum,min=3,max=20"`
}

// RemoveUserFromOrganization defines model for RemoveUserFromOrganization.
type RemoveUserFromOrganization struct {
	Id int `json:"id"`
}

// Scan defines model for Scan.
type Scan struct {
	CreatedAt       string `json:"created_at"`
	EndedAt         string `json:"ended_at"`
	Error           string `json:"error"`
	Id              int    `json:"id"`
	MaximumSeverity int    `json:"maximum_severity"`
	ScanGroupId     int    `json:"scan_group_id"`
	Status          int    `json:"status"`
}

// ScanGroup defines model for ScanGroup.
type ScanGroup struct {
	CreatedBy *User  `json:"created_by,omitempty"`
	Id        int    `json:"id"`
	ProjectId int    `json:"project_id"`
	Scans     []Scan `json:"scans"`
}

// ScanResult defines model for ScanResult.
type ScanResult struct {
	CreatedAt  string `json:"created_at"`
	Id         int    `json:"id"`
	Message    string `json:"message"`
	ScanSource int    `json:"scan_source"`
	Severity   int    `json:"severity"`
}

// Success defines model for Success.
type Success struct {
	// Success The success status
	Success bool `json:"success"`
}

// TOTPFirstStep defines model for TOTPFirstStep.
type TOTPFirstStep struct {
	// TotpSecret The TOTP secret
	TotpSecret string `json:"totp_secret"`
}

// TOTPLogin defines model for TOTPLogin.
type TOTPLogin struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code"`
}

// TOTPSecondStep defines model for TOTPSecondStep.
type TOTPSecondStep struct {
	// TotpCode The TOTP code
	TotpCode string `json:"totp_code" validate:"numeric,len=6"`
}

// UpdateBruteforcedPassword defines model for UpdateBruteforcedPassword.
type UpdateBruteforcedPassword struct {
	LastBruteforceId int    `json:"last_bruteforce_id"`
	Password         string `json:"password"`
}

// UpdatePostgresVersion defines model for UpdatePostgresVersion.
type UpdatePostgresVersion struct {
	Version string `json:"version"`
}

// User defines model for User.
type User struct {
	// Email The email of the user
	Email string `json:"email"`

	// Id The user ID
	Id int64 `json:"id"`

	// Phone The phone number of the user
	Phone *string `json:"phone,omitempty"`

	// Username The user name for login
	Username string `json:"username"`
}

// GetMysqlScansParams defines parameters for GetMysqlScans.
type GetMysqlScansParams struct {
	// Scan The scan ID to filter for
	Scan int64 `form:"scan" json:"scan"`
}

// GetOrganizationsParams defines parameters for GetOrganizations.
type GetOrganizationsParams struct {
	// Name The organization name to filter for
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetPostgresScansParams defines parameters for GetPostgresScans.
type GetPostgresScansParams struct {
	// Scan The scan ID to filter for
	Scan int64 `form:"scan" json:"scan"`
}

// GetProjectsIdBruteforcePasswordsParams defines parameters for GetProjectsIdBruteforcePasswords.
type GetProjectsIdBruteforcePasswordsParams struct {
	// LastPasswordId The last ID of the item to return
	LastPasswordId *int32 `form:"last_password_id,omitempty" json:"last_password_id,omitempty"`

	// Password The password to filter
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// GetProjectsIdBruteforcedPasswordParams defines parameters for GetProjectsIdBruteforcedPassword.
type GetProjectsIdBruteforcedPasswordParams struct {
	// Hash The hash to filter
	Hash string `form:"hash" json:"hash"`

	// Username The username to filter
	Username string `form:"username" json:"username"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit The number of items to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of items to return
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Username The username to filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Email The email to filter
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PatchBruteforcedPasswordsIdJSONRequestBody defines body for PatchBruteforcedPasswordsId for application/json ContentType.
type PatchBruteforcedPasswordsIdJSONRequestBody = UpdateBruteforcedPassword

// PatchBruteforceresultsIdJSONRequestBody defines body for PatchBruteforceresultsId for application/json ContentType.
type PatchBruteforceresultsIdJSONRequestBody = PatchBruteforceScanResult

// PatchMysqlIdJSONRequestBody defines body for PatchMysqlId for application/json ContentType.
type PatchMysqlIdJSONRequestBody = PatchMysqlDatabase

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody = CreateOrganization

// PostOrganizationsIdAddUserJSONRequestBody defines body for PostOrganizationsIdAddUser for application/json ContentType.
type PostOrganizationsIdAddUserJSONRequestBody = AddUserToOrganization

// DeleteOrganizationsIdDeleteUserJSONRequestBody defines body for DeleteOrganizationsIdDeleteUser for application/json ContentType.
type DeleteOrganizationsIdDeleteUserJSONRequestBody = RemoveUserFromOrganization

// PostOrganizationsIdEditUserJSONRequestBody defines body for PostOrganizationsIdEditUser for application/json ContentType.
type PostOrganizationsIdEditUserJSONRequestBody = EditUserRoleInOrganization

// PatchPostgresIdJSONRequestBody defines body for PatchPostgresId for application/json ContentType.
type PatchPostgresIdJSONRequestBody = PatchPostgresDatabase

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = CreateProject

// PostProjectsIdBruteforcedPasswordJSONRequestBody defines body for PostProjectsIdBruteforcedPassword for application/json ContentType.
type PostProjectsIdBruteforcedPasswordJSONRequestBody = CreateBruteforcedPassword

// PatchScanIdJSONRequestBody defines body for PatchScanId for application/json ContentType.
type PatchScanIdJSONRequestBody = PatchScan

// PostScanIdBruteforceresultsJSONRequestBody defines body for PostScanIdBruteforceresults for application/json ContentType.
type PostScanIdBruteforceresultsJSONRequestBody = CreateBruteforceScanResult

// PostScanIdResultJSONRequestBody defines body for PostScanIdResult for application/json ContentType.
type PostScanIdResultJSONRequestBody = CreateScanResult

// PostUsersMeChangePasswordJSONRequestBody defines body for PostUsersMeChangePassword for application/json ContentType.
type PostUsersMeChangePasswordJSONRequestBody = ChangePasswordLoggedIn

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PatchBruteforcedPasswordsIdWithBody request with any body
	PatchBruteforcedPasswordsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBruteforcedPasswordsId(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBruteforceresultsIdWithBody request with any body
	PatchBruteforceresultsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBruteforceresultsId(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCvesDbTypeVersion request
	GetCvesDbTypeVersion(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMysqlScans request
	GetMysqlScans(ctx context.Context, params *GetMysqlScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMysqlId request
	GetMysqlId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMysqlIdWithBody request with any body
	PatchMysqlIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMysqlId(ctx context.Context, id int64, body PatchMysqlIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsWithBody request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsId request
	DeleteOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsId request
	GetOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdAddUserWithBody request with any body
	PostOrganizationsIdAddUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdAddUser(ctx context.Context, id int64, body PostOrganizationsIdAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsIdDeleteUserWithBody request with any body
	DeleteOrganizationsIdDeleteUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOrganizationsIdDeleteUser(ctx context.Context, id int64, body DeleteOrganizationsIdDeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsIdEditUserWithBody request with any body
	PostOrganizationsIdEditUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsIdEditUser(ctx context.Context, id int64, body PostOrganizationsIdEditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostgresScans request
	GetPostgresScans(ctx context.Context, params *GetPostgresScansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostgresId request
	GetPostgresId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPostgresIdWithBody request with any body
	PatchPostgresIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPostgresId(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsWithBody request with any body
	PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjects(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsId request
	DeleteProjectsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsId request
	GetProjectsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIdBruteforcePasswords request
	GetProjectsIdBruteforcePasswords(ctx context.Context, id int64, params *GetProjectsIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsIdBruteforcedPassword request
	GetProjectsIdBruteforcedPassword(ctx context.Context, id int64, params *GetProjectsIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsIdBruteforcedPasswordWithBody request with any body
	PostProjectsIdBruteforcedPasswordWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsIdBruteforcedPassword(ctx context.Context, id int64, body PostProjectsIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsIdRun request
	PostProjectsIdRun(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanId request
	GetScanId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScanIdWithBody request with any body
	PatchScanIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScanId(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanIdBruteforceresultsWithBody request with any body
	PostScanIdBruteforceresultsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanIdBruteforceresults(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScanIdResultWithBody request with any body
	PostScanIdResultWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScanIdResult(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersMeChangePasswordWithBody request with any body
	PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkerGetTask request
	GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PatchBruteforcedPasswordsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforcedPasswordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforcedPasswordsId(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforcedPasswordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforceresultsIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforceresultsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBruteforceresultsId(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBruteforceresultsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCvesDbTypeVersion(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCvesDbTypeVersionRequest(c.Server, dbType, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMysqlScans(ctx context.Context, params *GetMysqlScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMysqlScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMysqlId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMysqlIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMysqlIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMysqlIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMysqlId(ctx context.Context, id int64, body PatchMysqlIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMysqlIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdAddUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdAddUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdAddUser(ctx context.Context, id int64, body PostOrganizationsIdAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdAddUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsIdDeleteUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdDeleteUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsIdDeleteUser(ctx context.Context, id int64, body DeleteOrganizationsIdDeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsIdDeleteUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdEditUserWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdEditUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsIdEditUser(ctx context.Context, id int64, body PostOrganizationsIdEditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsIdEditUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostgresScans(ctx context.Context, params *GetPostgresScansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostgresScansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostgresId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostgresIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPostgresIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPostgresIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPostgresId(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPostgresIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIdBruteforcePasswords(ctx context.Context, id int64, params *GetProjectsIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdBruteforcePasswordsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsIdBruteforcedPassword(ctx context.Context, id int64, params *GetProjectsIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsIdBruteforcedPasswordRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIdBruteforcedPasswordWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsIdBruteforcedPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIdBruteforcedPassword(ctx context.Context, id int64, body PostProjectsIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsIdBruteforcedPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsIdRun(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsIdRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScanId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScanId(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScanIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdBruteforceresultsWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdBruteforceresultsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdBruteforceresults(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdBruteforceresultsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdResultWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdResultRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScanIdResult(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScanIdResultRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersMeChangePassword(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersMeChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkerGetTask(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkerGetTaskRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPatchBruteforcedPasswordsIdRequest calls the generic PatchBruteforcedPasswordsId builder with application/json body
func NewPatchBruteforcedPasswordsIdRequest(server string, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBruteforcedPasswordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchBruteforcedPasswordsIdRequestWithBody generates requests for PatchBruteforcedPasswordsId with any type of body
func NewPatchBruteforcedPasswordsIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bruteforced-passwords/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchBruteforceresultsIdRequest calls the generic PatchBruteforceresultsId builder with application/json body
func NewPatchBruteforceresultsIdRequest(server string, id int64, body PatchBruteforceresultsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBruteforceresultsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchBruteforceresultsIdRequestWithBody generates requests for PatchBruteforceresultsId with any type of body
func NewPatchBruteforceresultsIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bruteforceresults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCvesDbTypeVersionRequest generates requests for GetCvesDbTypeVersion
func NewGetCvesDbTypeVersionRequest(server string, dbType string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dbType", runtime.ParamLocationPath, dbType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cves/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMysqlScansRequest generates requests for GetMysqlScans
func NewGetMysqlScansRequest(server string, params *GetMysqlScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mysql-scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scan", runtime.ParamLocationQuery, params.Scan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMysqlIdRequest generates requests for GetMysqlId
func NewGetMysqlIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mysql/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMysqlIdRequest calls the generic PatchMysqlId builder with application/json body
func NewPatchMysqlIdRequest(server string, id int64, body PatchMysqlIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMysqlIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchMysqlIdRequestWithBody generates requests for PatchMysqlId with any type of body
func NewPatchMysqlIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mysql/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string, params *GetOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsIdRequest generates requests for DeleteOrganizationsId
func NewDeleteOrganizationsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsIdRequest generates requests for GetOrganizationsId
func NewGetOrganizationsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsIdAddUserRequest calls the generic PostOrganizationsIdAddUser builder with application/json body
func NewPostOrganizationsIdAddUserRequest(server string, id int64, body PostOrganizationsIdAddUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdAddUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdAddUserRequestWithBody generates requests for PostOrganizationsIdAddUser with any type of body
func NewPostOrganizationsIdAddUserRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/add-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsIdDeleteUserRequest calls the generic DeleteOrganizationsIdDeleteUser builder with application/json body
func NewDeleteOrganizationsIdDeleteUserRequest(server string, id int64, body DeleteOrganizationsIdDeleteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOrganizationsIdDeleteUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteOrganizationsIdDeleteUserRequestWithBody generates requests for DeleteOrganizationsIdDeleteUser with any type of body
func NewDeleteOrganizationsIdDeleteUserRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/delete-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsIdEditUserRequest calls the generic PostOrganizationsIdEditUser builder with application/json body
func NewPostOrganizationsIdEditUserRequest(server string, id int64, body PostOrganizationsIdEditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsIdEditUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostOrganizationsIdEditUserRequestWithBody generates requests for PostOrganizationsIdEditUser with any type of body
func NewPostOrganizationsIdEditUserRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/edit-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPostgresScansRequest generates requests for GetPostgresScans
func NewGetPostgresScansRequest(server string, params *GetPostgresScansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postgres-scans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scan", runtime.ParamLocationQuery, params.Scan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostgresIdRequest generates requests for GetPostgresId
func NewGetPostgresIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postgres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPostgresIdRequest calls the generic PatchPostgresId builder with application/json body
func NewPatchPostgresIdRequest(server string, id int64, body PatchPostgresIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPostgresIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchPostgresIdRequestWithBody generates requests for PatchPostgresId with any type of body
func NewPatchPostgresIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/postgres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectsIdRequest generates requests for DeleteProjectsId
func NewDeleteProjectsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdRequest generates requests for GetProjectsId
func NewGetProjectsIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdBruteforcePasswordsRequest generates requests for GetProjectsIdBruteforcePasswords
func NewGetProjectsIdBruteforcePasswordsRequest(server string, id int64, params *GetProjectsIdBruteforcePasswordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/bruteforce-passwords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LastPasswordId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_password_id", runtime.ParamLocationQuery, *params.LastPasswordId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Password != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, *params.Password); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsIdBruteforcedPasswordRequest generates requests for GetProjectsIdBruteforcedPassword
func NewGetProjectsIdBruteforcedPasswordRequest(server string, id int64, params *GetProjectsIdBruteforcedPasswordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/bruteforced-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectsIdBruteforcedPasswordRequest calls the generic PostProjectsIdBruteforcedPassword builder with application/json body
func NewPostProjectsIdBruteforcedPasswordRequest(server string, id int64, body PostProjectsIdBruteforcedPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsIdBruteforcedPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostProjectsIdBruteforcedPasswordRequestWithBody generates requests for PostProjectsIdBruteforcedPassword with any type of body
func NewPostProjectsIdBruteforcedPasswordRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/bruteforced-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsIdRunRequest generates requests for PostProjectsIdRun
func NewPostProjectsIdRunRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanIdRequest generates requests for GetScanId
func NewGetScanIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScanIdRequest calls the generic PatchScanId builder with application/json body
func NewPatchScanIdRequest(server string, id int64, body PatchScanIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScanIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchScanIdRequestWithBody generates requests for PatchScanId with any type of body
func NewPatchScanIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScanIdBruteforceresultsRequest calls the generic PostScanIdBruteforceresults builder with application/json body
func NewPostScanIdBruteforceresultsRequest(server string, id int64, body PostScanIdBruteforceresultsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanIdBruteforceresultsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostScanIdBruteforceresultsRequestWithBody generates requests for PostScanIdBruteforceresults with any type of body
func NewPostScanIdBruteforceresultsRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s/bruteforceresults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostScanIdResultRequest calls the generic PostScanIdResult builder with application/json body
func NewPostScanIdResultRequest(server string, id int64, body PostScanIdResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScanIdResultRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostScanIdResultRequestWithBody generates requests for PostScanIdResult with any type of body
func NewPostScanIdResultRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scan/%s/result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersMeChangePasswordRequest calls the generic PostUsersMeChangePassword builder with application/json body
func NewPostUsersMeChangePasswordRequest(server string, body PostUsersMeChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersMeChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersMeChangePasswordRequestWithBody generates requests for PostUsersMeChangePassword with any type of body
func NewPostUsersMeChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkerGetTaskRequest generates requests for GetWorkerGetTask
func NewGetWorkerGetTaskRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/worker/get-task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PatchBruteforcedPasswordsIdWithBodyWithResponse request with any body
	PatchBruteforcedPasswordsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error)

	PatchBruteforcedPasswordsIdWithResponse(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error)

	// PatchBruteforceresultsIdWithBodyWithResponse request with any body
	PatchBruteforceresultsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error)

	PatchBruteforceresultsIdWithResponse(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error)

	// GetCvesDbTypeVersionWithResponse request
	GetCvesDbTypeVersionWithResponse(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDbTypeVersionResponse, error)

	// GetMysqlScansWithResponse request
	GetMysqlScansWithResponse(ctx context.Context, params *GetMysqlScansParams, reqEditors ...RequestEditorFn) (*GetMysqlScansResponse, error)

	// GetMysqlIdWithResponse request
	GetMysqlIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetMysqlIdResponse, error)

	// PatchMysqlIdWithBodyWithResponse request with any body
	PatchMysqlIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMysqlIdResponse, error)

	PatchMysqlIdWithResponse(ctx context.Context, id int64, body PatchMysqlIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMysqlIdResponse, error)

	// GetOrganizationsWithResponse request
	GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// PostOrganizationsWithBodyWithResponse request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// DeleteOrganizationsIdWithResponse request
	DeleteOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error)

	// GetOrganizationsIdWithResponse request
	GetOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error)

	// PostOrganizationsIdAddUserWithBodyWithResponse request with any body
	PostOrganizationsIdAddUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdAddUserResponse, error)

	PostOrganizationsIdAddUserWithResponse(ctx context.Context, id int64, body PostOrganizationsIdAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdAddUserResponse, error)

	// DeleteOrganizationsIdDeleteUserWithBodyWithResponse request with any body
	DeleteOrganizationsIdDeleteUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdDeleteUserResponse, error)

	DeleteOrganizationsIdDeleteUserWithResponse(ctx context.Context, id int64, body DeleteOrganizationsIdDeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdDeleteUserResponse, error)

	// PostOrganizationsIdEditUserWithBodyWithResponse request with any body
	PostOrganizationsIdEditUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdEditUserResponse, error)

	PostOrganizationsIdEditUserWithResponse(ctx context.Context, id int64, body PostOrganizationsIdEditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdEditUserResponse, error)

	// GetPostgresScansWithResponse request
	GetPostgresScansWithResponse(ctx context.Context, params *GetPostgresScansParams, reqEditors ...RequestEditorFn) (*GetPostgresScansResponse, error)

	// GetPostgresIdWithResponse request
	GetPostgresIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostgresIdResponse, error)

	// PatchPostgresIdWithBodyWithResponse request with any body
	PatchPostgresIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error)

	PatchPostgresIdWithResponse(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error)

	// PostProjectsWithBodyWithResponse request with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	// DeleteProjectsIdWithResponse request
	DeleteProjectsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteProjectsIdResponse, error)

	// GetProjectsIdWithResponse request
	GetProjectsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error)

	// GetProjectsIdBruteforcePasswordsWithResponse request
	GetProjectsIdBruteforcePasswordsWithResponse(ctx context.Context, id int64, params *GetProjectsIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectsIdBruteforcePasswordsResponse, error)

	// GetProjectsIdBruteforcedPasswordWithResponse request
	GetProjectsIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, params *GetProjectsIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*GetProjectsIdBruteforcedPasswordResponse, error)

	// PostProjectsIdBruteforcedPasswordWithBodyWithResponse request with any body
	PostProjectsIdBruteforcedPasswordWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsIdBruteforcedPasswordResponse, error)

	PostProjectsIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, body PostProjectsIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsIdBruteforcedPasswordResponse, error)

	// PostProjectsIdRunWithResponse request
	PostProjectsIdRunWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostProjectsIdRunResponse, error)

	// GetScanIdWithResponse request
	GetScanIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetScanIdResponse, error)

	// PatchScanIdWithBodyWithResponse request with any body
	PatchScanIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error)

	PatchScanIdWithResponse(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error)

	// PostScanIdBruteforceresultsWithBodyWithResponse request with any body
	PostScanIdBruteforceresultsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error)

	PostScanIdBruteforceresultsWithResponse(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error)

	// PostScanIdResultWithBodyWithResponse request with any body
	PostScanIdResultWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error)

	PostScanIdResultWithResponse(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// PostUsersMeChangePasswordWithBodyWithResponse request with any body
	PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// GetWorkerGetTaskWithResponse request
	GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error)
}

type PatchBruteforcedPasswordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
		Success             bool                 `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchBruteforcedPasswordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBruteforcedPasswordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBruteforceresultsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
		Success              bool                  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchBruteforceresultsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBruteforceresultsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCvesDbTypeVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cves    []CVE `json:"cves"`
		Success bool  `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetCvesDbTypeVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCvesDbTypeVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMysqlScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scans   []MysqlScan `json:"scans"`
		Success bool        `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetMysqlScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMysqlScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMysqlIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MysqlDatabase MysqlDatabase `json:"mysql_database"`
		Success       bool          `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetMysqlIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMysqlIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMysqlIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MysqlDatabase MysqlDatabase `json:"mysql_database"`
		Success       bool          `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchMysqlIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMysqlIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Organizations []Organization `json:"organizations"`
		Success       bool           `json:"success"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Organization Organization `json:"organization"`
		Success      bool         `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {
		Success bool `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Organization Organization `json:"organization"`
		Success      bool         `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdAddUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdAddUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdAddUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsIdDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsIdDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsIdDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsIdEditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsIdEditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsIdEditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostgresScansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scans   []PostgresScan `json:"scans"`
		Success bool           `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetPostgresScansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostgresScansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostgresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabase PostgresDatabase `json:"postgres_database"`
		Success          bool             `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetPostgresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostgresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPostgresIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabase PostgresDatabase `json:"postgres_database"`
		Success          bool             `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchPostgresIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPostgresIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Project Project `json:"project"`
		Success bool    `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {
		Success bool `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
		Project           Project            `json:"project"`
		Success           bool               `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdBruteforcePasswordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBruteforcePasswords
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdBruteforcePasswordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdBruteforcePasswordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsIdBruteforcedPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
		Success             bool                `json:"success"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectsIdBruteforcedPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsIdBruteforcedPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsIdBruteforcedPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
		Success             bool                 `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectsIdBruteforcedPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsIdBruteforcedPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsIdRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ScanGroup *ScanGroup `json:"scan_group,omitempty"`
		Success   bool       `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostProjectsIdRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsIdRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
		Results           []ScanResult           `json:"results"`
		Scan              Scan                   `json:"scan"`
		Success           bool                   `json:"success"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScanIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *Scan `json:"scan,omitempty"`
		Success bool  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PatchScanIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScanIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanIdBruteforceresultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
		Success              bool                  `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScanIdBruteforceresultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanIdBruteforceresultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScanIdResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan    *ScanResult `json:"scan,omitempty"`
		Success bool        `json:"success"`
	}
	JSON400 *Error
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r PostScanIdResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScanIdResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedUsers
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
		User    User `json:"user"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersMeChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersMeChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersMeChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkerGetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Scan      Scan      `json:"scan"`
		ScanGroup ScanGroup `json:"scan_group"`
		Success   bool      `json:"success"`
	}
	JSON202 *Error
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkerGetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkerGetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PatchBruteforcedPasswordsIdWithBodyWithResponse request with arbitrary body returning *PatchBruteforcedPasswordsIdResponse
func (c *ClientWithResponses) PatchBruteforcedPasswordsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error) {
	rsp, err := c.PatchBruteforcedPasswordsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforcedPasswordsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBruteforcedPasswordsIdWithResponse(ctx context.Context, id int64, body PatchBruteforcedPasswordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforcedPasswordsIdResponse, error) {
	rsp, err := c.PatchBruteforcedPasswordsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforcedPasswordsIdResponse(rsp)
}

// PatchBruteforceresultsIdWithBodyWithResponse request with arbitrary body returning *PatchBruteforceresultsIdResponse
func (c *ClientWithResponses) PatchBruteforceresultsIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error) {
	rsp, err := c.PatchBruteforceresultsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforceresultsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBruteforceresultsIdWithResponse(ctx context.Context, id int64, body PatchBruteforceresultsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBruteforceresultsIdResponse, error) {
	rsp, err := c.PatchBruteforceresultsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBruteforceresultsIdResponse(rsp)
}

// GetCvesDbTypeVersionWithResponse request returning *GetCvesDbTypeVersionResponse
func (c *ClientWithResponses) GetCvesDbTypeVersionWithResponse(ctx context.Context, dbType string, version string, reqEditors ...RequestEditorFn) (*GetCvesDbTypeVersionResponse, error) {
	rsp, err := c.GetCvesDbTypeVersion(ctx, dbType, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCvesDbTypeVersionResponse(rsp)
}

// GetMysqlScansWithResponse request returning *GetMysqlScansResponse
func (c *ClientWithResponses) GetMysqlScansWithResponse(ctx context.Context, params *GetMysqlScansParams, reqEditors ...RequestEditorFn) (*GetMysqlScansResponse, error) {
	rsp, err := c.GetMysqlScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMysqlScansResponse(rsp)
}

// GetMysqlIdWithResponse request returning *GetMysqlIdResponse
func (c *ClientWithResponses) GetMysqlIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetMysqlIdResponse, error) {
	rsp, err := c.GetMysqlId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMysqlIdResponse(rsp)
}

// PatchMysqlIdWithBodyWithResponse request with arbitrary body returning *PatchMysqlIdResponse
func (c *ClientWithResponses) PatchMysqlIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMysqlIdResponse, error) {
	rsp, err := c.PatchMysqlIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMysqlIdResponse(rsp)
}

func (c *ClientWithResponses) PatchMysqlIdWithResponse(ctx context.Context, id int64, body PatchMysqlIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMysqlIdResponse, error) {
	rsp, err := c.PatchMysqlId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMysqlIdResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, params *GetOrganizationsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsResponse(rsp)
}

// DeleteOrganizationsIdWithResponse request returning *DeleteOrganizationsIdResponse
func (c *ClientWithResponses) DeleteOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdResponse, error) {
	rsp, err := c.DeleteOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdResponse(rsp)
}

// GetOrganizationsIdWithResponse request returning *GetOrganizationsIdResponse
func (c *ClientWithResponses) GetOrganizationsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetOrganizationsIdResponse, error) {
	rsp, err := c.GetOrganizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsIdResponse(rsp)
}

// PostOrganizationsIdAddUserWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdAddUserResponse
func (c *ClientWithResponses) PostOrganizationsIdAddUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdAddUserResponse, error) {
	rsp, err := c.PostOrganizationsIdAddUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdAddUserResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdAddUserWithResponse(ctx context.Context, id int64, body PostOrganizationsIdAddUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdAddUserResponse, error) {
	rsp, err := c.PostOrganizationsIdAddUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdAddUserResponse(rsp)
}

// DeleteOrganizationsIdDeleteUserWithBodyWithResponse request with arbitrary body returning *DeleteOrganizationsIdDeleteUserResponse
func (c *ClientWithResponses) DeleteOrganizationsIdDeleteUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdDeleteUserResponse, error) {
	rsp, err := c.DeleteOrganizationsIdDeleteUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdDeleteUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteOrganizationsIdDeleteUserWithResponse(ctx context.Context, id int64, body DeleteOrganizationsIdDeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOrganizationsIdDeleteUserResponse, error) {
	rsp, err := c.DeleteOrganizationsIdDeleteUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationsIdDeleteUserResponse(rsp)
}

// PostOrganizationsIdEditUserWithBodyWithResponse request with arbitrary body returning *PostOrganizationsIdEditUserResponse
func (c *ClientWithResponses) PostOrganizationsIdEditUserWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsIdEditUserResponse, error) {
	rsp, err := c.PostOrganizationsIdEditUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdEditUserResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsIdEditUserWithResponse(ctx context.Context, id int64, body PostOrganizationsIdEditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsIdEditUserResponse, error) {
	rsp, err := c.PostOrganizationsIdEditUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsIdEditUserResponse(rsp)
}

// GetPostgresScansWithResponse request returning *GetPostgresScansResponse
func (c *ClientWithResponses) GetPostgresScansWithResponse(ctx context.Context, params *GetPostgresScansParams, reqEditors ...RequestEditorFn) (*GetPostgresScansResponse, error) {
	rsp, err := c.GetPostgresScans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostgresScansResponse(rsp)
}

// GetPostgresIdWithResponse request returning *GetPostgresIdResponse
func (c *ClientWithResponses) GetPostgresIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetPostgresIdResponse, error) {
	rsp, err := c.GetPostgresId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostgresIdResponse(rsp)
}

// PatchPostgresIdWithBodyWithResponse request with arbitrary body returning *PatchPostgresIdResponse
func (c *ClientWithResponses) PatchPostgresIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error) {
	rsp, err := c.PatchPostgresIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPostgresIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPostgresIdWithResponse(ctx context.Context, id int64, body PatchPostgresIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPostgresIdResponse, error) {
	rsp, err := c.PatchPostgresId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPostgresIdResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// DeleteProjectsIdWithResponse request returning *DeleteProjectsIdResponse
func (c *ClientWithResponses) DeleteProjectsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteProjectsIdResponse, error) {
	rsp, err := c.DeleteProjectsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsIdResponse(rsp)
}

// GetProjectsIdWithResponse request returning *GetProjectsIdResponse
func (c *ClientWithResponses) GetProjectsIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectsIdResponse, error) {
	rsp, err := c.GetProjectsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdResponse(rsp)
}

// GetProjectsIdBruteforcePasswordsWithResponse request returning *GetProjectsIdBruteforcePasswordsResponse
func (c *ClientWithResponses) GetProjectsIdBruteforcePasswordsWithResponse(ctx context.Context, id int64, params *GetProjectsIdBruteforcePasswordsParams, reqEditors ...RequestEditorFn) (*GetProjectsIdBruteforcePasswordsResponse, error) {
	rsp, err := c.GetProjectsIdBruteforcePasswords(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdBruteforcePasswordsResponse(rsp)
}

// GetProjectsIdBruteforcedPasswordWithResponse request returning *GetProjectsIdBruteforcedPasswordResponse
func (c *ClientWithResponses) GetProjectsIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, params *GetProjectsIdBruteforcedPasswordParams, reqEditors ...RequestEditorFn) (*GetProjectsIdBruteforcedPasswordResponse, error) {
	rsp, err := c.GetProjectsIdBruteforcedPassword(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsIdBruteforcedPasswordResponse(rsp)
}

// PostProjectsIdBruteforcedPasswordWithBodyWithResponse request with arbitrary body returning *PostProjectsIdBruteforcedPasswordResponse
func (c *ClientWithResponses) PostProjectsIdBruteforcedPasswordWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsIdBruteforcedPasswordResponse, error) {
	rsp, err := c.PostProjectsIdBruteforcedPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdBruteforcedPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsIdBruteforcedPasswordWithResponse(ctx context.Context, id int64, body PostProjectsIdBruteforcedPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsIdBruteforcedPasswordResponse, error) {
	rsp, err := c.PostProjectsIdBruteforcedPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdBruteforcedPasswordResponse(rsp)
}

// PostProjectsIdRunWithResponse request returning *PostProjectsIdRunResponse
func (c *ClientWithResponses) PostProjectsIdRunWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostProjectsIdRunResponse, error) {
	rsp, err := c.PostProjectsIdRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsIdRunResponse(rsp)
}

// GetScanIdWithResponse request returning *GetScanIdResponse
func (c *ClientWithResponses) GetScanIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetScanIdResponse, error) {
	rsp, err := c.GetScanId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanIdResponse(rsp)
}

// PatchScanIdWithBodyWithResponse request with arbitrary body returning *PatchScanIdResponse
func (c *ClientWithResponses) PatchScanIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error) {
	rsp, err := c.PatchScanIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanIdResponse(rsp)
}

func (c *ClientWithResponses) PatchScanIdWithResponse(ctx context.Context, id int64, body PatchScanIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScanIdResponse, error) {
	rsp, err := c.PatchScanId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScanIdResponse(rsp)
}

// PostScanIdBruteforceresultsWithBodyWithResponse request with arbitrary body returning *PostScanIdBruteforceresultsResponse
func (c *ClientWithResponses) PostScanIdBruteforceresultsWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error) {
	rsp, err := c.PostScanIdBruteforceresultsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdBruteforceresultsResponse(rsp)
}

func (c *ClientWithResponses) PostScanIdBruteforceresultsWithResponse(ctx context.Context, id int64, body PostScanIdBruteforceresultsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdBruteforceresultsResponse, error) {
	rsp, err := c.PostScanIdBruteforceresults(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdBruteforceresultsResponse(rsp)
}

// PostScanIdResultWithBodyWithResponse request with arbitrary body returning *PostScanIdResultResponse
func (c *ClientWithResponses) PostScanIdResultWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error) {
	rsp, err := c.PostScanIdResultWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdResultResponse(rsp)
}

func (c *ClientWithResponses) PostScanIdResultWithResponse(ctx context.Context, id int64, body PostScanIdResultJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScanIdResultResponse, error) {
	rsp, err := c.PostScanIdResult(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScanIdResultResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// PostUsersMeChangePasswordWithBodyWithResponse request with arbitrary body returning *PostUsersMeChangePasswordResponse
func (c *ClientWithResponses) PostUsersMeChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostUsersMeChangePasswordWithResponse(ctx context.Context, body PostUsersMeChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersMeChangePasswordResponse, error) {
	rsp, err := c.PostUsersMeChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersMeChangePasswordResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// GetWorkerGetTaskWithResponse request returning *GetWorkerGetTaskResponse
func (c *ClientWithResponses) GetWorkerGetTaskWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkerGetTaskResponse, error) {
	rsp, err := c.GetWorkerGetTask(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkerGetTaskResponse(rsp)
}

// ParsePatchBruteforcedPasswordsIdResponse parses an HTTP response from a PatchBruteforcedPasswordsIdWithResponse call
func ParsePatchBruteforcedPasswordsIdResponse(rsp *http.Response) (*PatchBruteforcedPasswordsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBruteforcedPasswordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
			Success             bool                 `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchBruteforceresultsIdResponse parses an HTTP response from a PatchBruteforceresultsIdWithResponse call
func ParsePatchBruteforceresultsIdResponse(rsp *http.Response) (*PatchBruteforceresultsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBruteforceresultsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
			Success              bool                  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCvesDbTypeVersionResponse parses an HTTP response from a GetCvesDbTypeVersionWithResponse call
func ParseGetCvesDbTypeVersionResponse(rsp *http.Response) (*GetCvesDbTypeVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCvesDbTypeVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cves    []CVE `json:"cves"`
			Success bool  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMysqlScansResponse parses an HTTP response from a GetMysqlScansWithResponse call
func ParseGetMysqlScansResponse(rsp *http.Response) (*GetMysqlScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMysqlScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scans   []MysqlScan `json:"scans"`
			Success bool        `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMysqlIdResponse parses an HTTP response from a GetMysqlIdWithResponse call
func ParseGetMysqlIdResponse(rsp *http.Response) (*GetMysqlIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMysqlIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MysqlDatabase MysqlDatabase `json:"mysql_database"`
			Success       bool          `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchMysqlIdResponse parses an HTTP response from a PatchMysqlIdWithResponse call
func ParsePatchMysqlIdResponse(rsp *http.Response) (*PatchMysqlIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMysqlIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MysqlDatabase MysqlDatabase `json:"mysql_database"`
			Success       bool          `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Organizations []Organization `json:"organizations"`
			Success       bool           `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Organization Organization `json:"organization"`
			Success      bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationsIdResponse parses an HTTP response from a DeleteOrganizationsIdWithResponse call
func ParseDeleteOrganizationsIdResponse(rsp *http.Response) (*DeleteOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsIdResponse parses an HTTP response from a GetOrganizationsIdWithResponse call
func ParseGetOrganizationsIdResponse(rsp *http.Response) (*GetOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Organization Organization `json:"organization"`
			Success      bool         `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsIdAddUserResponse parses an HTTP response from a PostOrganizationsIdAddUserWithResponse call
func ParsePostOrganizationsIdAddUserResponse(rsp *http.Response) (*PostOrganizationsIdAddUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdAddUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationsIdDeleteUserResponse parses an HTTP response from a DeleteOrganizationsIdDeleteUserWithResponse call
func ParseDeleteOrganizationsIdDeleteUserResponse(rsp *http.Response) (*DeleteOrganizationsIdDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsIdDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOrganizationsIdEditUserResponse parses an HTTP response from a PostOrganizationsIdEditUserWithResponse call
func ParsePostOrganizationsIdEditUserResponse(rsp *http.Response) (*PostOrganizationsIdEditUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsIdEditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPostgresScansResponse parses an HTTP response from a GetPostgresScansWithResponse call
func ParseGetPostgresScansResponse(rsp *http.Response) (*GetPostgresScansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostgresScansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scans   []PostgresScan `json:"scans"`
			Success bool           `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPostgresIdResponse parses an HTTP response from a GetPostgresIdWithResponse call
func ParseGetPostgresIdResponse(rsp *http.Response) (*GetPostgresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostgresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabase PostgresDatabase `json:"postgres_database"`
			Success          bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchPostgresIdResponse parses an HTTP response from a PatchPostgresIdWithResponse call
func ParsePatchPostgresIdResponse(rsp *http.Response) (*PatchPostgresIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPostgresIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabase PostgresDatabase `json:"postgres_database"`
			Success          bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Project Project `json:"project"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsIdResponse parses an HTTP response from a DeleteProjectsIdWithResponse call
func ParseDeleteProjectsIdResponse(rsp *http.Response) (*DeleteProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectsIdResponse parses an HTTP response from a GetProjectsIdWithResponse call
func ParseGetProjectsIdResponse(rsp *http.Response) (*GetProjectsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
			Project           Project            `json:"project"`
			Success           bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectsIdBruteforcePasswordsResponse parses an HTTP response from a GetProjectsIdBruteforcePasswordsWithResponse call
func ParseGetProjectsIdBruteforcePasswordsResponse(rsp *http.Response) (*GetProjectsIdBruteforcePasswordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdBruteforcePasswordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBruteforcePasswords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectsIdBruteforcedPasswordResponse parses an HTTP response from a GetProjectsIdBruteforcedPasswordWithResponse call
func ParseGetProjectsIdBruteforcedPasswordResponse(rsp *http.Response) (*GetProjectsIdBruteforcedPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsIdBruteforcedPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
			Success             bool                `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostProjectsIdBruteforcedPasswordResponse parses an HTTP response from a PostProjectsIdBruteforcedPasswordWithResponse call
func ParsePostProjectsIdBruteforcedPasswordResponse(rsp *http.Response) (*PostProjectsIdBruteforcedPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsIdBruteforcedPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
			Success             bool                 `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostProjectsIdRunResponse parses an HTTP response from a PostProjectsIdRunWithResponse call
func ParsePostProjectsIdRunResponse(rsp *http.Response) (*PostProjectsIdRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsIdRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ScanGroup *ScanGroup `json:"scan_group,omitempty"`
			Success   bool       `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetScanIdResponse parses an HTTP response from a GetScanIdWithResponse call
func ParseGetScanIdResponse(rsp *http.Response) (*GetScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
			Results           []ScanResult           `json:"results"`
			Scan              Scan                   `json:"scan"`
			Success           bool                   `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchScanIdResponse parses an HTTP response from a PatchScanIdWithResponse call
func ParsePatchScanIdResponse(rsp *http.Response) (*PatchScanIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScanIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *Scan `json:"scan,omitempty"`
			Success bool  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScanIdBruteforceresultsResponse parses an HTTP response from a PostScanIdBruteforceresultsWithResponse call
func ParsePostScanIdBruteforceresultsResponse(rsp *http.Response) (*PostScanIdBruteforceresultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanIdBruteforceresultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
			Success              bool                  `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostScanIdResultResponse parses an HTTP response from a PostScanIdResultWithResponse call
func ParsePostScanIdResultResponse(rsp *http.Response) (*PostScanIdResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScanIdResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan    *ScanResult `json:"scan,omitempty"`
			Success bool        `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
			User    User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostUsersMeChangePasswordResponse parses an HTTP response from a PostUsersMeChangePasswordWithResponse call
func ParsePostUsersMeChangePasswordResponse(rsp *http.Response) (*PostUsersMeChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersMeChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkerGetTaskResponse parses an HTTP response from a GetWorkerGetTaskWithResponse call
func ParseGetWorkerGetTaskResponse(rsp *http.Response) (*GetWorkerGetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkerGetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Scan      Scan      `json:"scan"`
			ScanGroup ScanGroup `json:"scan_group"`
			Success   bool      `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Update a bruteforced password by ID
	// (PATCH /bruteforced-passwords/{id})
	PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a bruteforce scan result by ID
	// (PATCH /bruteforceresults/{id})
	PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get all CVEs for a database type and version
	// (GET /cves/{dbType}/{version})
	GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string)
	// Get all postgres scans
	// (GET /mysql-scans)
	GetMysqlScans(w http.ResponseWriter, r *http.Request, params GetMysqlScansParams)
	// Get mysql database by ID
	// (GET /mysql/{id})
	GetMysqlId(w http.ResponseWriter, r *http.Request, id int64)
	// Update mysql database by ID
	// (PATCH /mysql/{id})
	PatchMysqlId(w http.ResponseWriter, r *http.Request, id int64)
	// Get all organizations that the user can see
	// (GET /organizations)
	GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams)
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(w http.ResponseWriter, r *http.Request)
	// Delete organization by ID
	// (DELETE /organizations/{id})
	DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get organization by ID
	// (GET /organizations/{id})
	GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64)
	// Add a user to an organization
	// (POST /organizations/{id}/add-user)
	PostOrganizationsIdAddUser(w http.ResponseWriter, r *http.Request, id int64)
	// Delete a user from an organization
	// (DELETE /organizations/{id}/delete-user)
	DeleteOrganizationsIdDeleteUser(w http.ResponseWriter, r *http.Request, id int64)
	// Edit a user's role in an organization
	// (POST /organizations/{id}/edit-user)
	PostOrganizationsIdEditUser(w http.ResponseWriter, r *http.Request, id int64)
	// Get all postgres scans
	// (GET /postgres-scans)
	GetPostgresScans(w http.ResponseWriter, r *http.Request, params GetPostgresScansParams)
	// Get postgres database by ID
	// (GET /postgres/{id})
	GetPostgresId(w http.ResponseWriter, r *http.Request, id int64)
	// Update postgres database by ID
	// (PATCH /postgres/{id})
	PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new project
	// (POST /projects)
	PostProjects(w http.ResponseWriter, r *http.Request)
	// Delete project by ID
	// (DELETE /projects/{id})
	DeleteProjectsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get project by ID
	// (GET /projects/{id})
	GetProjectsId(w http.ResponseWriter, r *http.Request, id int64)
	// Get all bruteforce passwords associated with a project
	// (GET /projects/{id}/bruteforce-passwords)
	GetProjectsIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcePasswordsParams)
	// Get bruteforced password for a project
	// (GET /projects/{id}/bruteforced-password)
	GetProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcedPasswordParams)
	// Create a bruteforced password for a project
	// (POST /projects/{id}/bruteforced-password)
	PostProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64)
	// Run all extractors and scanners for a project
	// (POST /projects/{id}/run)
	PostProjectsIdRun(w http.ResponseWriter, r *http.Request, id int64)
	// Get a scan by ID
	// (GET /scan/{id})
	GetScanId(w http.ResponseWriter, r *http.Request, id int64)
	// Update a scan by ID
	// (PATCH /scan/{id})
	PatchScanId(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new bruteforce scan result
	// (POST /scan/{id}/bruteforceresults)
	PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64)
	// Create a new scan result
	// (POST /scan/{id}/result)
	PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64)
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id int64)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Update a bruteforced password by ID
// (PATCH /bruteforced-passwords/{id})
func (_ Unimplemented) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a bruteforce scan result by ID
// (PATCH /bruteforceresults/{id})
func (_ Unimplemented) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all CVEs for a database type and version
// (GET /cves/{dbType}/{version})
func (_ Unimplemented) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all postgres scans
// (GET /mysql-scans)
func (_ Unimplemented) GetMysqlScans(w http.ResponseWriter, r *http.Request, params GetMysqlScansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get mysql database by ID
// (GET /mysql/{id})
func (_ Unimplemented) GetMysqlId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update mysql database by ID
// (PATCH /mysql/{id})
func (_ Unimplemented) PatchMysqlId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all organizations that the user can see
// (GET /organizations)
func (_ Unimplemented) GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new organization
// (POST /organizations)
func (_ Unimplemented) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete organization by ID
// (DELETE /organizations/{id})
func (_ Unimplemented) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get organization by ID
// (GET /organizations/{id})
func (_ Unimplemented) GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a user to an organization
// (POST /organizations/{id}/add-user)
func (_ Unimplemented) PostOrganizationsIdAddUser(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user from an organization
// (DELETE /organizations/{id}/delete-user)
func (_ Unimplemented) DeleteOrganizationsIdDeleteUser(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Edit a user's role in an organization
// (POST /organizations/{id}/edit-user)
func (_ Unimplemented) PostOrganizationsIdEditUser(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all postgres scans
// (GET /postgres-scans)
func (_ Unimplemented) GetPostgresScans(w http.ResponseWriter, r *http.Request, params GetPostgresScansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get postgres database by ID
// (GET /postgres/{id})
func (_ Unimplemented) GetPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update postgres database by ID
// (PATCH /postgres/{id})
func (_ Unimplemented) PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new project
// (POST /projects)
func (_ Unimplemented) PostProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete project by ID
// (DELETE /projects/{id})
func (_ Unimplemented) DeleteProjectsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get project by ID
// (GET /projects/{id})
func (_ Unimplemented) GetProjectsId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all bruteforce passwords associated with a project
// (GET /projects/{id}/bruteforce-passwords)
func (_ Unimplemented) GetProjectsIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcePasswordsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get bruteforced password for a project
// (GET /projects/{id}/bruteforced-password)
func (_ Unimplemented) GetProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcedPasswordParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a bruteforced password for a project
// (POST /projects/{id}/bruteforced-password)
func (_ Unimplemented) PostProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run all extractors and scanners for a project
// (POST /projects/{id}/run)
func (_ Unimplemented) PostProjectsIdRun(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a scan by ID
// (GET /scan/{id})
func (_ Unimplemented) GetScanId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a scan by ID
// (PATCH /scan/{id})
func (_ Unimplemented) PatchScanId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new bruteforce scan result
// (POST /scan/{id}/bruteforceresults)
func (_ Unimplemented) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new scan result
// (POST /scan/{id}/result)
func (_ Unimplemented) PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current logged in user
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change password of current logged in user
// (POST /users/me/change-password)
func (_ Unimplemented) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task for the worker
// (GET /worker/get-task)
func (_ Unimplemented) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PatchBruteforcedPasswordsId operation middleware
func (siw *ServerInterfaceWrapper) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchBruteforcedPasswordsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchBruteforceresultsId operation middleware
func (siw *ServerInterfaceWrapper) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchBruteforceresultsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCvesDbTypeVersion operation middleware
func (siw *ServerInterfaceWrapper) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dbType" -------------
	var dbType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dbType", runtime.ParamLocationPath, chi.URLParam(r, "dbType"), &dbType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dbType", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCvesDbTypeVersion(w, r, dbType, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMysqlScans operation middleware
func (siw *ServerInterfaceWrapper) GetMysqlScans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMysqlScansParams

	// ------------- Required query parameter "scan" -------------

	if paramValue := r.URL.Query().Get("scan"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "scan"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scan", r.URL.Query(), &params.Scan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scan", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMysqlScans(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMysqlId operation middleware
func (siw *ServerInterfaceWrapper) GetMysqlId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMysqlId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchMysqlId operation middleware
func (siw *ServerInterfaceWrapper) PatchMysqlId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchMysqlId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizations operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrganizationsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizations(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostOrganizations operation middleware
func (siw *ServerInterfaceWrapper) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrganizations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteOrganizationsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrganizationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrganizationsId operation middleware
func (siw *ServerInterfaceWrapper) GetOrganizationsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrganizationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostOrganizationsIdAddUser operation middleware
func (siw *ServerInterfaceWrapper) PostOrganizationsIdAddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrganizationsIdAddUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteOrganizationsIdDeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrganizationsIdDeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrganizationsIdDeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostOrganizationsIdEditUser operation middleware
func (siw *ServerInterfaceWrapper) PostOrganizationsIdEditUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrganizationsIdEditUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPostgresScans operation middleware
func (siw *ServerInterfaceWrapper) GetPostgresScans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostgresScansParams

	// ------------- Required query parameter "scan" -------------

	if paramValue := r.URL.Query().Get("scan"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "scan"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scan", r.URL.Query(), &params.Scan)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scan", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostgresScans(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPostgresId operation middleware
func (siw *ServerInterfaceWrapper) GetPostgresId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostgresId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchPostgresId operation middleware
func (siw *ServerInterfaceWrapper) PatchPostgresId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchPostgresId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjects operation middleware
func (siw *ServerInterfaceWrapper) PostProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProjectsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProjectsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsIdBruteforcePasswords operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsIdBruteforcePasswords(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsIdBruteforcePasswordsParams

	// ------------- Optional query parameter "last_password_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_password_id", r.URL.Query(), &params.LastPasswordId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_password_id", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsIdBruteforcePasswords(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectsIdBruteforcedPassword operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsIdBruteforcedPasswordParams

	// ------------- Required query parameter "hash" -------------

	if paramValue := r.URL.Query().Get("hash"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "hash"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "hash", r.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectsIdBruteforcedPassword(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsIdBruteforcedPassword operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsIdBruteforcedPassword(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectsIdRun operation middleware
func (siw *ServerInterfaceWrapper) PostProjectsIdRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectsIdRun(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScanId operation middleware
func (siw *ServerInterfaceWrapper) GetScanId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScanId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchScanId operation middleware
func (siw *ServerInterfaceWrapper) PatchScanId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchScanId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScanIdBruteforceresults operation middleware
func (siw *ServerInterfaceWrapper) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScanIdBruteforceresults(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScanIdResult operation middleware
func (siw *ServerInterfaceWrapper) PostScanIdResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScanIdResult(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsersMeChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersMeChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, SessionAuthScopes, []string{})

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWorkerGetTask operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, WorkerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkerGetTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/bruteforced-passwords/{id}", wrapper.PatchBruteforcedPasswordsId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/bruteforceresults/{id}", wrapper.PatchBruteforceresultsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cves/{dbType}/{version}", wrapper.GetCvesDbTypeVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mysql-scans", wrapper.GetMysqlScans)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mysql/{id}", wrapper.GetMysqlId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/mysql/{id}", wrapper.PatchMysqlId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/organizations", wrapper.GetOrganizations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/organizations", wrapper.PostOrganizations)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/organizations/{id}", wrapper.DeleteOrganizationsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/organizations/{id}", wrapper.GetOrganizationsId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/organizations/{id}/add-user", wrapper.PostOrganizationsIdAddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/organizations/{id}/delete-user", wrapper.DeleteOrganizationsIdDeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/organizations/{id}/edit-user", wrapper.PostOrganizationsIdEditUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/postgres-scans", wrapper.GetPostgresScans)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/postgres/{id}", wrapper.GetPostgresId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/postgres/{id}", wrapper.PatchPostgresId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.PostProjects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/projects/{id}", wrapper.DeleteProjectsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{id}", wrapper.GetProjectsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{id}/bruteforce-passwords", wrapper.GetProjectsIdBruteforcePasswords)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects/{id}/bruteforced-password", wrapper.GetProjectsIdBruteforcedPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{id}/bruteforced-password", wrapper.PostProjectsIdBruteforcedPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{id}/run", wrapper.PostProjectsIdRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scan/{id}", wrapper.GetScanId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/scan/{id}", wrapper.PatchScanId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scan/{id}/bruteforceresults", wrapper.PostScanIdBruteforceresults)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scan/{id}/result", wrapper.PostScanIdResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/me/change-password", wrapper.PostUsersMeChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/worker/get-task", wrapper.GetWorkerGetTask)
	})

	return r
}

type PatchBruteforcedPasswordsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchBruteforcedPasswordsIdJSONRequestBody
}

type PatchBruteforcedPasswordsIdResponseObject interface {
	VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error
}

type PatchBruteforcedPasswordsId200JSONResponse struct {
	BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
	Success             bool                 `json:"success"`
}

func (response PatchBruteforcedPasswordsId200JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId400JSONResponse Error

func (response PatchBruteforcedPasswordsId400JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId401JSONResponse Error

func (response PatchBruteforcedPasswordsId401JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforcedPasswordsId404JSONResponse Error

func (response PatchBruteforcedPasswordsId404JSONResponse) VisitPatchBruteforcedPasswordsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchBruteforceresultsIdJSONRequestBody
}

type PatchBruteforceresultsIdResponseObject interface {
	VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error
}

type PatchBruteforceresultsId200JSONResponse struct {
	Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
	Success              bool                  `json:"success"`
}

func (response PatchBruteforceresultsId200JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId400JSONResponse Error

func (response PatchBruteforceresultsId400JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId401JSONResponse Error

func (response PatchBruteforceresultsId401JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchBruteforceresultsId404JSONResponse Error

func (response PatchBruteforceresultsId404JSONResponse) VisitPatchBruteforceresultsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersionRequestObject struct {
	DbType  string `json:"dbType"`
	Version string `json:"version"`
}

type GetCvesDbTypeVersionResponseObject interface {
	VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error
}

type GetCvesDbTypeVersion200JSONResponse struct {
	Cves    []CVE `json:"cves"`
	Success bool  `json:"success"`
}

func (response GetCvesDbTypeVersion200JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersion401JSONResponse Error

func (response GetCvesDbTypeVersion401JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCvesDbTypeVersion404JSONResponse Error

func (response GetCvesDbTypeVersion404JSONResponse) VisitGetCvesDbTypeVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlScansRequestObject struct {
	Params GetMysqlScansParams
}

type GetMysqlScansResponseObject interface {
	VisitGetMysqlScansResponse(w http.ResponseWriter) error
}

type GetMysqlScans200JSONResponse struct {
	Scans   []MysqlScan `json:"scans"`
	Success bool        `json:"success"`
}

func (response GetMysqlScans200JSONResponse) VisitGetMysqlScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlScans401JSONResponse Error

func (response GetMysqlScans401JSONResponse) VisitGetMysqlScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlScans404JSONResponse Error

func (response GetMysqlScans404JSONResponse) VisitGetMysqlScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetMysqlIdResponseObject interface {
	VisitGetMysqlIdResponse(w http.ResponseWriter) error
}

type GetMysqlId200JSONResponse struct {
	MysqlDatabase MysqlDatabase `json:"mysql_database"`
	Success       bool          `json:"success"`
}

func (response GetMysqlId200JSONResponse) VisitGetMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlId401JSONResponse Error

func (response GetMysqlId401JSONResponse) VisitGetMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMysqlId404JSONResponse Error

func (response GetMysqlId404JSONResponse) VisitGetMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchMysqlIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchMysqlIdJSONRequestBody
}

type PatchMysqlIdResponseObject interface {
	VisitPatchMysqlIdResponse(w http.ResponseWriter) error
}

type PatchMysqlId200JSONResponse struct {
	MysqlDatabase MysqlDatabase `json:"mysql_database"`
	Success       bool          `json:"success"`
}

func (response PatchMysqlId200JSONResponse) VisitPatchMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchMysqlId400JSONResponse Error

func (response PatchMysqlId400JSONResponse) VisitPatchMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchMysqlId401JSONResponse Error

func (response PatchMysqlId401JSONResponse) VisitPatchMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchMysqlId404JSONResponse Error

func (response PatchMysqlId404JSONResponse) VisitPatchMysqlIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsRequestObject struct {
	Params GetOrganizationsParams
}

type GetOrganizationsResponseObject interface {
	VisitGetOrganizationsResponse(w http.ResponseWriter) error
}

type GetOrganizations200JSONResponse struct {
	Organizations []Organization `json:"organizations"`
	Success       bool           `json:"success"`
}

func (response GetOrganizations200JSONResponse) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizations401JSONResponse Error

func (response GetOrganizations401JSONResponse) VisitGetOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsRequestObject struct {
	Body *PostOrganizationsJSONRequestBody
}

type PostOrganizationsResponseObject interface {
	VisitPostOrganizationsResponse(w http.ResponseWriter) error
}

type PostOrganizations201JSONResponse struct {
	Organization Organization `json:"organization"`
	Success      bool         `json:"success"`
}

func (response PostOrganizations201JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizations400JSONResponse Error

func (response PostOrganizations400JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizations401JSONResponse Error

func (response PostOrganizations401JSONResponse) VisitPostOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteOrganizationsIdResponseObject interface {
	VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error
}

type DeleteOrganizationsId204JSONResponse struct {
	Success bool `json:"success"`
}

func (response DeleteOrganizationsId204JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsId401JSONResponse Error

func (response DeleteOrganizationsId401JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsId404JSONResponse Error

func (response DeleteOrganizationsId404JSONResponse) VisitDeleteOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetOrganizationsIdResponseObject interface {
	VisitGetOrganizationsIdResponse(w http.ResponseWriter) error
}

type GetOrganizationsId200JSONResponse struct {
	Organization Organization `json:"organization"`
	Success      bool         `json:"success"`
}

func (response GetOrganizationsId200JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsId401JSONResponse Error

func (response GetOrganizationsId401JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganizationsId404JSONResponse Error

func (response GetOrganizationsId404JSONResponse) VisitGetOrganizationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdAddUserRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostOrganizationsIdAddUserJSONRequestBody
}

type PostOrganizationsIdAddUserResponseObject interface {
	VisitPostOrganizationsIdAddUserResponse(w http.ResponseWriter) error
}

type PostOrganizationsIdAddUser200JSONResponse struct {
	Success bool `json:"success"`
}

func (response PostOrganizationsIdAddUser200JSONResponse) VisitPostOrganizationsIdAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdAddUser400JSONResponse Error

func (response PostOrganizationsIdAddUser400JSONResponse) VisitPostOrganizationsIdAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdAddUser401JSONResponse Error

func (response PostOrganizationsIdAddUser401JSONResponse) VisitPostOrganizationsIdAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdAddUser404JSONResponse Error

func (response PostOrganizationsIdAddUser404JSONResponse) VisitPostOrganizationsIdAddUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdDeleteUserRequestObject struct {
	Id   int64 `json:"id"`
	Body *DeleteOrganizationsIdDeleteUserJSONRequestBody
}

type DeleteOrganizationsIdDeleteUserResponseObject interface {
	VisitDeleteOrganizationsIdDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteOrganizationsIdDeleteUser200JSONResponse struct {
	Success bool `json:"success"`
}

func (response DeleteOrganizationsIdDeleteUser200JSONResponse) VisitDeleteOrganizationsIdDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdDeleteUser400JSONResponse Error

func (response DeleteOrganizationsIdDeleteUser400JSONResponse) VisitDeleteOrganizationsIdDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdDeleteUser401JSONResponse Error

func (response DeleteOrganizationsIdDeleteUser401JSONResponse) VisitDeleteOrganizationsIdDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationsIdDeleteUser404JSONResponse Error

func (response DeleteOrganizationsIdDeleteUser404JSONResponse) VisitDeleteOrganizationsIdDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdEditUserRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostOrganizationsIdEditUserJSONRequestBody
}

type PostOrganizationsIdEditUserResponseObject interface {
	VisitPostOrganizationsIdEditUserResponse(w http.ResponseWriter) error
}

type PostOrganizationsIdEditUser200JSONResponse struct {
	Success bool `json:"success"`
}

func (response PostOrganizationsIdEditUser200JSONResponse) VisitPostOrganizationsIdEditUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdEditUser400JSONResponse Error

func (response PostOrganizationsIdEditUser400JSONResponse) VisitPostOrganizationsIdEditUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdEditUser401JSONResponse Error

func (response PostOrganizationsIdEditUser401JSONResponse) VisitPostOrganizationsIdEditUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostOrganizationsIdEditUser404JSONResponse Error

func (response PostOrganizationsIdEditUser404JSONResponse) VisitPostOrganizationsIdEditUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresScansRequestObject struct {
	Params GetPostgresScansParams
}

type GetPostgresScansResponseObject interface {
	VisitGetPostgresScansResponse(w http.ResponseWriter) error
}

type GetPostgresScans200JSONResponse struct {
	Scans   []PostgresScan `json:"scans"`
	Success bool           `json:"success"`
}

func (response GetPostgresScans200JSONResponse) VisitGetPostgresScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresScans401JSONResponse Error

func (response GetPostgresScans401JSONResponse) VisitGetPostgresScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresScans404JSONResponse Error

func (response GetPostgresScans404JSONResponse) VisitGetPostgresScansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetPostgresIdResponseObject interface {
	VisitGetPostgresIdResponse(w http.ResponseWriter) error
}

type GetPostgresId200JSONResponse struct {
	PostgresDatabase PostgresDatabase `json:"postgres_database"`
	Success          bool             `json:"success"`
}

func (response GetPostgresId200JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresId401JSONResponse Error

func (response GetPostgresId401JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPostgresId404JSONResponse Error

func (response GetPostgresId404JSONResponse) VisitGetPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchPostgresIdJSONRequestBody
}

type PatchPostgresIdResponseObject interface {
	VisitPatchPostgresIdResponse(w http.ResponseWriter) error
}

type PatchPostgresId200JSONResponse struct {
	PostgresDatabase PostgresDatabase `json:"postgres_database"`
	Success          bool             `json:"success"`
}

func (response PatchPostgresId200JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId400JSONResponse Error

func (response PatchPostgresId400JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId401JSONResponse Error

func (response PatchPostgresId401JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchPostgresId404JSONResponse Error

func (response PatchPostgresId404JSONResponse) VisitPatchPostgresIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsRequestObject struct {
	Body *PostProjectsJSONRequestBody
}

type PostProjectsResponseObject interface {
	VisitPostProjectsResponse(w http.ResponseWriter) error
}

type PostProjects201JSONResponse struct {
	Project Project `json:"project"`
	Success bool    `json:"success"`
}

func (response PostProjects201JSONResponse) VisitPostProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProjects400JSONResponse Error

func (response PostProjects400JSONResponse) VisitPostProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjects401JSONResponse Error

func (response PostProjects401JSONResponse) VisitPostProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectsIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteProjectsIdResponseObject interface {
	VisitDeleteProjectsIdResponse(w http.ResponseWriter) error
}

type DeleteProjectsId204JSONResponse struct {
	Success bool `json:"success"`
}

func (response DeleteProjectsId204JSONResponse) VisitDeleteProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectsId401JSONResponse Error

func (response DeleteProjectsId401JSONResponse) VisitDeleteProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectsId404JSONResponse Error

func (response DeleteProjectsId404JSONResponse) VisitDeleteProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetProjectsIdResponseObject interface {
	VisitGetProjectsIdResponse(w http.ResponseWriter) error
}

type GetProjectsId200JSONResponse struct {
	PostgresDatabases []PostgresDatabase `json:"postgres_databases"`
	Project           Project            `json:"project"`
	Success           bool               `json:"success"`
}

func (response GetProjectsId200JSONResponse) VisitGetProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsId401JSONResponse Error

func (response GetProjectsId401JSONResponse) VisitGetProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsId404JSONResponse Error

func (response GetProjectsId404JSONResponse) VisitGetProjectsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcePasswordsRequestObject struct {
	Id     int64 `json:"id"`
	Params GetProjectsIdBruteforcePasswordsParams
}

type GetProjectsIdBruteforcePasswordsResponseObject interface {
	VisitGetProjectsIdBruteforcePasswordsResponse(w http.ResponseWriter) error
}

type GetProjectsIdBruteforcePasswords200JSONResponse PaginatedBruteforcePasswords

func (response GetProjectsIdBruteforcePasswords200JSONResponse) VisitGetProjectsIdBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcePasswords401JSONResponse Error

func (response GetProjectsIdBruteforcePasswords401JSONResponse) VisitGetProjectsIdBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcePasswords404JSONResponse Error

func (response GetProjectsIdBruteforcePasswords404JSONResponse) VisitGetProjectsIdBruteforcePasswordsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcedPasswordRequestObject struct {
	Id     int64 `json:"id"`
	Params GetProjectsIdBruteforcedPasswordParams
}

type GetProjectsIdBruteforcedPasswordResponseObject interface {
	VisitGetProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error
}

type GetProjectsIdBruteforcedPassword200JSONResponse struct {
	BruteforcedPassword BruteforcedPassword `json:"bruteforced_password"`
	Success             bool                `json:"success"`
}

func (response GetProjectsIdBruteforcedPassword200JSONResponse) VisitGetProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcedPassword401JSONResponse Error

func (response GetProjectsIdBruteforcedPassword401JSONResponse) VisitGetProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsIdBruteforcedPassword404JSONResponse Error

func (response GetProjectsIdBruteforcedPassword404JSONResponse) VisitGetProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdBruteforcedPasswordRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostProjectsIdBruteforcedPasswordJSONRequestBody
}

type PostProjectsIdBruteforcedPasswordResponseObject interface {
	VisitPostProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error
}

type PostProjectsIdBruteforcedPassword200JSONResponse struct {
	BruteforcedPassword *BruteforcedPassword `json:"bruteforced_password,omitempty"`
	Success             bool                 `json:"success"`
}

func (response PostProjectsIdBruteforcedPassword200JSONResponse) VisitPostProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdBruteforcedPassword400JSONResponse Error

func (response PostProjectsIdBruteforcedPassword400JSONResponse) VisitPostProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdBruteforcedPassword401JSONResponse Error

func (response PostProjectsIdBruteforcedPassword401JSONResponse) VisitPostProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdBruteforcedPassword404JSONResponse Error

func (response PostProjectsIdBruteforcedPassword404JSONResponse) VisitPostProjectsIdBruteforcedPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdRunRequestObject struct {
	Id int64 `json:"id"`
}

type PostProjectsIdRunResponseObject interface {
	VisitPostProjectsIdRunResponse(w http.ResponseWriter) error
}

type PostProjectsIdRun200JSONResponse struct {
	ScanGroup *ScanGroup `json:"scan_group,omitempty"`
	Success   bool       `json:"success"`
}

func (response PostProjectsIdRun200JSONResponse) VisitPostProjectsIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdRun400JSONResponse Error

func (response PostProjectsIdRun400JSONResponse) VisitPostProjectsIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdRun401JSONResponse Error

func (response PostProjectsIdRun401JSONResponse) VisitPostProjectsIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsIdRun404JSONResponse Error

func (response PostProjectsIdRun404JSONResponse) VisitPostProjectsIdRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScanIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetScanIdResponseObject interface {
	VisitGetScanIdResponse(w http.ResponseWriter) error
}

type GetScanId200JSONResponse struct {
	BruteforceResults []BruteforceScanResult `json:"bruteforce_results"`
	Results           []ScanResult           `json:"results"`
	Scan              Scan                   `json:"scan"`
	Success           bool                   `json:"success"`
}

func (response GetScanId200JSONResponse) VisitGetScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScanId404JSONResponse Error

func (response GetScanId404JSONResponse) VisitGetScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchScanIdJSONRequestBody
}

type PatchScanIdResponseObject interface {
	VisitPatchScanIdResponse(w http.ResponseWriter) error
}

type PatchScanId200JSONResponse struct {
	Scan    *Scan `json:"scan,omitempty"`
	Success bool  `json:"success"`
}

func (response PatchScanId200JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId400JSONResponse Error

func (response PatchScanId400JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId401JSONResponse Error

func (response PatchScanId401JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchScanId404JSONResponse Error

func (response PatchScanId404JSONResponse) VisitPatchScanIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresultsRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostScanIdBruteforceresultsJSONRequestBody
}

type PostScanIdBruteforceresultsResponseObject interface {
	VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error
}

type PostScanIdBruteforceresults200JSONResponse struct {
	Bruteforcescanresult *BruteforceScanResult `json:"bruteforcescanresult,omitempty"`
	Success              bool                  `json:"success"`
}

func (response PostScanIdBruteforceresults200JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults400JSONResponse Error

func (response PostScanIdBruteforceresults400JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults401JSONResponse Error

func (response PostScanIdBruteforceresults401JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdBruteforceresults404JSONResponse Error

func (response PostScanIdBruteforceresults404JSONResponse) VisitPostScanIdBruteforceresultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResultRequestObject struct {
	Id   int64 `json:"id"`
	Body *PostScanIdResultJSONRequestBody
}

type PostScanIdResultResponseObject interface {
	VisitPostScanIdResultResponse(w http.ResponseWriter) error
}

type PostScanIdResult200JSONResponse struct {
	Scan    *ScanResult `json:"scan,omitempty"`
	Success bool        `json:"success"`
}

func (response PostScanIdResult200JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult400JSONResponse Error

func (response PostScanIdResult400JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult401JSONResponse Error

func (response PostScanIdResult401JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScanIdResult404JSONResponse Error

func (response PostScanIdResult404JSONResponse) VisitPostScanIdResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse PaginatedUsers

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse struct {
	Success bool `json:"success"`
	User    User `json:"user"`
}

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse Error

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePasswordRequestObject struct {
	Body *PostUsersMeChangePasswordJSONRequestBody
}

type PostUsersMeChangePasswordResponseObject interface {
	VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error
}

type PostUsersMeChangePassword200JSONResponse Success

func (response PostUsersMeChangePassword200JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword400JSONResponse Error

func (response PostUsersMeChangePassword400JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersMeChangePassword401JSONResponse Error

func (response PostUsersMeChangePassword401JSONResponse) VisitPostUsersMeChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse User

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId401JSONResponse Error

func (response GetUsersId401JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId404JSONResponse Error

func (response GetUsersId404JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTaskRequestObject struct {
}

type GetWorkerGetTaskResponseObject interface {
	VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error
}

type GetWorkerGetTask200JSONResponse struct {
	Scan      Scan      `json:"scan"`
	ScanGroup ScanGroup `json:"scan_group"`
	Success   bool      `json:"success"`
}

func (response GetWorkerGetTask200JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask202JSONResponse Error

func (response GetWorkerGetTask202JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkerGetTask401JSONResponse Error

func (response GetWorkerGetTask401JSONResponse) VisitGetWorkerGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Update a bruteforced password by ID
	// (PATCH /bruteforced-passwords/{id})
	PatchBruteforcedPasswordsId(ctx context.Context, request PatchBruteforcedPasswordsIdRequestObject) (PatchBruteforcedPasswordsIdResponseObject, error)
	// Update a bruteforce scan result by ID
	// (PATCH /bruteforceresults/{id})
	PatchBruteforceresultsId(ctx context.Context, request PatchBruteforceresultsIdRequestObject) (PatchBruteforceresultsIdResponseObject, error)
	// Get all CVEs for a database type and version
	// (GET /cves/{dbType}/{version})
	GetCvesDbTypeVersion(ctx context.Context, request GetCvesDbTypeVersionRequestObject) (GetCvesDbTypeVersionResponseObject, error)
	// Get all postgres scans
	// (GET /mysql-scans)
	GetMysqlScans(ctx context.Context, request GetMysqlScansRequestObject) (GetMysqlScansResponseObject, error)
	// Get mysql database by ID
	// (GET /mysql/{id})
	GetMysqlId(ctx context.Context, request GetMysqlIdRequestObject) (GetMysqlIdResponseObject, error)
	// Update mysql database by ID
	// (PATCH /mysql/{id})
	PatchMysqlId(ctx context.Context, request PatchMysqlIdRequestObject) (PatchMysqlIdResponseObject, error)
	// Get all organizations that the user can see
	// (GET /organizations)
	GetOrganizations(ctx context.Context, request GetOrganizationsRequestObject) (GetOrganizationsResponseObject, error)
	// Create a new organization
	// (POST /organizations)
	PostOrganizations(ctx context.Context, request PostOrganizationsRequestObject) (PostOrganizationsResponseObject, error)
	// Delete organization by ID
	// (DELETE /organizations/{id})
	DeleteOrganizationsId(ctx context.Context, request DeleteOrganizationsIdRequestObject) (DeleteOrganizationsIdResponseObject, error)
	// Get organization by ID
	// (GET /organizations/{id})
	GetOrganizationsId(ctx context.Context, request GetOrganizationsIdRequestObject) (GetOrganizationsIdResponseObject, error)
	// Add a user to an organization
	// (POST /organizations/{id}/add-user)
	PostOrganizationsIdAddUser(ctx context.Context, request PostOrganizationsIdAddUserRequestObject) (PostOrganizationsIdAddUserResponseObject, error)
	// Delete a user from an organization
	// (DELETE /organizations/{id}/delete-user)
	DeleteOrganizationsIdDeleteUser(ctx context.Context, request DeleteOrganizationsIdDeleteUserRequestObject) (DeleteOrganizationsIdDeleteUserResponseObject, error)
	// Edit a user's role in an organization
	// (POST /organizations/{id}/edit-user)
	PostOrganizationsIdEditUser(ctx context.Context, request PostOrganizationsIdEditUserRequestObject) (PostOrganizationsIdEditUserResponseObject, error)
	// Get all postgres scans
	// (GET /postgres-scans)
	GetPostgresScans(ctx context.Context, request GetPostgresScansRequestObject) (GetPostgresScansResponseObject, error)
	// Get postgres database by ID
	// (GET /postgres/{id})
	GetPostgresId(ctx context.Context, request GetPostgresIdRequestObject) (GetPostgresIdResponseObject, error)
	// Update postgres database by ID
	// (PATCH /postgres/{id})
	PatchPostgresId(ctx context.Context, request PatchPostgresIdRequestObject) (PatchPostgresIdResponseObject, error)
	// Create a new project
	// (POST /projects)
	PostProjects(ctx context.Context, request PostProjectsRequestObject) (PostProjectsResponseObject, error)
	// Delete project by ID
	// (DELETE /projects/{id})
	DeleteProjectsId(ctx context.Context, request DeleteProjectsIdRequestObject) (DeleteProjectsIdResponseObject, error)
	// Get project by ID
	// (GET /projects/{id})
	GetProjectsId(ctx context.Context, request GetProjectsIdRequestObject) (GetProjectsIdResponseObject, error)
	// Get all bruteforce passwords associated with a project
	// (GET /projects/{id}/bruteforce-passwords)
	GetProjectsIdBruteforcePasswords(ctx context.Context, request GetProjectsIdBruteforcePasswordsRequestObject) (GetProjectsIdBruteforcePasswordsResponseObject, error)
	// Get bruteforced password for a project
	// (GET /projects/{id}/bruteforced-password)
	GetProjectsIdBruteforcedPassword(ctx context.Context, request GetProjectsIdBruteforcedPasswordRequestObject) (GetProjectsIdBruteforcedPasswordResponseObject, error)
	// Create a bruteforced password for a project
	// (POST /projects/{id}/bruteforced-password)
	PostProjectsIdBruteforcedPassword(ctx context.Context, request PostProjectsIdBruteforcedPasswordRequestObject) (PostProjectsIdBruteforcedPasswordResponseObject, error)
	// Run all extractors and scanners for a project
	// (POST /projects/{id}/run)
	PostProjectsIdRun(ctx context.Context, request PostProjectsIdRunRequestObject) (PostProjectsIdRunResponseObject, error)
	// Get a scan by ID
	// (GET /scan/{id})
	GetScanId(ctx context.Context, request GetScanIdRequestObject) (GetScanIdResponseObject, error)
	// Update a scan by ID
	// (PATCH /scan/{id})
	PatchScanId(ctx context.Context, request PatchScanIdRequestObject) (PatchScanIdResponseObject, error)
	// Create a new bruteforce scan result
	// (POST /scan/{id}/bruteforceresults)
	PostScanIdBruteforceresults(ctx context.Context, request PostScanIdBruteforceresultsRequestObject) (PostScanIdBruteforceresultsResponseObject, error)
	// Create a new scan result
	// (POST /scan/{id}/result)
	PostScanIdResult(ctx context.Context, request PostScanIdResultRequestObject) (PostScanIdResultResponseObject, error)
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get current logged in user
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Change password of current logged in user
	// (POST /users/me/change-password)
	PostUsersMeChangePassword(ctx context.Context, request PostUsersMeChangePasswordRequestObject) (PostUsersMeChangePasswordResponseObject, error)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Get a task for the worker
	// (GET /worker/get-task)
	GetWorkerGetTask(ctx context.Context, request GetWorkerGetTaskRequestObject) (GetWorkerGetTaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PatchBruteforcedPasswordsId operation middleware
func (sh *strictHandler) PatchBruteforcedPasswordsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchBruteforcedPasswordsIdRequestObject

	request.Id = id

	var body PatchBruteforcedPasswordsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchBruteforcedPasswordsId(ctx, request.(PatchBruteforcedPasswordsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchBruteforcedPasswordsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchBruteforcedPasswordsIdResponseObject); ok {
		if err := validResponse.VisitPatchBruteforcedPasswordsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchBruteforceresultsId operation middleware
func (sh *strictHandler) PatchBruteforceresultsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchBruteforceresultsIdRequestObject

	request.Id = id

	var body PatchBruteforceresultsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchBruteforceresultsId(ctx, request.(PatchBruteforceresultsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchBruteforceresultsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchBruteforceresultsIdResponseObject); ok {
		if err := validResponse.VisitPatchBruteforceresultsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCvesDbTypeVersion operation middleware
func (sh *strictHandler) GetCvesDbTypeVersion(w http.ResponseWriter, r *http.Request, dbType string, version string) {
	var request GetCvesDbTypeVersionRequestObject

	request.DbType = dbType
	request.Version = version

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCvesDbTypeVersion(ctx, request.(GetCvesDbTypeVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCvesDbTypeVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCvesDbTypeVersionResponseObject); ok {
		if err := validResponse.VisitGetCvesDbTypeVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMysqlScans operation middleware
func (sh *strictHandler) GetMysqlScans(w http.ResponseWriter, r *http.Request, params GetMysqlScansParams) {
	var request GetMysqlScansRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMysqlScans(ctx, request.(GetMysqlScansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMysqlScans")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMysqlScansResponseObject); ok {
		if err := validResponse.VisitGetMysqlScansResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMysqlId operation middleware
func (sh *strictHandler) GetMysqlId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetMysqlIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMysqlId(ctx, request.(GetMysqlIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMysqlId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMysqlIdResponseObject); ok {
		if err := validResponse.VisitGetMysqlIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchMysqlId operation middleware
func (sh *strictHandler) PatchMysqlId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchMysqlIdRequestObject

	request.Id = id

	var body PatchMysqlIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchMysqlId(ctx, request.(PatchMysqlIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchMysqlId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchMysqlIdResponseObject); ok {
		if err := validResponse.VisitPatchMysqlIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrganizations operation middleware
func (sh *strictHandler) GetOrganizations(w http.ResponseWriter, r *http.Request, params GetOrganizationsParams) {
	var request GetOrganizationsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganizations(ctx, request.(GetOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganizations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrganizationsResponseObject); ok {
		if err := validResponse.VisitGetOrganizationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOrganizations operation middleware
func (sh *strictHandler) PostOrganizations(w http.ResponseWriter, r *http.Request) {
	var request PostOrganizationsRequestObject

	var body PostOrganizationsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostOrganizations(ctx, request.(PostOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOrganizations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostOrganizationsResponseObject); ok {
		if err := validResponse.VisitPostOrganizationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrganizationsId operation middleware
func (sh *strictHandler) DeleteOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteOrganizationsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrganizationsId(ctx, request.(DeleteOrganizationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrganizationsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrganizationsIdResponseObject); ok {
		if err := validResponse.VisitDeleteOrganizationsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrganizationsId operation middleware
func (sh *strictHandler) GetOrganizationsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetOrganizationsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganizationsId(ctx, request.(GetOrganizationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganizationsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrganizationsIdResponseObject); ok {
		if err := validResponse.VisitGetOrganizationsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOrganizationsIdAddUser operation middleware
func (sh *strictHandler) PostOrganizationsIdAddUser(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostOrganizationsIdAddUserRequestObject

	request.Id = id

	var body PostOrganizationsIdAddUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostOrganizationsIdAddUser(ctx, request.(PostOrganizationsIdAddUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOrganizationsIdAddUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostOrganizationsIdAddUserResponseObject); ok {
		if err := validResponse.VisitPostOrganizationsIdAddUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrganizationsIdDeleteUser operation middleware
func (sh *strictHandler) DeleteOrganizationsIdDeleteUser(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteOrganizationsIdDeleteUserRequestObject

	request.Id = id

	var body DeleteOrganizationsIdDeleteUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrganizationsIdDeleteUser(ctx, request.(DeleteOrganizationsIdDeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrganizationsIdDeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrganizationsIdDeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteOrganizationsIdDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostOrganizationsIdEditUser operation middleware
func (sh *strictHandler) PostOrganizationsIdEditUser(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostOrganizationsIdEditUserRequestObject

	request.Id = id

	var body PostOrganizationsIdEditUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostOrganizationsIdEditUser(ctx, request.(PostOrganizationsIdEditUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostOrganizationsIdEditUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostOrganizationsIdEditUserResponseObject); ok {
		if err := validResponse.VisitPostOrganizationsIdEditUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostgresScans operation middleware
func (sh *strictHandler) GetPostgresScans(w http.ResponseWriter, r *http.Request, params GetPostgresScansParams) {
	var request GetPostgresScansRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostgresScans(ctx, request.(GetPostgresScansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostgresScans")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostgresScansResponseObject); ok {
		if err := validResponse.VisitGetPostgresScansResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostgresId operation middleware
func (sh *strictHandler) GetPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetPostgresIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostgresId(ctx, request.(GetPostgresIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostgresId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostgresIdResponseObject); ok {
		if err := validResponse.VisitGetPostgresIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchPostgresId operation middleware
func (sh *strictHandler) PatchPostgresId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchPostgresIdRequestObject

	request.Id = id

	var body PatchPostgresIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchPostgresId(ctx, request.(PatchPostgresIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchPostgresId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchPostgresIdResponseObject); ok {
		if err := validResponse.VisitPatchPostgresIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjects operation middleware
func (sh *strictHandler) PostProjects(w http.ResponseWriter, r *http.Request) {
	var request PostProjectsRequestObject

	var body PostProjectsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjects(ctx, request.(PostProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectsResponseObject); ok {
		if err := validResponse.VisitPostProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectsId operation middleware
func (sh *strictHandler) DeleteProjectsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteProjectsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectsId(ctx, request.(DeleteProjectsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProjectsIdResponseObject); ok {
		if err := validResponse.VisitDeleteProjectsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectsId operation middleware
func (sh *strictHandler) GetProjectsId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetProjectsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectsId(ctx, request.(GetProjectsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectsIdResponseObject); ok {
		if err := validResponse.VisitGetProjectsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectsIdBruteforcePasswords operation middleware
func (sh *strictHandler) GetProjectsIdBruteforcePasswords(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcePasswordsParams) {
	var request GetProjectsIdBruteforcePasswordsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectsIdBruteforcePasswords(ctx, request.(GetProjectsIdBruteforcePasswordsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectsIdBruteforcePasswords")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectsIdBruteforcePasswordsResponseObject); ok {
		if err := validResponse.VisitGetProjectsIdBruteforcePasswordsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectsIdBruteforcedPassword operation middleware
func (sh *strictHandler) GetProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64, params GetProjectsIdBruteforcedPasswordParams) {
	var request GetProjectsIdBruteforcedPasswordRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectsIdBruteforcedPassword(ctx, request.(GetProjectsIdBruteforcedPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectsIdBruteforcedPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectsIdBruteforcedPasswordResponseObject); ok {
		if err := validResponse.VisitGetProjectsIdBruteforcedPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectsIdBruteforcedPassword operation middleware
func (sh *strictHandler) PostProjectsIdBruteforcedPassword(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostProjectsIdBruteforcedPasswordRequestObject

	request.Id = id

	var body PostProjectsIdBruteforcedPasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectsIdBruteforcedPassword(ctx, request.(PostProjectsIdBruteforcedPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectsIdBruteforcedPassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectsIdBruteforcedPasswordResponseObject); ok {
		if err := validResponse.VisitPostProjectsIdBruteforcedPasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectsIdRun operation middleware
func (sh *strictHandler) PostProjectsIdRun(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostProjectsIdRunRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectsIdRun(ctx, request.(PostProjectsIdRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectsIdRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectsIdRunResponseObject); ok {
		if err := validResponse.VisitPostProjectsIdRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScanId operation middleware
func (sh *strictHandler) GetScanId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetScanIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetScanId(ctx, request.(GetScanIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScanId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetScanIdResponseObject); ok {
		if err := validResponse.VisitGetScanIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchScanId operation middleware
func (sh *strictHandler) PatchScanId(w http.ResponseWriter, r *http.Request, id int64) {
	var request PatchScanIdRequestObject

	request.Id = id

	var body PatchScanIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchScanId(ctx, request.(PatchScanIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchScanId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchScanIdResponseObject); ok {
		if err := validResponse.VisitPatchScanIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScanIdBruteforceresults operation middleware
func (sh *strictHandler) PostScanIdBruteforceresults(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostScanIdBruteforceresultsRequestObject

	request.Id = id

	var body PostScanIdBruteforceresultsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScanIdBruteforceresults(ctx, request.(PostScanIdBruteforceresultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScanIdBruteforceresults")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScanIdBruteforceresultsResponseObject); ok {
		if err := validResponse.VisitPostScanIdBruteforceresultsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScanIdResult operation middleware
func (sh *strictHandler) PostScanIdResult(w http.ResponseWriter, r *http.Request, id int64) {
	var request PostScanIdResultRequestObject

	request.Id = id

	var body PostScanIdResultJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostScanIdResult(ctx, request.(PostScanIdResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScanIdResult")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostScanIdResultResponseObject); ok {
		if err := validResponse.VisitPostScanIdResultResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersMeChangePassword operation middleware
func (sh *strictHandler) PostUsersMeChangePassword(w http.ResponseWriter, r *http.Request) {
	var request PostUsersMeChangePasswordRequestObject

	var body PostUsersMeChangePasswordJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersMeChangePassword(ctx, request.(PostUsersMeChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersMeChangePassword")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersMeChangePasswordResponseObject); ok {
		if err := validResponse.VisitPostUsersMeChangePasswordResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkerGetTask operation middleware
func (sh *strictHandler) GetWorkerGetTask(w http.ResponseWriter, r *http.Request) {
	var request GetWorkerGetTaskRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkerGetTask(ctx, request.(GetWorkerGetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkerGetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkerGetTaskResponseObject); ok {
		if err := validResponse.VisitGetWorkerGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/jOJL/KoTugPvHjp10z9yugQE2k/T2BdczCZJ0z+EaQUBLZZvTEqkhKbu9jXz3",
	"BUm9RcmSX3ESAwNMx5LIYrHqVw+WSj8clwUho0ClcEY/HOHOIMD6n+ee91kAv2fXfIop+ReWhFF1IeQs",
	"BC4J6NsgwMRX/5DLEJyRIyQndOo8PfUcDn9FhIPnjL7Gtz30ktvY+E9wpfPUc37lkYQJ4y7cYCEWjHvV",
	"SYj+zQPhchIaOpz7GSBCJXCKfXR1idgEyRmgcTocCpPxeg58x0HogzM67TkTxgMsnZFDqPz5vZOSpAab",
	"Alc0hTlKqrPaxnWCZe7nZl4QdUt690OBB3cuprcgIl/WcaGZ2tLMPUcyiX37c5ITqBkyEoqvAaze2OJi",
	"ck8mUyfzNO+9V7/5Myxm1qXV8cPHQj5mcvC4Ft9CzhSVtQ935JBeRIE7OZ5ZCC4QYGPdxZcPVVa582S1",
	"Vam9+PIBXV0WZPbiy4f+2fD07/3hcHhaFdtecZS6QfO/5kc/R/PIp8DxmPhELhGhWkEXMO6PsQAPBZji",
	"KQRApVHkCXZBqfEFES5DdwH2ffRrJAgFIdDtl3dnQ4Spp//1E7qMsI8+kikeE4n+OP8dfbn5Hd2ySAIX",
	"yGWR7yHs+2yBMEURxZGcAZXExRK8HuIQMAkIS4ndb8CRZIiDEtM5IAFUEEnmCl0MVBBGT5BabWk9AnkR",
	"qGdJYLYBYddVtLqMSs58gSaMo8+3n8QJOqfZbIY6+B76jEgkZ0SURh4v1RAUXEnoVE2AKcKTCbgSPOTB",
	"nLiA5gSj/7m/v0GM6//fad4ouQOhHxMhuGRC3IQAJCJN3STy07nzfFJ7k2eIxxbUZ9jTF7hmrKJqQqYR",
	"1zxRM3sgMfEVVQRPKROSuAW22YSqA5grIe8M3lqbAuaRSQxv1ak8LCGZAC2wQOoZlD6Tl2KjH6f9s3f3",
	"pz+PhsPRcPj/tlWF0dgnYgbeI5YtJ00fWWNCG8bE2l9U2xJlZfYo63Mxw3SaWt9PbDoF78pi6iksHpst",
	"I4VFnXWksKg1kD3ne5/hkPRd5sEUaB++S477Ek/1vHPsE8U8NQ6hv/yth/1whmkUaDYw31tBFfO9zjZ7",
	"A5JKW1Ogr1dkouY+ByyhnQfwrJZ+XSNfXuA6pn4rJr39Urta6/plNzvPCTUWTcIBJCjI8mPk5fe3Jbou",
	"XttEiN+nQtwL8Pdf3p31fLYA7mIBVanWlGfie2OclfoVVjYjv6ia7bRNWX2wnvdNmhSAEHhqJ03AHDiR",
	"yxY0pbf20hFt9HzwiFTB1C3z4Yo2y0SdaHPmt3U29a1WOjhnvJEZRUnU96PkssXqxT6FXYbji0hILCOR",
	"l9wJ9gWkw40Z8wHTylqyeZNplMB9YlNCFTOb4bE+bNNema9GUS6p6wPmSMJ3uSvTEHJCJRYuIXqFksnQ",
	"TuD99f0NUoMWfJ6zd+9/+nl9GlhAJAShXPZoFAAnbs8H+svPmpQ8IFbJUVcNDqUMK7DoTzajjx6DDRiU",
	"saanePVOA8/ZsAo3NiRWwvDbUvzlX2KJVURhiYc0DiQuWTW8iR98rEWpGROyU+zZHFMyLmseWz/a7Dlz",
	"4CKGkjaxejZVvL6YsDI/6uxfjqnZ3Da00ZujQLi6MelMdQtuZRGMs5sbykZFM9oWJaTBac+bHe29x0+u",
	"FSx0CIHqjH+7WCiAYAzc2BUJgf7Hf3KYOCPnPwZZ6m8Q5/0GeWZpjH1KR8Wc46X6e8dOS6YN7clO3A8L",
	"tcr4dFr2nX7AKmqxLhQUIKU1mSpj+kNJ+u4SUooiONER9KNwMRWN6FBzteFBpcCihSKZ+4qL0aP2itSV",
	"V2Q3w2lKuCoh+lIiImrWLtqhDVIxhdVOCxLXqTqkulIiJ5PU6wW1E7gju2mVuRwGG74m7t1Tz7nBU0KV",
	"KFZz6HojsO9fT5zR1xXKk4wS+8pPvfKGcn2hvTpaUvoVzXyqQHVhRXV+u8siqn/Oi0B1x6ny52y20rIU",
	"G2is59ZKHq32apOxe/FaMpps1itlyOdElZ9rU+3moG4bpTt7ppRGid3mvixPkbmPVm5Ld7bCp9zAaVzT",
	"OVzf+bMv8IYJOeUgXvMa7W4nUK8+GoAkOK5GuUbTW6QDUkjQY/WyCa3StnIfjvHLc8Yvyf48ewhTm11r",
	"Hb3ETNtn4BJP2d1baxdfWIZXocVN+nObjOMeIjBz1Fid7I8ZyJk5aYuE2aQF49+AC4SFYC5Re4QWRM4K",
	"G0iokIC9hDYPJjjyJWIU1kiw5YOaMndKehIvQxn3W5gSIYFvxfnPNk/98I/4zxOXBRuklQwNT60LOfad",
	"ESycXz17Ei7L+ndOwSUxiRGLgM1BCcU/OQvWyXFXpdMGhnY0XmEp1zT8ddAe4O8kiILHppMCE0I/TjmL",
	"wlob0dqz0BqZuhcF1UzXlrkdFfrKxNQx9qO6oZ6742XbKKHWv1jhKKTJjFYxiZYFW0zS7DXEyYwaHtSG",
	"ns0iVisrTSdNalMEi7gLNexofxRlVlY9jypJS35KKwey0Le4/H3ExDaC7q/vb/5JuJB3EiyiKZkMHwW4",
	"HGTDqUp8Q6E86e4y/W9lKiY/Sx2R+mCqhkB9qrPpoY+VKP1oHUl34DLqNTBuK3S1NzXlI6hOC/ocem3r",
	"CLZQLlAizV6i15RLMOQmMcSXLMYpkto6+GmKVF5IHjacMVojbvoSolEwBl7nIhrp+++//X14eDlZ7AWE",
	"Og9PGrPdSGHwnTJSMXaCUHt3Hkld3qJgwnEZ+0YgccBHyT0ZBTgk/ws6HWkCg8LTM8Ce5k789P/1/9A3",
	"9e/ZN7AMoggjdMJMDpVKbMLJWETUbRJw8A+xwNMp8BPCsqHvzG/o/OYK3QNWjnnE1UMzKUMxGgxyD5Vr",
	"Rp1zJDSP1dNOz/GJC9RkOuLRz0PszgCdnQwr4y4WixOsL58wPh3Ez4rBp6uLD7/ffeifnQxPZjLwtQcA",
	"PBDXkzvgc6KMqYW4gb5noHhDpJ9f2T2IfC5g5JyeDE+GOmYMgeKQOCPnnf5J6byc6T0dZGjg9RMkEIMf",
	"xHsyeU3p6u1SGqnd4CvPGZUzoymGiSsDKBwHIHWm96tNjm117oXiNi0cisZs/0xJSCrDxiAbD0ofP63S",
	"26cH8zgI+SvzlokEgcnD4zD0iasXOPhTGCDLBm90FWvxXEtrdfG2JaMYBMsrNKn+kCmBUYScDYedCC8i",
	"aW7mQq1hu0MQL38KknOjWh8USCy+WXC/yqW7rMQ3FTs16fuOq29al6khskx+RbWlR2MlJHrS091P+lmX",
	"djNO/gWemfT97idVUQKiTKIJi6jn5EFf620er78+KP0RURBgvlQEa6lH2C7N46UxrMZ3+hqPZOxKDnDi",
	"s5uOYBM/tT7SIDPCy4KZ+rOoGphREVK80n2ji5qap+FnO3TJL+gIL0d4qcBLQaAbAcadgxj88Mb3yxCe",
	"Bj9if0gjzNSE10V8+QjyYg7iUj+QRDgtsCU570Ba4qxoYohoRJSKo9441TwlzzJbdrH9dA9bxQDF+tZp",
	"r4svH5zmqoX2NQhq3s10/7Wq4WVeShHjiQitq5ofQSLs++jiywfzZhguKoJ+gSuTxERD3TnE6hksxV9+",
	"P82Q1qlkWnYp2uiiBoerSyQZmhBfAlekJVryVwR8mQtRXUy3YeS3pjXdssVZPeqWlKcuj3zUntVGrJAS",
	"qVOVMM6eoaQaMVEK9TdN7ZZWjNQZbtSLrs6vHjrV0116vltTCk3yo5crKlmpFGkFypqKUJryqBG2SZNU",
	"cIb6m6hHUTArfp2+rM9lm2LDA1eJHQWDJZG3R4El/u4lEHzpmnuMAg8SLuKYsCViKIOaLwZq9DWvCze2",
	"gJHCazT6QKaN4xkftuwrGKssv/O7M9vyMIuUvDC7upbLV1gxkjMs07NApFxKAZAT2kJtnrZ2ccFrydgx",
	"URHVXZgXyzvfNealoAetjcvploS6qyhvKrpHu9Ji0k7qYiQNYd1yo1ShWqMcFWBPIyYPfDA1qkW1udS/",
	"FxSnq7NYIm0/0dP7TVIKnUW9jWyLNxftXBcM/ZqeixHAIliW/ZaKCWjlq7wIOR6+Zrg/qsTasX8XfbCj",
	"/gB7Xj9Kqsba+UxXXtwS8jA1Z/venL0DZo1Dpx3UvWQJ9m2hjlH9oWHAuechbCTONAfcxAEcGO8vRYNO",
	"zqD58S2BQsNrLkdkOCLDYTjMMThMOAs2hgfwiOzuKiQdz94KLDR0eDvCwhEWnhkWlHTGoPBfwjS9IbQb",
	"MiRH8avrT/KvzR9LUErnj/mWAscqlFdVhZLctrIQJRGCrjmosHwi+CISUQnVrc+1K21R1tSL6sRHHdl9",
	"XUpFSCsJquSOldUpL0JPdlSjUlUCuxdZZfdeXMpXo9RHX/WQS1Y6gYm2wblOmfWx6k3W5nJ3VQBpT9Ia",
	"xY0b+uzl7D/MGki1bKO6lm7Gjx81csu1MYXD/qzxVaoDCd8LKtDydD/Rhc5GNiXjrZ7pv0FPMcasDbOT",
	"CfRVsDyV4/pD/Jcirlt1rrrnF/JuVjnHsF9j0LMt56heu1AvHX6t1K2Kjci9V571sWjMX6Q6aOs7fUBq",
	"aX0jVH/qK6NAqVX8/beI05qso+7+k/Am6SGW0BH3YHRG/VIXnHdnTs8JCCVBFJir7ShMuwGkCdEasnJ9",
	"P3ZXGt2qy7RNEI46rVacfIUv3dQN3x61fN+02jEUW7zEwpvedQCQdbLpCgBZk5NDB4AZFrOVqhV/AWzD",
	"t8+TRlErp8t1lHquN9CfuceNdfqjn7Dt/hAKRqydZ8wL6Q2w0WuRUDl4QHjYZcbn2Mrq2GvmLWFJmpZa",
	"D1CqfgiPaLvE7ZV3G9HXmwDIejW3aYBsejZvUDxw1MfXkwO4jagOE3QLXlcyLnRbmbhSQdRqZbGUQf21",
	"soxByV7XNFxcvnP4Kphr9bv+16+KrdnKebiu4zaPJuK2+G3apa8NFBnRPRuHNsORF1EOZIrVytm1THua",
	"KxoOUWV2VMBgZK2hw+J+Sl93rBVHd/YVtk60qnjBbU3tY7Una7MDawCg0pL1tSNCOT4+NmE9IslbCIwp",
	"LGoasa5GlkwEV8HJbTLiG8CQA0SOtj7GER+O+GDBhxagkH7Guy4U/5x8v3sVAGQfWNEh5+qDbxIQaT/t",
	"Ph3aTrvNh8fU1WHu7Lv10TebTATI9vSZ++0EDptO44dtKVrnCK/jKaH5GM+q8ZMvzTzzSb8RtcNvPFY5",
	"OE++cZ9omH6lNadfA/PtoEYV+80c0O7jzUzzlaF2n9urNRpmjS+rGUtl89yIc6AS+Ww6BQ8Rmn6wqn4n",
	"B+4M0ykUqhnq3ah4by/0M7ljy524MYVJPuk1XTW/JCxZ+nFSyU627s00+i2xKB3f/22WU7OruaPcyRpi",
	"uyrhrsW0a/owkSAOkhOYH+o7gy1A7lj5ob/zV3Y6C1ipd7ucusoJmnErB1OQfR1QNEib+Z7cR5D36sbn",
	"y8ru+Sy0MOMm8dbZ8Gz3AvE7Q2ofEZ5j4uOxDwfyOsvKSkZD9oTx3JfPreHPqiOannUy4PMEHLNvCo4G",
	"A5+52J8xIUc/DYfDAQ7JYH7qPD08/TsAAP//dGRQcAmfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
