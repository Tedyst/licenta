openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Test
  description: A sample API
  termsOfService: https://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: https://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:5000/api/v1
paths:
  /login:
    post:
      summary: Logs user into the system
      tags:
        - auth
      requestBody:
        description: The user to login into.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                required:
                  - success
                  - user
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /logout:
    post:
      summary: Logs out current logged in user session
      tags:
        - auth
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /register:
    post:
      summary: Creates a new user
      tags:
        - auth
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - user
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        "400":
          description: Invalid field supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /2fa/totp-first-step:
    post:
      summary: First step of the TOTP authentication process
      tags:
        - security
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOTPFirstStep'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /2fa/totp-second-step:
    post:
      summary: Second step of the TOTP authentication process
      tags:
        - security
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TOTPSecondStep'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "400":
          description: Invalid field supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me/change-password:
    post:
      summary: Change password of current logged in user
      tags:
        - user
      requestBody:
        description: The user to login into.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordLoggedIn'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      summary: Get current logged in user
      tags:
        - user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - user
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Get all users
      tags:
        - user
      parameters:
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: The offset of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: username
          in: query
          description: The username to filter
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: The email to filter
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /worker/get-task:
    get:
      summary: Get a task for the worker
      security:
        - workerAuth: []
      tags:
        - worker
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  task:
                    $ref: '#/components/schemas/WorkerTask'
        "204":
          description: No task available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /project/{projectid}/bruteforce-passwords:
    get:
      summary: Get all bruteforce passwords associated with a project
      security:
        - workerAuth: []
        - sessionAuth: []
      tags:
        - worker
      parameters:
        - name: projectid
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: last_id
          in: query
          description: The last ID of the item to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: -1
            default: -1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBruteforcePasswords'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /project/{projectid}/scanner/postgres:
    post:
      summary: Create a new postgres scan
      security:
        - workerAuth: []
        - sessionAuth: []
      tags:
        - worker
      parameters:
        - name: projectid
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/PostgresScan'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /project/{projectid}/scanner/postgres/{scanid}:
    get:
      summary: Get the postgres scan associated with a project
      security:
        - workerAuth: []
        - sessionAuth: []
      tags:
        - worker
      parameters:
        - name: projectid
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: scanid
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/PostgresScan'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update the postgres scan associated with a project
      security:
        - workerAuth: []
        - sessionAuth: []
      tags:
        - worker
      parameters:
        - name: projectid
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: scanid
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPostgresScan'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/PostgresScan'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /project/{projectid}/scanner/postgres/{scanid}/result:
    post:
      summary: Create a new postgres scan result
      security:
        - workerAuth: []
        - sessionAuth: []
      tags:
        - worker
      parameters:
        - name: projectid
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: scanid
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan result object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresScanResult'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/PostgresScanResult'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    PostgresDatabase:
      type: object
      required:
        - id
        - project_id
        - host
        - port
        - database_name
        - username
        - password
        - created_at
        - remote
      properties:
        id: 
          type: integer
        project_id:
          type: integer
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
        created_at: 
          type: string
        remote:
          type: boolean
    PatchPostgresScan:
      type: object
      required:
        - status
        - error
        - ended_at
      properties:
        status:
          type: integer
        error:
          type: string
        ended_at:
          type: string
    CreatePostgresScanResult:
      type: object
      required:
        - severity
        - message
      properties:
        severity:
          type: integer
        message:
          type: string
    PostgresScanResult:
      type: object
      required:
        - id
        - postgres_scan_id
        - severity
        - message
        - created_at
      properties:
        id:
          type: integer
        postgres_scan_id:
          type: integer
        severity:
          type: integer
        message:
          type: string
        created_at:
          type: string
    PostgresScan:
      required:
        - id
        - postgres_database_id
        - status
        - created_at
        - ended_at
        - error
      type: object
      properties:
        id:
          type: integer
        postgres_database_id:
          type: integer
        status:
          type: integer
        error:
          type: string
        created_at:
          type: string
        ended_at:
          type: string
    WorkerTask:
      required:
        - type
      properties:
        type:
          type: string
          description: The Task type
          enum: [postgres_scan]
        postgres_scan:
          type: object
          properties:
            scan:
              $ref: "#/components/schemas/PostgresScan"
            postgres_database:
              $ref: "#/components/schemas/PostgresDatabase"
    LoginUser:
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The user name for login
          example: john_doe
          x-oapi-codegen-extra-tags:
            validate: "printascii,min=3,max=20"
        password:
          type: string
          description: The password for login in clear text
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,printascii"
        totp:
          type: string
          description: The TOTP code
          example: 123456
          x-oapi-codegen-extra-tags:
            validate: "omitempty,numeric,len=6"
    RegisterUser:
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          description: The user name for login
          example: john_doe
          x-oapi-codegen-extra-tags:
            validate: "alphanum,min=3,max=20"
        password:
          type: string
          description: The password for login in clear text
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
        email:
          type: string
          description: The email of the user
          example: user@example.com
          x-oapi-codegen-extra-tags:
            validate: "email"
    User:
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          description: The user ID
          example: 1
        username:
          type: string
          description: The user name for login
          example: john_doe
        firstName:
          type: string
          description: The first name of the user
          example: John
        lastName:
          type: string
          description: The last name of the user
          example: Doe
        email:
          type: string
          description: The email of the user
          example:
        phone:
          type: string
          description: The phone number of the user
          example:
    ChangePasswordLoggedIn:
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          description: The old password
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
        new_password:
          type: string
          description: The new password
          example: mynewpassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
    TOTPLogin:
      type: object
      required:
        - totp_code
      properties:
        totp_code:
          type: string
          description: The TOTP code
          example: 123456
    TOTPFirstStep:
      type: object
      required:
        - totp_secret
      properties:
        totp_secret:
          type: string
          description: The TOTP secret
          example: ASDASDASDASD
    TOTPSecondStep:
      type: object
      required:
        - totp_code
      properties:
        totp_code:
          type: string
          description: The TOTP code
          example: 123456
          x-oapi-codegen-extra-tags:
            validate: "numeric,len=6"
    Success:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: The success status
          example: true
    PaginatedResult:
      required:
        - success
        - count
        - results
      type: object
      properties:
        success:
          type: boolean
          description: The success status
          example: true
        count:
          type: integer
          example: 1
        next:
          type: string
        results: 
          type: array
          items: {}
    PaginatedBruteforcePasswords:
      allOf:
        - $ref: "#/components/schemas/PaginatedResult"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/BruteforcePassword"
    BruteforcePassword:
      required:
        - id
        - password
      properties:
        id:
          type: integer
          format: int64
          description: The internal ID of the bruteforce password
          example: 1
        password:
          type: string
          description: The password
          example: mypassword
    PaginatedUsers:
      allOf:
        - $ref: "#/components/schemas/PaginatedResult"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/User"
    Error:
      required:
        - message
        - success
      properties:
        success:
          type: boolean
          description: The success status
          example: false
        message:
          type: string
          description: Error message
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session
    workerAuth:
      type: apiKey
      in: header
      name: X-Worker-Token
security:
  - sessionAuth: []
  - workerAuth: []