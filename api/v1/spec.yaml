openapi: "3.0.0"
info:
  version: 1.0.0
  title: Licenta API
  description: API for the licenta project
  contact:
    name: Stoica Tedy
    email: stoicatedy@gmail.com
    url: https://tedyst.ro
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:5000/api/v1
paths:
  /users/me/change-password:
    post:
      summary: Change password of current logged in user
      tags:
        - user
      requestBody:
        description: The user to login into.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordLoggedIn'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      summary: Get current logged in user
      tags:
        - user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - user
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Get all users
      tags:
        - user
      parameters:
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: The offset of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: username
          in: query
          description: The username to filter
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: The email to filter
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /worker/get-task:
    get:
      summary: Get a task for the worker
      security:
        - workerAuth: []
      tags:
        - worker
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scan
                  - scan_group
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/Scan'
                  scan_group:
                    $ref: '#/components/schemas/ScanGroup'
        "202":
          description: No task available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docker:
    get:
      summary: Get all docker images for a project
      security:
        - sessionAuth: []
      tags:
        - docker
      parameters:
        - name: project
          in: query
          description: The project to filter for
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - images
                properties:
                  success:
                    type: boolean
                  images:
                    type: array
                    items:
                      $ref: '#/components/schemas/DockerImage'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new docker container
      security:
        - sessionAuth: []
      tags:
        - docker
      requestBody:
        description: The docker image object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDockerImage'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - image
                properties:
                  success:
                    type: boolean
                  image:
                    $ref: '#/components/schemas/DockerImage'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docker/{id}:
    get:
      summary: Get docker image by ID
      security:
        - sessionAuth: []
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: The ID of the docker image
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - image
                  - layers
                properties:
                  success:
                    type: boolean
                  image:
                    $ref: '#/components/schemas/DockerImage'
                  layers:
                    type: array
                    items:
                      $ref: '#/components/schemas/DockerLayer'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Docker image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update docker image by ID
      security:
        - sessionAuth: []
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: The ID of the docker image
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The docker image object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDockerImage'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - image
                properties:
                  success:
                    type: boolean
                  image:
                    $ref: '#/components/schemas/DockerImage'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Docker image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete docker image by ID
      security:
        - sessionAuth: []
      tags:
        - docker
      parameters:
        - name: id
          in: path
          description: The ID of the docker image
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Docker image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /git:
    get:
      summary: Get all git repositories for a project
      security:
        - sessionAuth: []
      tags:
        - git
      parameters:
        - name: project
          in: query
          description: The project to filter for
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - git_repositories
                properties:
                  success:
                    type: boolean
                  git_repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Git'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new git repository for a project
      security:
        - sessionAuth: []
      tags:
        - git
      requestBody:
        description: The git object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGit'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - git
                properties:
                  success:
                    type: boolean
                  git:
                    $ref: '#/components/schemas/Git'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /git/{id}:
    get:
      summary: Get git repository by ID
      security:
        - sessionAuth: []
      tags:
        - git
      parameters:
        - name: id
          in: path
          description: The ID of the git repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - git
                  - commits
                properties:
                  success:
                    type: boolean
                  git:
                    $ref: '#/components/schemas/Git'
                  commits:
                    type: array
                    items:
                      $ref: '#/components/schemas/GitCommit'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Git repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a git repository by ID
      security:
        - sessionAuth: []
      tags:
        - git
      parameters:
        - name: id
          in: path
          description: The ID of the git repository
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The git object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchGit'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - git
                properties:
                  success:
                    type: boolean
                  git:
                    $ref: '#/components/schemas/Git'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Git repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete git repository by ID
      security:
        - sessionAuth: []
      tags:
        - git
      parameters:
        - name: id
          in: path
          description: The ID of the git repository
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Git repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    post:
      summary: Create a new project
      security:
        - sessionAuth: []
      tags:
        - project
      requestBody:
        description: The project object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - project
                properties:
                  success:
                    type: boolean
                  project:
                    $ref: '#/components/schemas/Project'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/bruteforce-passwords:
    get:
      summary: Get all bruteforce passwords associated with a project
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: last_password_id
          in: query
          description: The last ID of the item to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: -1
            default: -1
        - name: password
          in: query
          description: The password to filter
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBruteforcePasswords'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Specific password not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scan-groups:
    get:
      summary: Get all scan groups
      security:
        - sessionAuth: []
      tags:
        - scanner
      parameters:
        - name: project
          in: query
          description: The project to filter for
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scan_groups
                properties:
                  success:
                    type: boolean
                  scan_groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScanGroup'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scan/{id}:
    get:
      summary: Get a scan by ID
      security:
        - sessionAuth: []
      tags:
        - scanner
      parameters:
        - name: id
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scan
                  - results
                  - bruteforce_results
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/Scan'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScanResult'
                  bruteforce_results:
                    type: array
                    items:
                      $ref: '#/components/schemas/BruteforceScanResult'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a scan by ID
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchScan'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/Scan'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scan/{id}/result:
    post:
      summary: Create a new scan result
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan result object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScanResult'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  scan:
                    $ref: '#/components/schemas/ScanResult'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /scan/{id}/bruteforceresults:
    post:
      summary: Create a new bruteforce scan result
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the scan
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan result object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBruteforceScanResult'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  bruteforcescanresult:
                    $ref: '#/components/schemas/BruteforceScanResult'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /postgres-scans:
    get:
      summary: Get all postgres scans
      security:
        - sessionAuth: []
      tags:
        - scanner
      parameters:
        - name: scan
          in: query
          description: The scan ID to filter for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scans
                properties:
                  success:
                    type: boolean
                  scans:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostgresScan'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mysql-scans:
    get:
      summary: Get all postgres scans
      security:
        - sessionAuth: []
      tags:
        - scanner
      parameters:
        - name: scan
          in: query
          description: The scan ID to filter for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scans
                properties:
                  success:
                    type: boolean
                  scans:
                    type: array
                    items:
                      $ref: '#/components/schemas/MysqlScan'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bruteforceresults/{id}:
    patch:
      summary: Update a bruteforce scan result by ID
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the bruteforce result
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The scan result object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBruteforceScanResult'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  bruteforcescanresult:
                    $ref: '#/components/schemas/BruteforceScanResult'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cves/{dbType}/{version}:
    get:
      summary: Get all CVEs for a database type and version
      security:
        - workerAuth: []
      tags:
        - cve
      parameters:
        - name: dbType
          in: path
          description: The database type
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: The database version
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - cves
                properties:
                  success:
                    type: boolean
                  cves:
                    type: array
                    items:
                      $ref: '#/components/schemas/CVE'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Database type or version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/run:
    post:
      summary: Run all extractors and scanners for a project
      security:
        - sessionAuth: []
      tags:
        - scanner
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - scan
                properties:
                  success:
                    type: boolean
                  scan_group:
                    $ref: '#/components/schemas/ScanGroup'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}:
    get:
      summary: Get project by ID
      security:
        - sessionAuth: []
      tags:
        - project
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - project
                properties:
                  success:
                    type: boolean
                  project:
                    $ref: '#/components/schemas/Project'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete project by ID
      security:
        - sessionAuth: []
      tags:
        - project
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/bruteforced-password:
    get:
      summary: Get bruteforced password for a project
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: hash
          in: query
          description: The hash to filter
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: The username to filter
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - bruteforced_password
                properties:
                  success:
                    type: boolean
                  bruteforced_password:
                    $ref: '#/components/schemas/BruteforcedPassword'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a bruteforced password for a project
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The bruteforced password object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBruteforcedPassword'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  bruteforced_password:
                    $ref: '#/components/schemas/BruteforcedPassword'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bruteforced-passwords/{id}:
    patch:
      summary: Update a bruteforced password by ID
      security:
        - workerAuth: []
      tags:
        - worker
      parameters:
        - name: id
          in: path
          description: The ID of the bruteforced password
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The bruteforced password object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBruteforcedPassword'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - task
                properties:
                  success:
                    type: boolean
                  bruteforced_password:
                    $ref: '#/components/schemas/BruteforcedPassword'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Scan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /postgres:
    get:
      summary: Get all postgres databases for a project
      security:
        - sessionAuth: []
      tags:
        - postgres
      parameters:
        - name: project
          in: query
          description: The projects to filter for
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - postgres_databases
                properties:
                  success:
                    type: boolean
                  postgres_databases:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostgresDatabase'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new postgres database
      security:
        - sessionAuth: []
      tags:
        - postgres
      requestBody:
        description: The postgres database object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostgresDatabase'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - postgres_database
                properties:
                  success:
                    type: boolean
                  postgres_database:
                    $ref: '#/components/schemas/PostgresDatabase'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /postgres/{id}:
    get:
      summary: Get postgres database by ID
      security:
        - sessionAuth: []
      tags:
        - postgres
      parameters:
        - name: id
          in: path
          description: The ID of the postgres database
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - postgres_database
                properties:
                  success:
                    type: boolean
                  postgres_database:
                    $ref: '#/components/schemas/PostgresDatabase'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update postgres database by ID
      security:
        - sessionAuth: []
      tags:
        - postgres
      parameters:
        - name: id
          in: path
          description: The ID of the postgres database
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The postgres database object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPostgresDatabase'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - postgres_database
                properties:
                  success:
                    type: boolean
                  postgres_database:
                    $ref: '#/components/schemas/PostgresDatabase'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete postgres database by ID
      security:
        - sessionAuth: []
      tags:
        - postgres
      parameters:
        - name: id
          in: path
          description: The ID of the postgres database
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mysql:
    get:
      summary: Get all mysql databases for a project
      security:
        - sessionAuth: []
      tags:
        - mysql
      parameters:
        - name: project
          in: query
          description: The projects to filter for
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - mysql_databases
                properties:
                  success:
                    type: boolean
                  mysql_databases:
                    type: array
                    items:
                      $ref: '#/components/schemas/MysqlDatabase'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new mysql database
      security:
        - sessionAuth: []
      tags:
        - mysql
      requestBody:
        description: The mysql database object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMysqlDatabase'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - mysql_database
                properties:
                  success:
                    type: boolean
                  mysql_database:
                    $ref: '#/components/schemas/MysqlDatabase'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /mysql/{id}:
    get:
      summary: Get mysql database by ID
      security:
        - sessionAuth: []
      tags:
        - mysql
      parameters:
        - name: id
          in: path
          description: The ID of the mysql database
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - mysql_database
                properties:
                  success:
                    type: boolean
                  mysql_database:
                    $ref: '#/components/schemas/MysqlDatabase'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update mysql database by ID
      security:
        - sessionAuth: []
      tags:
        - mysql
      parameters:
        - name: id
          in: path
          description: The ID of the mysql database
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The mysql database object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMysqlDatabase'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - mysql_database
                properties:
                  success:
                    type: boolean
                  mysql_database:
                    $ref: '#/components/schemas/MysqlDatabase'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete mysql database by ID
      security:
        - sessionAuth: []
      tags:
        - mysql
      parameters:
        - name: id
          in: path
          description: The ID of the mysql database
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Postgres database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations:
    get:
      summary: Get all organizations that the user can see
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: name
          in: query
          description: The organization name to filter for
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - organizations
                properties:
                  success:
                    type: boolean
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new organization
      security:
        - sessionAuth: []
      tags:
        - organization
      requestBody:
        description: The organization object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganization'
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - organization
                properties:
                  success:
                    type: boolean
                  organization:
                    $ref: '#/components/schemas/Organization'
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}:
    get:
      summary: Get organization by ID
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: The ID of the organization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - organization
                properties:
                  success:
                    type: boolean
                  organization:
                    $ref: '#/components/schemas/Organization'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete organization by ID
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: The ID of the organization
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}/add-user:
    post:
      summary: Add a user to an organization
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: The ID of the organization
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToOrganization'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}/edit-user:
    post:
      summary: Edit a user's role in an organization
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: The ID of the organization
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRoleInOrganization'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{id}/delete-user:
    delete:
      summary: Delete a user from an organization
      security:
        - sessionAuth: []
      tags:
        - organization
      parameters:
        - name: id
          in: path
          description: The ID of the organization
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveUserFromOrganization'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    EditUserRoleInOrganization:
      type: object
      required:
        - id
        - role
      properties:
        id:
          type: integer
        role:
          type: string
    AddUserToOrganization:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    RemoveUserFromOrganization:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
    CreateProject:
      type: object
      required:
        - name
        - organization_id
      properties:
        name:
          type: string
        organization_id:
          type: integer
    Project:
      required:
        - id
        - name
        - organization_id
        - created_at
        - remote
        - scans
      properties:
        id:
          type: integer
          format: int64
          description: The internal ID of the project
          example: 1
        name:
          type: string
          description: The name of the project
          example: My Project
        organization_id:
          type: integer
          format: int64
          description: The internal ID of the organization
          example: 1
        created_at:
          type: string
          description: The date the project was created
          example: 2019-01-23T16:00:00Z
        remote:
          type: boolean
          description: Whether to use the workers associated with the project instead of the default ones
          example: false
        scans:
          type: integer
          description: The number of scans that have been run on the project
          example: 0
    CVE:
      required:
        - id
        - cve_id
        - description
        - published_at
        - last_modified
      properties:
        id:
          type: integer
          format: int64
          description: The internal ID of the CVE
          example: 1
        cve_id:
          type: string
          description: The CVE ID
          example: CVE-2019-0001
        description:
          type: string
          description: The CVE description
          example: A vulnerability in the web-based management interface of Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN Routers could allow an unauthenticated, remote attacker to retrieve sensitive information. The vulnerability is due to improper access controls for URLs. An attacker could exploit this vulnerability by connecting to an affected device via HTTP or HTTPS and requesting specific URLs. A successful exploit could allow the attacker to download the router configuration or detailed diagnostic information.
        published_at:
          type: string
          description: The date the CVE was published
          example: 2019-01-23T16:00:00Z
        last_modified:
          type: string
          description: The date the CVE was last modified
          example: 2019-01-23T16:00:00Z
    PatchPostgresDatabase:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
        version:
          type: string
    PatchMysqlDatabase:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
        version:
          type: string
    CreatePostgresDatabase:
      type: object
      required:
        - project_id
        - host
        - port
        - database_name
        - username
        - password
      properties:
        project_id:
          type: integer
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
    PostgresDatabase:
      type: object
      required:
        - id
        - project_id
        - host
        - port
        - database_name
        - username
        - password
        - created_at
        - version
      properties:
        id: 
          type: integer
        project_id:
          type: integer
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
        created_at: 
          type: string
        version:
          type: string
    CreateMysqlDatabase:
      type: object
      required:
        - project_id
        - host
        - port
        - database_name
        - username
        - password
      properties:
        project_id:
          type: integer
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
    MysqlDatabase:
      type: object
      required:
        - id
        - project_id
        - host
        - port
        - database_name
        - username
        - password
        - created_at
        - version
      properties:
        id: 
          type: integer
        project_id:
          type: integer
        host:
          type: string
        port:
          type: integer
        database_name:
          type: string
        username:
          type: string
        password:
          type: string
        created_at: 
          type: string
        version:
          type: string
    PatchScan:
      type: object
      required:
        - status
        - error
        - ended_at
      properties:
        status:
          type: integer
        error:
          type: string
        ended_at:
          type: string
    CreateScanResult:
      type: object
      required:
        - severity
        - message
      properties:
        severity:
          type: integer
        message:
          type: string
    BruteforcedPassword:
      type: object
      required:
        - id
        - hash
        - username
        - password
        - last_bruteforce_id
        - project_id
      properties:
        id:
          type: integer
        hash:
          type: string
        username:
          type: string
        password:
          type: string
        last_bruteforce_id:
          type: integer
        project_id:
          type: integer
    CreateBruteforcedPassword:
      type: object
      required:
        - hash
        - username
        - password
        - last_bruteforce_id
      properties:
        hash:
          type: string
        username:
          type: string
        password:
          type: string
        last_bruteforce_id:
          type: integer
    UpdateBruteforcedPassword:
      type: object
      required:
        - last_bruteforce_id
        - password
      properties:
        last_bruteforce_id:
          type: integer
        password:
          type: string
    BruteforceScanResult:
      type: object
      required:
        - id
        - password
        - username
        - total
        - tried
      properties:
        id:
          type: integer
        password:
          type: string
        username:
          type: string
        total:
          type: integer
        tried:
          type: integer
    CreateBruteforceScanResult:
      type: object
      required:
        - password
        - username
        - total
        - tried
      properties:
        password:
          type: string
        username:
          type: string
        total:
          type: integer
        tried:
          type: integer
    PatchBruteforceScanResult:
      type: object
      required:
        - tried
        - total
        - password
      properties:
        tried:
          type: integer
        total:
          type: integer
        password:
          type: string
    UpdatePostgresVersion:
      type: object
      required:
        - version
      properties:
        version:
          type: string
    ScanResult:
      type: object
      required:
        - id
        - severity
        - message
        - created_at
        - scan_source
      properties:
        id:
          type: integer
        severity:
          type: integer
        message:
          type: string
        created_at:
          type: string
        scan_source:
          type: integer
    ScanGroup:
      required:
        - id
        - project_id
        - scans
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        created_by:
          $ref: "#/components/schemas/User"
        scans:
          type: array
          items:
            $ref: "#/components/schemas/Scan"
    Scan:
      required:
        - id
        - status
        - created_at
        - ended_at
        - error
        - maximum_severity
        - scan_group_id
        - scan_type
      type: object
      properties:
        id:
          type: integer
        status:
          type: integer
        error:
          type: string
        created_at:
          type: string
        ended_at:
          type: string
        maximum_severity:
          type: integer
        scan_group_id:
          type: integer
        scan_type:
          type: integer
    DockerImage:
      required:
        - id
        - project_id
        - docker_image
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        docker_image:
          type: string
        username:
          type: string
        password:
          type: string
        min_probability:
          type: number
        probability_increase_multiplier:
          type: number
        probability_decrease_multiplier:
          type: number
        entropy_threshold:
          type: number
        logistic_growth_rate:
          type: number
    CreateDockerImage:
      required:
        - project_id
        - docker_image
      type: object
      properties:
        project_id:
          type: integer
        docker_image:
          type: string
        username:
          type: string
        password:
          type: string
    PatchDockerImage:
      type: object
      properties:
        docker_image:
          type: string
        username:
          type: string
        password:
          type: string
        min_probability:
          type: number
        probability_increase_multiplier:
          type: number
        probability_decrease_multiplier:
          type: number
        entropy_threshold:
          type: number
        logistic_growth_rate:
          type: number
    DockerScan:
      required:
        - id
        - project_id
        - image
        - finished
        - scanned_layers
        - layers_to_scan
        - created_at
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        image:
          type: string
        finished:
          type: boolean
        scanned_layers:
          type: integer
        layers_to_scan:
          type: integer
        created_at:
          type: string
    DockerLayer:
      required:
        - id
        - image_id
        - layer_hash
        - scanned_at
        - results
      type: object
      properties:
        id:
          type: integer
        image_id:
          type: integer
        layer_hash:
          type: string
        scanned_at:
          type: string
        results:
          type: array
          items:
            $ref: "#/components/schemas/DockerLayerResult"
    DockerLayerResult:
      required:
        - id
        - project_id
        - layer
        - name
        - line
        - line_number
        - previous_lines
        - match
        - probability
        - username
        - password
        - filename
        - created_at
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        layer:
          type: integer
        name:
          type: string
        line:
          type: string
        line_number:
          type: integer
        previous_lines:
          type: string
        match:
          type: string
        probability:
          type: number
        username:
          type: string
        password:
          type: string
        filename:
          type: string
        created_at:
          type: string
    GitCommit:
      required:
        - id
        - repository_id
        - commit_hash
        - created_at
        - results
      type: object
      properties:
        id:
          type: integer
        repository_id:
          type: integer
        commit_hash:
          type: string
        created_at:
          type: string
        results:
          type: array
          items:
            $ref: "#/components/schemas/GitResult"
        author:
          type: string
        author_email:
          type: string
        commit_date:
          type: string
        description:
          type: string
    GitResult:
      required:
        - id
        - commit
        - name
        - line
        - line_number
        - match
        - probability
        - username
        - password
        - filename
      type: object
      properties:
        id:
          type: integer
        commit:
          type: integer
        name:
          type: string
        line:
          type: string
        line_number:
          type: integer
        match:
          type: string
        probability:
          type: number
        username:
          type: string
        password:
          type: string
        filename:
          type: string
    Git:
      required:
        - id
        - project_id
        - git_repository
        - username
        - password
        - has_ssh
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        git_repository:
          type: string
        username:
          type: string
        password:
          type: string
        has_ssh:
          type: boolean
    PatchGit:
      type: object
      properties:
        git_repository:
          type: string
        username:
          type: string
        password:
          type: string
        private_key:
          type: string
    CreateGit:
      required:
        - project_id
        - git_repository
      type: object
      properties:
        project_id:
          type: integer
        git_repository:
          type: string
        username:
          type: string
        password:
          type: string
        private_key:
          type: string
    PostgresScan:
      required:
        - id
        - database_id
      type: object
      properties:
        id:
          type: integer
        database_id:
          type: integer
    MysqlScan:
      required:
        - id
        - database_id
      type: object
      properties:
        id:
          type: integer
        database_id:
          type: integer
    LoginUser:
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The user name for login
          example: john_doe
          x-oapi-codegen-extra-tags:
            validate: "printascii,min=3,max=20"
        password:
          type: string
          description: The password for login in clear text
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,printascii"
        totp:
          type: string
          description: The TOTP code
          example: 123456
          x-oapi-codegen-extra-tags:
            validate: "omitempty,numeric,len=6"
    RegisterUser:
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          description: The user name for login
          example: john_doe
          x-oapi-codegen-extra-tags:
            validate: "alphanum,min=3,max=20"
        password:
          type: string
          description: The password for login in clear text
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
        email:
          type: string
          description: The email of the user
          example: user@example.com
          x-oapi-codegen-extra-tags:
            validate: "email"
    User:
      required:
        - id
        - username
        - email
        - admin
      properties:
        id:
          type: integer
          format: int64
          description: The user ID
          example: 1
        username:
          type: string
          description: The user name for login
          example: john_doe
        email:
          type: string
          description: The email of the user
          example:
        phone:
          type: string
          description: The phone number of the user
          example: +1234567890
    CreateOrganization:
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the organization
          example: My Organization
          x-oapi-codegen-extra-tags:
            validate: "min=4,alphanum,max=32,lowercase"
    OrganizationStats:
      required:
        - users
        - projects
        - scans
      properties:
        users:
          type: integer
        projects:
          type: integer
        scans:
          type: integer
    Organization:
      required:
        - id
        - name
        - created_at
        - projects
        - stats
        - members
      properties:
        id:
          type: integer
          format: int64
          description: The internal ID of the organization
          example: 1
        name:
          type: string
          description: The name of the organization
          example: My Organization
        created_at:
          type: string
          description: The date the organization was created
          example: 2019-01-23T16:00:00Z
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
        stats:
          $ref: '#/components/schemas/OrganizationStats'
        members:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
    OrganizationUser:
      required:
        - id
        - username
        - email
        - role
      properties:
        id:
          type: integer
          format: int64
          description: The user ID
          example: 1
        username:
          type: string
          description: The user name for login
          example: john_doe
        email:
          type: string
          description: The email of the user
          example:
        role:
          type: string
          description: The role of the user
          example: Owner
    ChangePasswordLoggedIn:
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          description: The old password
          example: mypassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
        new_password:
          type: string
          description: The new password
          example: mynewpassword
          x-oapi-codegen-extra-tags:
            validate: "min=8,alphanum"
    TOTPLogin:
      type: object
      required:
        - totp_code
      properties:
        totp_code:
          type: string
          description: The TOTP code
          example: 123456
    TOTPFirstStep:
      type: object
      required:
        - totp_secret
      properties:
        totp_secret:
          type: string
          description: The TOTP secret
          example: ASDASDASDASD
    TOTPSecondStep:
      type: object
      required:
        - totp_code
      properties:
        totp_code:
          type: string
          description: The TOTP code
          example: 123456
          x-oapi-codegen-extra-tags:
            validate: "numeric,len=6"
    Success:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: The success status
          example: true
    PaginatedResult:
      required:
        - success
        - count
        - results
      type: object
      properties:
        success:
          type: boolean
          description: The success status
          example: true
        count:
          type: integer
          example: 1
        next:
          type: string
        results: 
          type: array
          items: {}
    PaginatedBruteforcePasswords:
      allOf:
        - $ref: "#/components/schemas/PaginatedResult"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/BruteforcePassword"
    BruteforcePassword:
      required:
        - id
        - password
      properties:
        id:
          type: integer
          format: int64
          description: The internal ID of the bruteforce password
          example: 1
        password:
          type: string
          description: The password
          example: mypassword
    PaginatedUsers:
      allOf:
        - $ref: "#/components/schemas/PaginatedResult"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/User"
    Error:
      required:
        - message
        - success
      properties:
        success:
          type: boolean
          description: The success status
          example: false
        message:
          type: string
          description: Error message
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session
    workerAuth:
      type: apiKey
      in: header
      name: X-Worker-Token
security:
  - sessionAuth: []
  - workerAuth: []