// Code generated by MockGen. DO NOT EDIT.
// Source: tasks.go
//
// Generated by this command:
//
//	mockgen -source=tasks.go -package mock -typed -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	queries "github.com/tedyst/licenta/db/queries"
	nvd "github.com/tedyst/licenta/nvd"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRunner is a mock of TaskRunner interface.
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner.
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance.
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// RunSaverForPublic mocks base method.
func (m *MockTaskRunner) RunSaverForPublic(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverForPublic", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverForPublic indicates an expected call of RunSaverForPublic.
func (mr *MockTaskRunnerMockRecorder) RunSaverForPublic(ctx, scan, scanType any) *MockTaskRunnerRunSaverForPublicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverForPublic", reflect.TypeOf((*MockTaskRunner)(nil).RunSaverForPublic), ctx, scan, scanType)
	return &MockTaskRunnerRunSaverForPublicCall{Call: call}
}

// MockTaskRunnerRunSaverForPublicCall wrap *gomock.Call
type MockTaskRunnerRunSaverForPublicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerRunSaverForPublicCall) Return(arg0 error) *MockTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerRunSaverForPublicCall) Do(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerRunSaverForPublicCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunSaverRemote mocks base method.
func (m *MockTaskRunner) RunSaverRemote(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverRemote", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverRemote indicates an expected call of RunSaverRemote.
func (mr *MockTaskRunnerMockRecorder) RunSaverRemote(ctx, scan, scanType any) *MockTaskRunnerRunSaverRemoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverRemote", reflect.TypeOf((*MockTaskRunner)(nil).RunSaverRemote), ctx, scan, scanType)
	return &MockTaskRunnerRunSaverRemoteCall{Call: call}
}

// MockTaskRunnerRunSaverRemoteCall wrap *gomock.Call
type MockTaskRunnerRunSaverRemoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerRunSaverRemoteCall) Return(arg0 error) *MockTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerRunSaverRemoteCall) Do(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerRunSaverRemoteCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanDockerRepository mocks base method.
func (m *MockTaskRunner) ScanDockerRepository(ctx context.Context, image *queries.DockerImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDockerRepository", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanDockerRepository indicates an expected call of ScanDockerRepository.
func (mr *MockTaskRunnerMockRecorder) ScanDockerRepository(ctx, image any) *MockTaskRunnerScanDockerRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDockerRepository", reflect.TypeOf((*MockTaskRunner)(nil).ScanDockerRepository), ctx, image)
	return &MockTaskRunnerScanDockerRepositoryCall{Call: call}
}

// MockTaskRunnerScanDockerRepositoryCall wrap *gomock.Call
type MockTaskRunnerScanDockerRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanDockerRepositoryCall) Return(arg0 error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanDockerRepositoryCall) Do(f func(context.Context, *queries.DockerImage) error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanDockerRepositoryCall) DoAndReturn(f func(context.Context, *queries.DockerImage) error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanGitRepository mocks base method.
func (m *MockTaskRunner) ScanGitRepository(ctx context.Context, repo *queries.GitRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanGitRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanGitRepository indicates an expected call of ScanGitRepository.
func (mr *MockTaskRunnerMockRecorder) ScanGitRepository(ctx, repo any) *MockTaskRunnerScanGitRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanGitRepository", reflect.TypeOf((*MockTaskRunner)(nil).ScanGitRepository), ctx, repo)
	return &MockTaskRunnerScanGitRepositoryCall{Call: call}
}

// MockTaskRunnerScanGitRepositoryCall wrap *gomock.Call
type MockTaskRunnerScanGitRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanGitRepositoryCall) Return(arg0 error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanGitRepositoryCall) Do(f func(context.Context, *queries.GitRepository) error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanGitRepositoryCall) DoAndReturn(f func(context.Context, *queries.GitRepository) error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleFullRun mocks base method.
func (m *MockTaskRunner) ScheduleFullRun(ctx context.Context, project *queries.Project, scanGroup *queries.ScanGroup, sourceType, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleFullRun", ctx, project, scanGroup, sourceType, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleFullRun indicates an expected call of ScheduleFullRun.
func (mr *MockTaskRunnerMockRecorder) ScheduleFullRun(ctx, project, scanGroup, sourceType, scanType any) *MockTaskRunnerScheduleFullRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleFullRun", reflect.TypeOf((*MockTaskRunner)(nil).ScheduleFullRun), ctx, project, scanGroup, sourceType, scanType)
	return &MockTaskRunnerScheduleFullRunCall{Call: call}
}

// MockTaskRunnerScheduleFullRunCall wrap *gomock.Call
type MockTaskRunnerScheduleFullRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScheduleFullRunCall) Return(arg0 error) *MockTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScheduleFullRunCall) Do(f func(context.Context, *queries.Project, *queries.ScanGroup, string, string) error) *MockTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScheduleFullRunCall) DoAndReturn(f func(context.Context, *queries.Project, *queries.ScanGroup, string, string) error) *MockTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleSaverRun mocks base method.
func (m *MockTaskRunner) ScheduleSaverRun(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSaverRun", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSaverRun indicates an expected call of ScheduleSaverRun.
func (mr *MockTaskRunnerMockRecorder) ScheduleSaverRun(ctx, scan, scanType any) *MockTaskRunnerScheduleSaverRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSaverRun", reflect.TypeOf((*MockTaskRunner)(nil).ScheduleSaverRun), ctx, scan, scanType)
	return &MockTaskRunnerScheduleSaverRunCall{Call: call}
}

// MockTaskRunnerScheduleSaverRunCall wrap *gomock.Call
type MockTaskRunnerScheduleSaverRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScheduleSaverRunCall) Return(arg0 error) *MockTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScheduleSaverRunCall) Do(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScheduleSaverRunCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleSourceRun mocks base method.
func (m *MockTaskRunner) ScheduleSourceRun(ctx context.Context, project *queries.Project, sourceType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSourceRun", ctx, project, sourceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSourceRun indicates an expected call of ScheduleSourceRun.
func (mr *MockTaskRunnerMockRecorder) ScheduleSourceRun(ctx, project, sourceType any) *MockTaskRunnerScheduleSourceRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSourceRun", reflect.TypeOf((*MockTaskRunner)(nil).ScheduleSourceRun), ctx, project, sourceType)
	return &MockTaskRunnerScheduleSourceRunCall{Call: call}
}

// MockTaskRunnerScheduleSourceRunCall wrap *gomock.Call
type MockTaskRunnerScheduleSourceRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScheduleSourceRunCall) Return(arg0 error) *MockTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScheduleSourceRunCall) Do(f func(context.Context, *queries.Project, string) error) *MockTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScheduleSourceRunCall) DoAndReturn(f func(context.Context, *queries.Project, string) error) *MockTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendEmail mocks base method.
func (m *MockTaskRunner) SendEmail(ctx context.Context, address, subject, html, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, address, subject, html, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockTaskRunnerMockRecorder) SendEmail(ctx, address, subject, html, text any) *MockTaskRunnerSendEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockTaskRunner)(nil).SendEmail), ctx, address, subject, html, text)
	return &MockTaskRunnerSendEmailCall{Call: call}
}

// MockTaskRunnerSendEmailCall wrap *gomock.Call
type MockTaskRunnerSendEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSendEmailCall) Return(arg0 error) *MockTaskRunnerSendEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSendEmailCall) Do(f func(context.Context, string, string, string, string) error) *MockTaskRunnerSendEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSendEmailCall) DoAndReturn(f func(context.Context, string, string, string, string) error) *MockTaskRunnerSendEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNVDVulnerabilitiesForProduct mocks base method.
func (m *MockTaskRunner) UpdateNVDVulnerabilitiesForProduct(ctx context.Context, product nvd.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNVDVulnerabilitiesForProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNVDVulnerabilitiesForProduct indicates an expected call of UpdateNVDVulnerabilitiesForProduct.
func (mr *MockTaskRunnerMockRecorder) UpdateNVDVulnerabilitiesForProduct(ctx, product any) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNVDVulnerabilitiesForProduct", reflect.TypeOf((*MockTaskRunner)(nil).UpdateNVDVulnerabilitiesForProduct), ctx, product)
	return &MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall{Call: call}
}

// MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall wrap *gomock.Call
type MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) Return(arg0 error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) Do(f func(context.Context, nvd.Product) error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) DoAndReturn(f func(context.Context, nvd.Product) error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEmailTasksRunner is a mock of EmailTasksRunner interface.
type MockEmailTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTasksRunnerMockRecorder
}

// MockEmailTasksRunnerMockRecorder is the mock recorder for MockEmailTasksRunner.
type MockEmailTasksRunnerMockRecorder struct {
	mock *MockEmailTasksRunner
}

// NewMockEmailTasksRunner creates a new mock instance.
func NewMockEmailTasksRunner(ctrl *gomock.Controller) *MockEmailTasksRunner {
	mock := &MockEmailTasksRunner{ctrl: ctrl}
	mock.recorder = &MockEmailTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTasksRunner) EXPECT() *MockEmailTasksRunnerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailTasksRunner) SendEmail(ctx context.Context, address, subject, html, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, address, subject, html, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailTasksRunnerMockRecorder) SendEmail(ctx, address, subject, html, text any) *MockEmailTasksRunnerSendEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendEmail), ctx, address, subject, html, text)
	return &MockEmailTasksRunnerSendEmailCall{Call: call}
}

// MockEmailTasksRunnerSendEmailCall wrap *gomock.Call
type MockEmailTasksRunnerSendEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailTasksRunnerSendEmailCall) Return(arg0 error) *MockEmailTasksRunnerSendEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailTasksRunnerSendEmailCall) Do(f func(context.Context, string, string, string, string) error) *MockEmailTasksRunnerSendEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailTasksRunnerSendEmailCall) DoAndReturn(f func(context.Context, string, string, string, string) error) *MockEmailTasksRunnerSendEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDockerTasksRunner is a mock of DockerTasksRunner interface.
type MockDockerTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockDockerTasksRunnerMockRecorder
}

// MockDockerTasksRunnerMockRecorder is the mock recorder for MockDockerTasksRunner.
type MockDockerTasksRunnerMockRecorder struct {
	mock *MockDockerTasksRunner
}

// NewMockDockerTasksRunner creates a new mock instance.
func NewMockDockerTasksRunner(ctrl *gomock.Controller) *MockDockerTasksRunner {
	mock := &MockDockerTasksRunner{ctrl: ctrl}
	mock.recorder = &MockDockerTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerTasksRunner) EXPECT() *MockDockerTasksRunnerMockRecorder {
	return m.recorder
}

// ScanDockerRepository mocks base method.
func (m *MockDockerTasksRunner) ScanDockerRepository(ctx context.Context, image *queries.DockerImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDockerRepository", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanDockerRepository indicates an expected call of ScanDockerRepository.
func (mr *MockDockerTasksRunnerMockRecorder) ScanDockerRepository(ctx, image any) *MockDockerTasksRunnerScanDockerRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDockerRepository", reflect.TypeOf((*MockDockerTasksRunner)(nil).ScanDockerRepository), ctx, image)
	return &MockDockerTasksRunnerScanDockerRepositoryCall{Call: call}
}

// MockDockerTasksRunnerScanDockerRepositoryCall wrap *gomock.Call
type MockDockerTasksRunnerScanDockerRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) Return(arg0 error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) Do(f func(context.Context, *queries.DockerImage) error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) DoAndReturn(f func(context.Context, *queries.DockerImage) error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGitTasksRunner is a mock of GitTasksRunner interface.
type MockGitTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockGitTasksRunnerMockRecorder
}

// MockGitTasksRunnerMockRecorder is the mock recorder for MockGitTasksRunner.
type MockGitTasksRunnerMockRecorder struct {
	mock *MockGitTasksRunner
}

// NewMockGitTasksRunner creates a new mock instance.
func NewMockGitTasksRunner(ctrl *gomock.Controller) *MockGitTasksRunner {
	mock := &MockGitTasksRunner{ctrl: ctrl}
	mock.recorder = &MockGitTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitTasksRunner) EXPECT() *MockGitTasksRunnerMockRecorder {
	return m.recorder
}

// ScanGitRepository mocks base method.
func (m *MockGitTasksRunner) ScanGitRepository(ctx context.Context, repo *queries.GitRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanGitRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanGitRepository indicates an expected call of ScanGitRepository.
func (mr *MockGitTasksRunnerMockRecorder) ScanGitRepository(ctx, repo any) *MockGitTasksRunnerScanGitRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanGitRepository", reflect.TypeOf((*MockGitTasksRunner)(nil).ScanGitRepository), ctx, repo)
	return &MockGitTasksRunnerScanGitRepositoryCall{Call: call}
}

// MockGitTasksRunnerScanGitRepositoryCall wrap *gomock.Call
type MockGitTasksRunnerScanGitRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitTasksRunnerScanGitRepositoryCall) Return(arg0 error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitTasksRunnerScanGitRepositoryCall) Do(f func(context.Context, *queries.GitRepository) error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitTasksRunnerScanGitRepositoryCall) DoAndReturn(f func(context.Context, *queries.GitRepository) error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVulnerabilityTasksRunner is a mock of VulnerabilityTasksRunner interface.
type MockVulnerabilityTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityTasksRunnerMockRecorder
}

// MockVulnerabilityTasksRunnerMockRecorder is the mock recorder for MockVulnerabilityTasksRunner.
type MockVulnerabilityTasksRunnerMockRecorder struct {
	mock *MockVulnerabilityTasksRunner
}

// NewMockVulnerabilityTasksRunner creates a new mock instance.
func NewMockVulnerabilityTasksRunner(ctrl *gomock.Controller) *MockVulnerabilityTasksRunner {
	mock := &MockVulnerabilityTasksRunner{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnerabilityTasksRunner) EXPECT() *MockVulnerabilityTasksRunnerMockRecorder {
	return m.recorder
}

// UpdateNVDVulnerabilitiesForProduct mocks base method.
func (m *MockVulnerabilityTasksRunner) UpdateNVDVulnerabilitiesForProduct(ctx context.Context, product nvd.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNVDVulnerabilitiesForProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNVDVulnerabilitiesForProduct indicates an expected call of UpdateNVDVulnerabilitiesForProduct.
func (mr *MockVulnerabilityTasksRunnerMockRecorder) UpdateNVDVulnerabilitiesForProduct(ctx, product any) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNVDVulnerabilitiesForProduct", reflect.TypeOf((*MockVulnerabilityTasksRunner)(nil).UpdateNVDVulnerabilitiesForProduct), ctx, product)
	return &MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall{Call: call}
}

// MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall wrap *gomock.Call
type MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) Return(arg0 error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) Do(f func(context.Context, nvd.Product) error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) DoAndReturn(f func(context.Context, nvd.Product) error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockScannerTaskRunner is a mock of ScannerTaskRunner interface.
type MockScannerTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerTaskRunnerMockRecorder
}

// MockScannerTaskRunnerMockRecorder is the mock recorder for MockScannerTaskRunner.
type MockScannerTaskRunnerMockRecorder struct {
	mock *MockScannerTaskRunner
}

// NewMockScannerTaskRunner creates a new mock instance.
func NewMockScannerTaskRunner(ctrl *gomock.Controller) *MockScannerTaskRunner {
	mock := &MockScannerTaskRunner{ctrl: ctrl}
	mock.recorder = &MockScannerTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannerTaskRunner) EXPECT() *MockScannerTaskRunnerMockRecorder {
	return m.recorder
}

// RunSaverForPublic mocks base method.
func (m *MockScannerTaskRunner) RunSaverForPublic(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverForPublic", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverForPublic indicates an expected call of RunSaverForPublic.
func (mr *MockScannerTaskRunnerMockRecorder) RunSaverForPublic(ctx, scan, scanType any) *MockScannerTaskRunnerRunSaverForPublicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverForPublic", reflect.TypeOf((*MockScannerTaskRunner)(nil).RunSaverForPublic), ctx, scan, scanType)
	return &MockScannerTaskRunnerRunSaverForPublicCall{Call: call}
}

// MockScannerTaskRunnerRunSaverForPublicCall wrap *gomock.Call
type MockScannerTaskRunnerRunSaverForPublicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerRunSaverForPublicCall) Return(arg0 error) *MockScannerTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerRunSaverForPublicCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerRunSaverForPublicCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunSaverRemote mocks base method.
func (m *MockScannerTaskRunner) RunSaverRemote(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverRemote", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverRemote indicates an expected call of RunSaverRemote.
func (mr *MockScannerTaskRunnerMockRecorder) RunSaverRemote(ctx, scan, scanType any) *MockScannerTaskRunnerRunSaverRemoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverRemote", reflect.TypeOf((*MockScannerTaskRunner)(nil).RunSaverRemote), ctx, scan, scanType)
	return &MockScannerTaskRunnerRunSaverRemoteCall{Call: call}
}

// MockScannerTaskRunnerRunSaverRemoteCall wrap *gomock.Call
type MockScannerTaskRunnerRunSaverRemoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerRunSaverRemoteCall) Return(arg0 error) *MockScannerTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerRunSaverRemoteCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerRunSaverRemoteCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleSaverRun mocks base method.
func (m *MockScannerTaskRunner) ScheduleSaverRun(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSaverRun", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSaverRun indicates an expected call of ScheduleSaverRun.
func (mr *MockScannerTaskRunnerMockRecorder) ScheduleSaverRun(ctx, scan, scanType any) *MockScannerTaskRunnerScheduleSaverRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSaverRun", reflect.TypeOf((*MockScannerTaskRunner)(nil).ScheduleSaverRun), ctx, scan, scanType)
	return &MockScannerTaskRunnerScheduleSaverRunCall{Call: call}
}

// MockScannerTaskRunnerScheduleSaverRunCall wrap *gomock.Call
type MockScannerTaskRunnerScheduleSaverRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerScheduleSaverRunCall) Return(arg0 error) *MockScannerTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerScheduleSaverRunCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerScheduleSaverRunCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSourceTaskRunner is a mock of SourceTaskRunner interface.
type MockSourceTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockSourceTaskRunnerMockRecorder
}

// MockSourceTaskRunnerMockRecorder is the mock recorder for MockSourceTaskRunner.
type MockSourceTaskRunnerMockRecorder struct {
	mock *MockSourceTaskRunner
}

// NewMockSourceTaskRunner creates a new mock instance.
func NewMockSourceTaskRunner(ctrl *gomock.Controller) *MockSourceTaskRunner {
	mock := &MockSourceTaskRunner{ctrl: ctrl}
	mock.recorder = &MockSourceTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceTaskRunner) EXPECT() *MockSourceTaskRunnerMockRecorder {
	return m.recorder
}

// ScheduleSourceRun mocks base method.
func (m *MockSourceTaskRunner) ScheduleSourceRun(ctx context.Context, project *queries.Project, sourceType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSourceRun", ctx, project, sourceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSourceRun indicates an expected call of ScheduleSourceRun.
func (mr *MockSourceTaskRunnerMockRecorder) ScheduleSourceRun(ctx, project, sourceType any) *MockSourceTaskRunnerScheduleSourceRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSourceRun", reflect.TypeOf((*MockSourceTaskRunner)(nil).ScheduleSourceRun), ctx, project, sourceType)
	return &MockSourceTaskRunnerScheduleSourceRunCall{Call: call}
}

// MockSourceTaskRunnerScheduleSourceRunCall wrap *gomock.Call
type MockSourceTaskRunnerScheduleSourceRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceTaskRunnerScheduleSourceRunCall) Return(arg0 error) *MockSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceTaskRunnerScheduleSourceRunCall) Do(f func(context.Context, *queries.Project, string) error) *MockSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceTaskRunnerScheduleSourceRunCall) DoAndReturn(f func(context.Context, *queries.Project, string) error) *MockSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockScannerSourceTaskRunner is a mock of ScannerSourceTaskRunner interface.
type MockScannerSourceTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerSourceTaskRunnerMockRecorder
}

// MockScannerSourceTaskRunnerMockRecorder is the mock recorder for MockScannerSourceTaskRunner.
type MockScannerSourceTaskRunnerMockRecorder struct {
	mock *MockScannerSourceTaskRunner
}

// NewMockScannerSourceTaskRunner creates a new mock instance.
func NewMockScannerSourceTaskRunner(ctrl *gomock.Controller) *MockScannerSourceTaskRunner {
	mock := &MockScannerSourceTaskRunner{ctrl: ctrl}
	mock.recorder = &MockScannerSourceTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannerSourceTaskRunner) EXPECT() *MockScannerSourceTaskRunnerMockRecorder {
	return m.recorder
}

// RunSaverForPublic mocks base method.
func (m *MockScannerSourceTaskRunner) RunSaverForPublic(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverForPublic", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverForPublic indicates an expected call of RunSaverForPublic.
func (mr *MockScannerSourceTaskRunnerMockRecorder) RunSaverForPublic(ctx, scan, scanType any) *MockScannerSourceTaskRunnerRunSaverForPublicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverForPublic", reflect.TypeOf((*MockScannerSourceTaskRunner)(nil).RunSaverForPublic), ctx, scan, scanType)
	return &MockScannerSourceTaskRunnerRunSaverForPublicCall{Call: call}
}

// MockScannerSourceTaskRunnerRunSaverForPublicCall wrap *gomock.Call
type MockScannerSourceTaskRunnerRunSaverForPublicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerSourceTaskRunnerRunSaverForPublicCall) Return(arg0 error) *MockScannerSourceTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerSourceTaskRunnerRunSaverForPublicCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerSourceTaskRunnerRunSaverForPublicCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerRunSaverForPublicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunSaverRemote mocks base method.
func (m *MockScannerSourceTaskRunner) RunSaverRemote(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSaverRemote", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSaverRemote indicates an expected call of RunSaverRemote.
func (mr *MockScannerSourceTaskRunnerMockRecorder) RunSaverRemote(ctx, scan, scanType any) *MockScannerSourceTaskRunnerRunSaverRemoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSaverRemote", reflect.TypeOf((*MockScannerSourceTaskRunner)(nil).RunSaverRemote), ctx, scan, scanType)
	return &MockScannerSourceTaskRunnerRunSaverRemoteCall{Call: call}
}

// MockScannerSourceTaskRunnerRunSaverRemoteCall wrap *gomock.Call
type MockScannerSourceTaskRunnerRunSaverRemoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerSourceTaskRunnerRunSaverRemoteCall) Return(arg0 error) *MockScannerSourceTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerSourceTaskRunnerRunSaverRemoteCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerSourceTaskRunnerRunSaverRemoteCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerRunSaverRemoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleFullRun mocks base method.
func (m *MockScannerSourceTaskRunner) ScheduleFullRun(ctx context.Context, project *queries.Project, scanGroup *queries.ScanGroup, sourceType, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleFullRun", ctx, project, scanGroup, sourceType, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleFullRun indicates an expected call of ScheduleFullRun.
func (mr *MockScannerSourceTaskRunnerMockRecorder) ScheduleFullRun(ctx, project, scanGroup, sourceType, scanType any) *MockScannerSourceTaskRunnerScheduleFullRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleFullRun", reflect.TypeOf((*MockScannerSourceTaskRunner)(nil).ScheduleFullRun), ctx, project, scanGroup, sourceType, scanType)
	return &MockScannerSourceTaskRunnerScheduleFullRunCall{Call: call}
}

// MockScannerSourceTaskRunnerScheduleFullRunCall wrap *gomock.Call
type MockScannerSourceTaskRunnerScheduleFullRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerSourceTaskRunnerScheduleFullRunCall) Return(arg0 error) *MockScannerSourceTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerSourceTaskRunnerScheduleFullRunCall) Do(f func(context.Context, *queries.Project, *queries.ScanGroup, string, string) error) *MockScannerSourceTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerSourceTaskRunnerScheduleFullRunCall) DoAndReturn(f func(context.Context, *queries.Project, *queries.ScanGroup, string, string) error) *MockScannerSourceTaskRunnerScheduleFullRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleSaverRun mocks base method.
func (m *MockScannerSourceTaskRunner) ScheduleSaverRun(ctx context.Context, scan *queries.Scan, scanType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSaverRun", ctx, scan, scanType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSaverRun indicates an expected call of ScheduleSaverRun.
func (mr *MockScannerSourceTaskRunnerMockRecorder) ScheduleSaverRun(ctx, scan, scanType any) *MockScannerSourceTaskRunnerScheduleSaverRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSaverRun", reflect.TypeOf((*MockScannerSourceTaskRunner)(nil).ScheduleSaverRun), ctx, scan, scanType)
	return &MockScannerSourceTaskRunnerScheduleSaverRunCall{Call: call}
}

// MockScannerSourceTaskRunnerScheduleSaverRunCall wrap *gomock.Call
type MockScannerSourceTaskRunnerScheduleSaverRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerSourceTaskRunnerScheduleSaverRunCall) Return(arg0 error) *MockScannerSourceTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerSourceTaskRunnerScheduleSaverRunCall) Do(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerSourceTaskRunnerScheduleSaverRunCall) DoAndReturn(f func(context.Context, *queries.Scan, string) error) *MockScannerSourceTaskRunnerScheduleSaverRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleSourceRun mocks base method.
func (m *MockScannerSourceTaskRunner) ScheduleSourceRun(ctx context.Context, project *queries.Project, sourceType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSourceRun", ctx, project, sourceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleSourceRun indicates an expected call of ScheduleSourceRun.
func (mr *MockScannerSourceTaskRunnerMockRecorder) ScheduleSourceRun(ctx, project, sourceType any) *MockScannerSourceTaskRunnerScheduleSourceRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSourceRun", reflect.TypeOf((*MockScannerSourceTaskRunner)(nil).ScheduleSourceRun), ctx, project, sourceType)
	return &MockScannerSourceTaskRunnerScheduleSourceRunCall{Call: call}
}

// MockScannerSourceTaskRunnerScheduleSourceRunCall wrap *gomock.Call
type MockScannerSourceTaskRunnerScheduleSourceRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerSourceTaskRunnerScheduleSourceRunCall) Return(arg0 error) *MockScannerSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerSourceTaskRunnerScheduleSourceRunCall) Do(f func(context.Context, *queries.Project, string) error) *MockScannerSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerSourceTaskRunnerScheduleSourceRunCall) DoAndReturn(f func(context.Context, *queries.Project, string) error) *MockScannerSourceTaskRunnerScheduleSourceRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
