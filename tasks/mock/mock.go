// Code generated by MockGen. DO NOT EDIT.
// Source: tasks.go
//
// Generated by this command:
//
//	mockgen -source=tasks.go -package mock -typed -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	queries "github.com/tedyst/licenta/db/queries"
	models "github.com/tedyst/licenta/models"
	nvd "github.com/tedyst/licenta/nvd"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRunner is a mock of TaskRunner interface.
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner.
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance.
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// ScanDockerRepository mocks base method.
func (m *MockTaskRunner) ScanDockerRepository(ctx context.Context, image *models.ProjectDockerImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDockerRepository", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanDockerRepository indicates an expected call of ScanDockerRepository.
func (mr *MockTaskRunnerMockRecorder) ScanDockerRepository(ctx, image any) *MockTaskRunnerScanDockerRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDockerRepository", reflect.TypeOf((*MockTaskRunner)(nil).ScanDockerRepository), ctx, image)
	return &MockTaskRunnerScanDockerRepositoryCall{Call: call}
}

// MockTaskRunnerScanDockerRepositoryCall wrap *gomock.Call
type MockTaskRunnerScanDockerRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanDockerRepositoryCall) Return(arg0 error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanDockerRepositoryCall) Do(f func(context.Context, *models.ProjectDockerImage) error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanDockerRepositoryCall) DoAndReturn(f func(context.Context, *models.ProjectDockerImage) error) *MockTaskRunnerScanDockerRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanGitRepository mocks base method.
func (m *MockTaskRunner) ScanGitRepository(ctx context.Context, repo *models.ProjectGitRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanGitRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanGitRepository indicates an expected call of ScanGitRepository.
func (mr *MockTaskRunnerMockRecorder) ScanGitRepository(ctx, repo any) *MockTaskRunnerScanGitRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanGitRepository", reflect.TypeOf((*MockTaskRunner)(nil).ScanGitRepository), ctx, repo)
	return &MockTaskRunnerScanGitRepositoryCall{Call: call}
}

// MockTaskRunnerScanGitRepositoryCall wrap *gomock.Call
type MockTaskRunnerScanGitRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanGitRepositoryCall) Return(arg0 error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanGitRepositoryCall) Do(f func(context.Context, *models.ProjectGitRepository) error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanGitRepositoryCall) DoAndReturn(f func(context.Context, *models.ProjectGitRepository) error) *MockTaskRunnerScanGitRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanPostgresDB mocks base method.
func (m *MockTaskRunner) ScanPostgresDB(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPostgresDB", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPostgresDB indicates an expected call of ScanPostgresDB.
func (mr *MockTaskRunnerMockRecorder) ScanPostgresDB(ctx, scan any) *MockTaskRunnerScanPostgresDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPostgresDB", reflect.TypeOf((*MockTaskRunner)(nil).ScanPostgresDB), ctx, scan)
	return &MockTaskRunnerScanPostgresDBCall{Call: call}
}

// MockTaskRunnerScanPostgresDBCall wrap *gomock.Call
type MockTaskRunnerScanPostgresDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanPostgresDBCall) Return(arg0 error) *MockTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanPostgresDBCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanPostgresDBCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanPostgresDBForPublicAccess mocks base method.
func (m *MockTaskRunner) ScanPostgresDBForPublicAccess(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPostgresDBForPublicAccess", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPostgresDBForPublicAccess indicates an expected call of ScanPostgresDBForPublicAccess.
func (mr *MockTaskRunnerMockRecorder) ScanPostgresDBForPublicAccess(ctx, scan any) *MockTaskRunnerScanPostgresDBForPublicAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPostgresDBForPublicAccess", reflect.TypeOf((*MockTaskRunner)(nil).ScanPostgresDBForPublicAccess), ctx, scan)
	return &MockTaskRunnerScanPostgresDBForPublicAccessCall{Call: call}
}

// MockTaskRunnerScanPostgresDBForPublicAccessCall wrap *gomock.Call
type MockTaskRunnerScanPostgresDBForPublicAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerScanPostgresDBForPublicAccessCall) Return(arg0 error) *MockTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerScanPostgresDBForPublicAccessCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerScanPostgresDBForPublicAccessCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SchedulePostgresScan mocks base method.
func (m *MockTaskRunner) SchedulePostgresScan(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulePostgresScan", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// SchedulePostgresScan indicates an expected call of SchedulePostgresScan.
func (mr *MockTaskRunnerMockRecorder) SchedulePostgresScan(ctx, scan any) *MockTaskRunnerSchedulePostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulePostgresScan", reflect.TypeOf((*MockTaskRunner)(nil).SchedulePostgresScan), ctx, scan)
	return &MockTaskRunnerSchedulePostgresScanCall{Call: call}
}

// MockTaskRunnerSchedulePostgresScanCall wrap *gomock.Call
type MockTaskRunnerSchedulePostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSchedulePostgresScanCall) Return(arg0 error) *MockTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSchedulePostgresScanCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSchedulePostgresScanCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendCVEMailsToAllProjectMembers mocks base method.
func (m *MockTaskRunner) SendCVEMailsToAllProjectMembers(ctx context.Context, projectID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEMailsToAllProjectMembers", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEMailsToAllProjectMembers indicates an expected call of SendCVEMailsToAllProjectMembers.
func (mr *MockTaskRunnerMockRecorder) SendCVEMailsToAllProjectMembers(ctx, projectID any) *MockTaskRunnerSendCVEMailsToAllProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEMailsToAllProjectMembers", reflect.TypeOf((*MockTaskRunner)(nil).SendCVEMailsToAllProjectMembers), ctx, projectID)
	return &MockTaskRunnerSendCVEMailsToAllProjectMembersCall{Call: call}
}

// MockTaskRunnerSendCVEMailsToAllProjectMembersCall wrap *gomock.Call
type MockTaskRunnerSendCVEMailsToAllProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSendCVEMailsToAllProjectMembersCall) Return(arg0 error) *MockTaskRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSendCVEMailsToAllProjectMembersCall) Do(f func(context.Context, int64) error) *MockTaskRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSendCVEMailsToAllProjectMembersCall) DoAndReturn(f func(context.Context, int64) error) *MockTaskRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendCVEMailsToAllProjects mocks base method.
func (m *MockTaskRunner) SendCVEMailsToAllProjects(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEMailsToAllProjects", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEMailsToAllProjects indicates an expected call of SendCVEMailsToAllProjects.
func (mr *MockTaskRunnerMockRecorder) SendCVEMailsToAllProjects(ctx any) *MockTaskRunnerSendCVEMailsToAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEMailsToAllProjects", reflect.TypeOf((*MockTaskRunner)(nil).SendCVEMailsToAllProjects), ctx)
	return &MockTaskRunnerSendCVEMailsToAllProjectsCall{Call: call}
}

// MockTaskRunnerSendCVEMailsToAllProjectsCall wrap *gomock.Call
type MockTaskRunnerSendCVEMailsToAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSendCVEMailsToAllProjectsCall) Return(arg0 error) *MockTaskRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSendCVEMailsToAllProjectsCall) Do(f func(context.Context) error) *MockTaskRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSendCVEMailsToAllProjectsCall) DoAndReturn(f func(context.Context) error) *MockTaskRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendCVEVulnerabilityEmail mocks base method.
func (m *MockTaskRunner) SendCVEVulnerabilityEmail(ctx context.Context, project *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEVulnerabilityEmail", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEVulnerabilityEmail indicates an expected call of SendCVEVulnerabilityEmail.
func (mr *MockTaskRunnerMockRecorder) SendCVEVulnerabilityEmail(ctx, project any) *MockTaskRunnerSendCVEVulnerabilityEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEVulnerabilityEmail", reflect.TypeOf((*MockTaskRunner)(nil).SendCVEVulnerabilityEmail), ctx, project)
	return &MockTaskRunnerSendCVEVulnerabilityEmailCall{Call: call}
}

// MockTaskRunnerSendCVEVulnerabilityEmailCall wrap *gomock.Call
type MockTaskRunnerSendCVEVulnerabilityEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSendCVEVulnerabilityEmailCall) Return(arg0 error) *MockTaskRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSendCVEVulnerabilityEmailCall) Do(f func(context.Context, *models.Project) error) *MockTaskRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSendCVEVulnerabilityEmailCall) DoAndReturn(f func(context.Context, *models.Project) error) *MockTaskRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendResetEmail mocks base method.
func (m *MockTaskRunner) SendResetEmail(ctx context.Context, address, subject, html, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetEmail", ctx, address, subject, html, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockTaskRunnerMockRecorder) SendResetEmail(ctx, address, subject, html, text any) *MockTaskRunnerSendResetEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockTaskRunner)(nil).SendResetEmail), ctx, address, subject, html, text)
	return &MockTaskRunnerSendResetEmailCall{Call: call}
}

// MockTaskRunnerSendResetEmailCall wrap *gomock.Call
type MockTaskRunnerSendResetEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerSendResetEmailCall) Return(arg0 error) *MockTaskRunnerSendResetEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerSendResetEmailCall) Do(f func(context.Context, string, string, string, string) error) *MockTaskRunnerSendResetEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerSendResetEmailCall) DoAndReturn(f func(context.Context, string, string, string, string) error) *MockTaskRunnerSendResetEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNVDVulnerabilitiesForProduct mocks base method.
func (m *MockTaskRunner) UpdateNVDVulnerabilitiesForProduct(ctx context.Context, product nvd.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNVDVulnerabilitiesForProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNVDVulnerabilitiesForProduct indicates an expected call of UpdateNVDVulnerabilitiesForProduct.
func (mr *MockTaskRunnerMockRecorder) UpdateNVDVulnerabilitiesForProduct(ctx, product any) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNVDVulnerabilitiesForProduct", reflect.TypeOf((*MockTaskRunner)(nil).UpdateNVDVulnerabilitiesForProduct), ctx, product)
	return &MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall{Call: call}
}

// MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall wrap *gomock.Call
type MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) Return(arg0 error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) Do(f func(context.Context, nvd.Product) error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall) DoAndReturn(f func(context.Context, nvd.Product) error) *MockTaskRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEmailTasksRunner is a mock of EmailTasksRunner interface.
type MockEmailTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTasksRunnerMockRecorder
}

// MockEmailTasksRunnerMockRecorder is the mock recorder for MockEmailTasksRunner.
type MockEmailTasksRunnerMockRecorder struct {
	mock *MockEmailTasksRunner
}

// NewMockEmailTasksRunner creates a new mock instance.
func NewMockEmailTasksRunner(ctrl *gomock.Controller) *MockEmailTasksRunner {
	mock := &MockEmailTasksRunner{ctrl: ctrl}
	mock.recorder = &MockEmailTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTasksRunner) EXPECT() *MockEmailTasksRunnerMockRecorder {
	return m.recorder
}

// SendCVEMailsToAllProjectMembers mocks base method.
func (m *MockEmailTasksRunner) SendCVEMailsToAllProjectMembers(ctx context.Context, projectID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEMailsToAllProjectMembers", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEMailsToAllProjectMembers indicates an expected call of SendCVEMailsToAllProjectMembers.
func (mr *MockEmailTasksRunnerMockRecorder) SendCVEMailsToAllProjectMembers(ctx, projectID any) *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEMailsToAllProjectMembers", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendCVEMailsToAllProjectMembers), ctx, projectID)
	return &MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall{Call: call}
}

// MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall wrap *gomock.Call
type MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall) Return(arg0 error) *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall) Do(f func(context.Context, int64) error) *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall) DoAndReturn(f func(context.Context, int64) error) *MockEmailTasksRunnerSendCVEMailsToAllProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendCVEMailsToAllProjects mocks base method.
func (m *MockEmailTasksRunner) SendCVEMailsToAllProjects(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEMailsToAllProjects", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEMailsToAllProjects indicates an expected call of SendCVEMailsToAllProjects.
func (mr *MockEmailTasksRunnerMockRecorder) SendCVEMailsToAllProjects(ctx any) *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEMailsToAllProjects", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendCVEMailsToAllProjects), ctx)
	return &MockEmailTasksRunnerSendCVEMailsToAllProjectsCall{Call: call}
}

// MockEmailTasksRunnerSendCVEMailsToAllProjectsCall wrap *gomock.Call
type MockEmailTasksRunnerSendCVEMailsToAllProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall) Return(arg0 error) *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall) Do(f func(context.Context) error) *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall) DoAndReturn(f func(context.Context) error) *MockEmailTasksRunnerSendCVEMailsToAllProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendCVEVulnerabilityEmail mocks base method.
func (m *MockEmailTasksRunner) SendCVEVulnerabilityEmail(ctx context.Context, project *models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCVEVulnerabilityEmail", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCVEVulnerabilityEmail indicates an expected call of SendCVEVulnerabilityEmail.
func (mr *MockEmailTasksRunnerMockRecorder) SendCVEVulnerabilityEmail(ctx, project any) *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCVEVulnerabilityEmail", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendCVEVulnerabilityEmail), ctx, project)
	return &MockEmailTasksRunnerSendCVEVulnerabilityEmailCall{Call: call}
}

// MockEmailTasksRunnerSendCVEVulnerabilityEmailCall wrap *gomock.Call
type MockEmailTasksRunnerSendCVEVulnerabilityEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall) Return(arg0 error) *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall) Do(f func(context.Context, *models.Project) error) *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall) DoAndReturn(f func(context.Context, *models.Project) error) *MockEmailTasksRunnerSendCVEVulnerabilityEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendResetEmail mocks base method.
func (m *MockEmailTasksRunner) SendResetEmail(ctx context.Context, address, subject, html, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetEmail", ctx, address, subject, html, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockEmailTasksRunnerMockRecorder) SendResetEmail(ctx, address, subject, html, text any) *MockEmailTasksRunnerSendResetEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendResetEmail), ctx, address, subject, html, text)
	return &MockEmailTasksRunnerSendResetEmailCall{Call: call}
}

// MockEmailTasksRunnerSendResetEmailCall wrap *gomock.Call
type MockEmailTasksRunnerSendResetEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailTasksRunnerSendResetEmailCall) Return(arg0 error) *MockEmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailTasksRunnerSendResetEmailCall) Do(f func(context.Context, string, string, string, string) error) *MockEmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailTasksRunnerSendResetEmailCall) DoAndReturn(f func(context.Context, string, string, string, string) error) *MockEmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDockerTasksRunner is a mock of DockerTasksRunner interface.
type MockDockerTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockDockerTasksRunnerMockRecorder
}

// MockDockerTasksRunnerMockRecorder is the mock recorder for MockDockerTasksRunner.
type MockDockerTasksRunnerMockRecorder struct {
	mock *MockDockerTasksRunner
}

// NewMockDockerTasksRunner creates a new mock instance.
func NewMockDockerTasksRunner(ctrl *gomock.Controller) *MockDockerTasksRunner {
	mock := &MockDockerTasksRunner{ctrl: ctrl}
	mock.recorder = &MockDockerTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerTasksRunner) EXPECT() *MockDockerTasksRunnerMockRecorder {
	return m.recorder
}

// ScanDockerRepository mocks base method.
func (m *MockDockerTasksRunner) ScanDockerRepository(ctx context.Context, image *models.ProjectDockerImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanDockerRepository", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanDockerRepository indicates an expected call of ScanDockerRepository.
func (mr *MockDockerTasksRunnerMockRecorder) ScanDockerRepository(ctx, image any) *MockDockerTasksRunnerScanDockerRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanDockerRepository", reflect.TypeOf((*MockDockerTasksRunner)(nil).ScanDockerRepository), ctx, image)
	return &MockDockerTasksRunnerScanDockerRepositoryCall{Call: call}
}

// MockDockerTasksRunnerScanDockerRepositoryCall wrap *gomock.Call
type MockDockerTasksRunnerScanDockerRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) Return(arg0 error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) Do(f func(context.Context, *models.ProjectDockerImage) error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDockerTasksRunnerScanDockerRepositoryCall) DoAndReturn(f func(context.Context, *models.ProjectDockerImage) error) *MockDockerTasksRunnerScanDockerRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGitTasksRunner is a mock of GitTasksRunner interface.
type MockGitTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockGitTasksRunnerMockRecorder
}

// MockGitTasksRunnerMockRecorder is the mock recorder for MockGitTasksRunner.
type MockGitTasksRunnerMockRecorder struct {
	mock *MockGitTasksRunner
}

// NewMockGitTasksRunner creates a new mock instance.
func NewMockGitTasksRunner(ctrl *gomock.Controller) *MockGitTasksRunner {
	mock := &MockGitTasksRunner{ctrl: ctrl}
	mock.recorder = &MockGitTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitTasksRunner) EXPECT() *MockGitTasksRunnerMockRecorder {
	return m.recorder
}

// ScanGitRepository mocks base method.
func (m *MockGitTasksRunner) ScanGitRepository(ctx context.Context, repo *models.ProjectGitRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanGitRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanGitRepository indicates an expected call of ScanGitRepository.
func (mr *MockGitTasksRunnerMockRecorder) ScanGitRepository(ctx, repo any) *MockGitTasksRunnerScanGitRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanGitRepository", reflect.TypeOf((*MockGitTasksRunner)(nil).ScanGitRepository), ctx, repo)
	return &MockGitTasksRunnerScanGitRepositoryCall{Call: call}
}

// MockGitTasksRunnerScanGitRepositoryCall wrap *gomock.Call
type MockGitTasksRunnerScanGitRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitTasksRunnerScanGitRepositoryCall) Return(arg0 error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitTasksRunnerScanGitRepositoryCall) Do(f func(context.Context, *models.ProjectGitRepository) error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitTasksRunnerScanGitRepositoryCall) DoAndReturn(f func(context.Context, *models.ProjectGitRepository) error) *MockGitTasksRunnerScanGitRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVulnerabilityTasksRunner is a mock of VulnerabilityTasksRunner interface.
type MockVulnerabilityTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityTasksRunnerMockRecorder
}

// MockVulnerabilityTasksRunnerMockRecorder is the mock recorder for MockVulnerabilityTasksRunner.
type MockVulnerabilityTasksRunnerMockRecorder struct {
	mock *MockVulnerabilityTasksRunner
}

// NewMockVulnerabilityTasksRunner creates a new mock instance.
func NewMockVulnerabilityTasksRunner(ctrl *gomock.Controller) *MockVulnerabilityTasksRunner {
	mock := &MockVulnerabilityTasksRunner{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnerabilityTasksRunner) EXPECT() *MockVulnerabilityTasksRunnerMockRecorder {
	return m.recorder
}

// UpdateNVDVulnerabilitiesForProduct mocks base method.
func (m *MockVulnerabilityTasksRunner) UpdateNVDVulnerabilitiesForProduct(ctx context.Context, product nvd.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNVDVulnerabilitiesForProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNVDVulnerabilitiesForProduct indicates an expected call of UpdateNVDVulnerabilitiesForProduct.
func (mr *MockVulnerabilityTasksRunnerMockRecorder) UpdateNVDVulnerabilitiesForProduct(ctx, product any) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNVDVulnerabilitiesForProduct", reflect.TypeOf((*MockVulnerabilityTasksRunner)(nil).UpdateNVDVulnerabilitiesForProduct), ctx, product)
	return &MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall{Call: call}
}

// MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall wrap *gomock.Call
type MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) Return(arg0 error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) Do(f func(context.Context, nvd.Product) error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall) DoAndReturn(f func(context.Context, nvd.Product) error) *MockVulnerabilityTasksRunnerUpdateNVDVulnerabilitiesForProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockScannerTaskRunner is a mock of ScannerTaskRunner interface.
type MockScannerTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerTaskRunnerMockRecorder
}

// MockScannerTaskRunnerMockRecorder is the mock recorder for MockScannerTaskRunner.
type MockScannerTaskRunnerMockRecorder struct {
	mock *MockScannerTaskRunner
}

// NewMockScannerTaskRunner creates a new mock instance.
func NewMockScannerTaskRunner(ctrl *gomock.Controller) *MockScannerTaskRunner {
	mock := &MockScannerTaskRunner{ctrl: ctrl}
	mock.recorder = &MockScannerTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannerTaskRunner) EXPECT() *MockScannerTaskRunnerMockRecorder {
	return m.recorder
}

// ScanPostgresDB mocks base method.
func (m *MockScannerTaskRunner) ScanPostgresDB(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPostgresDB", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPostgresDB indicates an expected call of ScanPostgresDB.
func (mr *MockScannerTaskRunnerMockRecorder) ScanPostgresDB(ctx, scan any) *MockScannerTaskRunnerScanPostgresDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPostgresDB", reflect.TypeOf((*MockScannerTaskRunner)(nil).ScanPostgresDB), ctx, scan)
	return &MockScannerTaskRunnerScanPostgresDBCall{Call: call}
}

// MockScannerTaskRunnerScanPostgresDBCall wrap *gomock.Call
type MockScannerTaskRunnerScanPostgresDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerScanPostgresDBCall) Return(arg0 error) *MockScannerTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerScanPostgresDBCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerScanPostgresDBCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerScanPostgresDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScanPostgresDBForPublicAccess mocks base method.
func (m *MockScannerTaskRunner) ScanPostgresDBForPublicAccess(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPostgresDBForPublicAccess", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPostgresDBForPublicAccess indicates an expected call of ScanPostgresDBForPublicAccess.
func (mr *MockScannerTaskRunnerMockRecorder) ScanPostgresDBForPublicAccess(ctx, scan any) *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPostgresDBForPublicAccess", reflect.TypeOf((*MockScannerTaskRunner)(nil).ScanPostgresDBForPublicAccess), ctx, scan)
	return &MockScannerTaskRunnerScanPostgresDBForPublicAccessCall{Call: call}
}

// MockScannerTaskRunnerScanPostgresDBForPublicAccessCall wrap *gomock.Call
type MockScannerTaskRunnerScanPostgresDBForPublicAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall) Return(arg0 error) *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerScanPostgresDBForPublicAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SchedulePostgresScan mocks base method.
func (m *MockScannerTaskRunner) SchedulePostgresScan(ctx context.Context, scan *queries.PostgresScan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulePostgresScan", ctx, scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// SchedulePostgresScan indicates an expected call of SchedulePostgresScan.
func (mr *MockScannerTaskRunnerMockRecorder) SchedulePostgresScan(ctx, scan any) *MockScannerTaskRunnerSchedulePostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulePostgresScan", reflect.TypeOf((*MockScannerTaskRunner)(nil).SchedulePostgresScan), ctx, scan)
	return &MockScannerTaskRunnerSchedulePostgresScanCall{Call: call}
}

// MockScannerTaskRunnerSchedulePostgresScanCall wrap *gomock.Call
type MockScannerTaskRunnerSchedulePostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScannerTaskRunnerSchedulePostgresScanCall) Return(arg0 error) *MockScannerTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScannerTaskRunnerSchedulePostgresScanCall) Do(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScannerTaskRunnerSchedulePostgresScanCall) DoAndReturn(f func(context.Context, *queries.PostgresScan) error) *MockScannerTaskRunnerSchedulePostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
