// Code generated by MockGen. DO NOT EDIT.
// Source: tasks.go
//
// Generated by this command:
//
//	mockgen -source=tasks.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskRunner is a mock of TaskRunner interface.
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner.
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance.
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// SendResetEmail mocks base method.
func (m *MockTaskRunner) SendResetEmail(ctx context.Context, address, subject, html, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResetEmail", ctx, address, subject, html, text)
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockTaskRunnerMockRecorder) SendResetEmail(ctx, address, subject, html, text any) *TaskRunnerSendResetEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockTaskRunner)(nil).SendResetEmail), ctx, address, subject, html, text)
	return &TaskRunnerSendResetEmailCall{Call: call}
}

// TaskRunnerSendResetEmailCall wrap *gomock.Call
type TaskRunnerSendResetEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TaskRunnerSendResetEmailCall) Return() *TaskRunnerSendResetEmailCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TaskRunnerSendResetEmailCall) Do(f func(context.Context, string, string, string, string)) *TaskRunnerSendResetEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TaskRunnerSendResetEmailCall) DoAndReturn(f func(context.Context, string, string, string, string)) *TaskRunnerSendResetEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEmailTasksRunner is a mock of EmailTasksRunner interface.
type MockEmailTasksRunner struct {
	ctrl     *gomock.Controller
	recorder *MockEmailTasksRunnerMockRecorder
}

// MockEmailTasksRunnerMockRecorder is the mock recorder for MockEmailTasksRunner.
type MockEmailTasksRunnerMockRecorder struct {
	mock *MockEmailTasksRunner
}

// NewMockEmailTasksRunner creates a new mock instance.
func NewMockEmailTasksRunner(ctrl *gomock.Controller) *MockEmailTasksRunner {
	mock := &MockEmailTasksRunner{ctrl: ctrl}
	mock.recorder = &MockEmailTasksRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailTasksRunner) EXPECT() *MockEmailTasksRunnerMockRecorder {
	return m.recorder
}

// SendResetEmail mocks base method.
func (m *MockEmailTasksRunner) SendResetEmail(ctx context.Context, address, subject, html, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResetEmail", ctx, address, subject, html, text)
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockEmailTasksRunnerMockRecorder) SendResetEmail(ctx, address, subject, html, text any) *EmailTasksRunnerSendResetEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockEmailTasksRunner)(nil).SendResetEmail), ctx, address, subject, html, text)
	return &EmailTasksRunnerSendResetEmailCall{Call: call}
}

// EmailTasksRunnerSendResetEmailCall wrap *gomock.Call
type EmailTasksRunnerSendResetEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *EmailTasksRunnerSendResetEmailCall) Return() *EmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *EmailTasksRunnerSendResetEmailCall) Do(f func(context.Context, string, string, string, string)) *EmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *EmailTasksRunnerSendResetEmailCall) DoAndReturn(f func(context.Context, string, string, string, string)) *EmailTasksRunnerSendResetEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
