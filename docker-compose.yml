version: "3.8"

services:
  redis:
    image: redis:latest
    networks:
      - licenta-network

  application:
    build: .
    networks:
      - licenta-network
    depends_on:
      - db
      - nats
      - redis
    env_file:
      - docker.env

  nats-worker:
    build: .
    command: nats
    networks:
      - licenta-network
    depends_on:
      - db
      - nats
    env_file:
      - docker.env

  swagger:
    image: swaggerapi/swagger-ui
    networks:
      - licenta-network
    volumes:
      - ./api/v1/spec.yaml:/swagger.json:ro
    environment:
      - SWAGGER_JSON=/swagger.json

  db:
    build:
      context: postgres/
    networks:
      - licenta-network
    ports:
      - "5432:5432"
    env_file:
      - docker.env

  nats:
    image: nats:latest
    command: -DV
    networks:
      - licenta-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    networks:
      - licenta-network
    depends_on:
      - application
    env_file:
      - docker.env
    environment:
      - PUBLIC_BACKEND_URL=http://application:5000

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "1000:80"
    networks:
      - licenta-network
    depends_on:
      - application
      - frontend
    environment:
      - UPSTREAM_API=application:5000
      - UPSTREAM_FRONTEND=frontend:3000

  otelcollector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    networks:
      - licenta-network

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_IMAGE_TAG:-latest}
    volumes:
      - "./jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    networks:
      - licenta-network
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}
      - PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - "16686:16686"

  prometheus:
    image: prom/prometheus:latest
    networks:
      - licenta-network
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
networks:
  licenta-network:
    driver: bridge
