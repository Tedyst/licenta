// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -package mock -typed -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	db "github.com/tedyst/licenta/db"
	queries "github.com/tedyst/licenta/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionQuerier is a mock of TransactionQuerier interface.
type MockTransactionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionQuerierMockRecorder
}

// MockTransactionQuerierMockRecorder is the mock recorder for MockTransactionQuerier.
type MockTransactionQuerierMockRecorder struct {
	mock *MockTransactionQuerier
}

// NewMockTransactionQuerier creates a new mock instance.
func NewMockTransactionQuerier(ctrl *gomock.Controller) *MockTransactionQuerier {
	mock := &MockTransactionQuerier{ctrl: ctrl}
	mock.recorder = &MockTransactionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionQuerier) EXPECT() *MockTransactionQuerierMockRecorder {
	return m.recorder
}

// BindPostgresScanToWorker mocks base method.
func (m *MockTransactionQuerier) BindPostgresScanToWorker(ctx context.Context, arg queries.BindPostgresScanToWorkerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPostgresScanToWorker", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPostgresScanToWorker indicates an expected call of BindPostgresScanToWorker.
func (mr *MockTransactionQuerierMockRecorder) BindPostgresScanToWorker(ctx, arg any) *MockTransactionQuerierBindPostgresScanToWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPostgresScanToWorker", reflect.TypeOf((*MockTransactionQuerier)(nil).BindPostgresScanToWorker), ctx, arg)
	return &MockTransactionQuerierBindPostgresScanToWorkerCall{Call: call}
}

// MockTransactionQuerierBindPostgresScanToWorkerCall wrap *gomock.Call
type MockTransactionQuerierBindPostgresScanToWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierBindPostgresScanToWorkerCall) Return(arg0 error) *MockTransactionQuerierBindPostgresScanToWorkerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierBindPostgresScanToWorkerCall) Do(f func(context.Context, queries.BindPostgresScanToWorkerParams) error) *MockTransactionQuerierBindPostgresScanToWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierBindPostgresScanToWorkerCall) DoAndReturn(f func(context.Context, queries.BindPostgresScanToWorkerParams) error) *MockTransactionQuerierBindPostgresScanToWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountUsers mocks base method.
func (m *MockTransactionQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTransactionQuerierMockRecorder) CountUsers(ctx any) *MockTransactionQuerierCountUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).CountUsers), ctx)
	return &MockTransactionQuerierCountUsersCall{Call: call}
}

// MockTransactionQuerierCountUsersCall wrap *gomock.Call
type MockTransactionQuerierCountUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCountUsersCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCountUsersCall) Do(f func(context.Context) (int64, error)) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCountUsersCall) DoAndReturn(f func(context.Context) (int64, error)) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerImageForProject(ctx context.Context, arg queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerImageForProject indicates an expected call of CreateDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerImageForProject(ctx, arg any) *MockTransactionQuerierCreateDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerImageForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerImageForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerImageForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) Return(arg0 *queries.ProjectDockerImage, arg1 error) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) Do(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerResultsForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerResultsForProject(ctx context.Context, arg []queries.CreateDockerLayerResultsForProjectParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerResultsForProject", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerResultsForProject indicates an expected call of CreateDockerLayerResultsForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerResultsForProject(ctx, arg any) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerResultsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerResultsForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerLayerResultsForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerLayerResultsForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerLayerResultsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) Do(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) DoAndReturn(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerScanForProject(ctx context.Context, arg queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerScanForProject indicates an expected call of CreateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerScannedLayerForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerScannedLayerForProject(ctx context.Context, arg queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerScannedLayerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerScannedLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerScannedLayerForProject indicates an expected call of CreateDockerScannedLayerForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerScannedLayerForProject(ctx, arg any) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerScannedLayerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerScannedLayerForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerScannedLayerForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerScannedLayerForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerScannedLayerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) Return(arg0 *queries.ProjectDockerScannedLayer, arg1 error) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) Do(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitCommitForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitCommitForProject(ctx context.Context, arg queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitScannedCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitForProject indicates an expected call of CreateGitCommitForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitCommitForProject(ctx, arg any) *MockTransactionQuerierCreateGitCommitForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitCommitForProject), ctx, arg)
	return &MockTransactionQuerierCreateGitCommitForProjectCall{Call: call}
}

// MockTransactionQuerierCreateGitCommitForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateGitCommitForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) Return(arg0 *queries.ProjectGitScannedCommit, arg1 error) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) Do(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitRepositoryForProject(ctx context.Context, arg queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepositoryForProject indicates an expected call of CreateGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitRepositoryForProject(ctx, arg any) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitRepositoryForProject), ctx, arg)
	return &MockTransactionQuerierCreateGitRepositoryForProjectCall{Call: call}
}

// MockTransactionQuerierCreateGitRepositoryForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) Return(arg0 *queries.ProjectGitRepository, arg1 error) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) Do(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitResultForCommit mocks base method.
func (m *MockTransactionQuerier) CreateGitResultForCommit(ctx context.Context, arg []queries.CreateGitResultForCommitParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitResultForCommit", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitResultForCommit indicates an expected call of CreateGitResultForCommit.
func (mr *MockTransactionQuerierMockRecorder) CreateGitResultForCommit(ctx, arg any) *MockTransactionQuerierCreateGitResultForCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitResultForCommit", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitResultForCommit), ctx, arg)
	return &MockTransactionQuerierCreateGitResultForCommitCall{Call: call}
}

// MockTransactionQuerierCreateGitResultForCommitCall wrap *gomock.Call
type MockTransactionQuerierCreateGitResultForCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitResultForCommitCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitResultForCommitCall) Do(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitResultForCommitCall) DoAndReturn(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCPE(ctx context.Context, arg queries.CreateNvdCPEParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCPE indicates an expected call of CreateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCPE(ctx, arg any) *MockTransactionQuerierCreateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCPE), ctx, arg)
	return &MockTransactionQuerierCreateNvdCPECall{Call: call}
}

// MockTransactionQuerierCreateNvdCPECall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCPECall) Return(arg0 *queries.NvdCpe, arg1 error) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCPECall) Do(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCve mocks base method.
func (m *MockTransactionQuerier) CreateNvdCve(ctx context.Context, arg queries.CreateNvdCveParams) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCve", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCve indicates an expected call of CreateNvdCve.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCve(ctx, arg any) *MockTransactionQuerierCreateNvdCveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCve", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCve), ctx, arg)
	return &MockTransactionQuerierCreateNvdCveCall{Call: call}
}

// MockTransactionQuerierCreateNvdCveCall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCveCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCveCall) Do(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCveCall) DoAndReturn(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCveCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCveCPE(ctx context.Context, arg queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCveCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCveCPE indicates an expected call of CreateNvdCveCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCveCPE(ctx, arg any) *MockTransactionQuerierCreateNvdCveCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCveCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCveCPE), ctx, arg)
	return &MockTransactionQuerierCreateNvdCveCPECall{Call: call}
}

// MockTransactionQuerierCreateNvdCveCPECall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCveCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCveCPECall) Return(arg0 *queries.NvdCveCpe, arg1 error) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCveCPECall) Do(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCveCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresScan mocks base method.
func (m *MockTransactionQuerier) CreatePostgresScan(ctx context.Context, arg queries.CreatePostgresScanParams) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresScan", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresScan indicates an expected call of CreatePostgresScan.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresScan(ctx, arg any) *MockTransactionQuerierCreatePostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresScan), ctx, arg)
	return &MockTransactionQuerierCreatePostgresScanCall{Call: call}
}

// MockTransactionQuerierCreatePostgresScanCall wrap *gomock.Call
type MockTransactionQuerierCreatePostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreatePostgresScanCall) Return(arg0 *queries.PostgresScan, arg1 error) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreatePostgresScanCall) Do(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreatePostgresScanCall) DoAndReturn(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) CreatePostgresScanBruteforceResult(ctx context.Context, arg queries.CreatePostgresScanBruteforceResultParams) (*queries.PostgresScanBruteforceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresScanBruteforceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresScanBruteforceResult indicates an expected call of CreatePostgresScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresScanBruteforceResult(ctx, arg any) *MockTransactionQuerierCreatePostgresScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresScanBruteforceResult), ctx, arg)
	return &MockTransactionQuerierCreatePostgresScanBruteforceResultCall{Call: call}
}

// MockTransactionQuerierCreatePostgresScanBruteforceResultCall wrap *gomock.Call
type MockTransactionQuerierCreatePostgresScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreatePostgresScanBruteforceResultCall) Return(arg0 *queries.PostgresScanBruteforceResult, arg1 error) *MockTransactionQuerierCreatePostgresScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreatePostgresScanBruteforceResultCall) Do(f func(context.Context, queries.CreatePostgresScanBruteforceResultParams) (*queries.PostgresScanBruteforceResult, error)) *MockTransactionQuerierCreatePostgresScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreatePostgresScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.CreatePostgresScanBruteforceResultParams) (*queries.PostgresScanBruteforceResult, error)) *MockTransactionQuerierCreatePostgresScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresScanResult mocks base method.
func (m *MockTransactionQuerier) CreatePostgresScanResult(ctx context.Context, arg queries.CreatePostgresScanResultParams) (*queries.PostgresScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresScanResult", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresScanResult indicates an expected call of CreatePostgresScanResult.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresScanResult(ctx, arg any) *MockTransactionQuerierCreatePostgresScanResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresScanResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresScanResult), ctx, arg)
	return &MockTransactionQuerierCreatePostgresScanResultCall{Call: call}
}

// MockTransactionQuerierCreatePostgresScanResultCall wrap *gomock.Call
type MockTransactionQuerierCreatePostgresScanResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreatePostgresScanResultCall) Return(arg0 *queries.PostgresScanResult, arg1 error) *MockTransactionQuerierCreatePostgresScanResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreatePostgresScanResultCall) Do(f func(context.Context, queries.CreatePostgresScanResultParams) (*queries.PostgresScanResult, error)) *MockTransactionQuerierCreatePostgresScanResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreatePostgresScanResultCall) DoAndReturn(f func(context.Context, queries.CreatePostgresScanResultParams) (*queries.PostgresScanResult, error)) *MockTransactionQuerierCreatePostgresScanResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) CreateResetPasswordToken(ctx context.Context, arg queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPasswordToken", ctx, arg)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPasswordToken indicates an expected call of CreateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) CreateResetPasswordToken(ctx, arg any) *MockTransactionQuerierCreateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateResetPasswordToken), ctx, arg)
	return &MockTransactionQuerierCreateResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierCreateResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierCreateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) Do(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) DoAndReturn(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSession mocks base method.
func (m *MockTransactionQuerier) CreateSession(ctx context.Context, arg queries.CreateSessionParams) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockTransactionQuerierMockRecorder) CreateSession(ctx, arg any) *MockTransactionQuerierCreateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateSession), ctx, arg)
	return &MockTransactionQuerierCreateSessionCall{Call: call}
}

// MockTransactionQuerierCreateSessionCall wrap *gomock.Call
type MockTransactionQuerierCreateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateSessionCall) Return(arg0 *queries.Session, arg1 error) *MockTransactionQuerierCreateSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateSessionCall) Do(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *MockTransactionQuerierCreateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateSessionCall) DoAndReturn(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *MockTransactionQuerierCreateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) CreateTOTPSecretForUser(ctx context.Context, arg queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTOTPSecretForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTOTPSecretForUser indicates an expected call of CreateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) CreateTOTPSecretForUser(ctx, arg any) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateTOTPSecretForUser), ctx, arg)
	return &MockTransactionQuerierCreateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierCreateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierCreateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) Do(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUser mocks base method.
func (m *MockTransactionQuerier) CreateUser(ctx context.Context, arg queries.CreateUserParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionQuerierMockRecorder) CreateUser(ctx, arg any) *MockTransactionQuerierCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateUser), ctx, arg)
	return &MockTransactionQuerierCreateUserCall{Call: call}
}

// MockTransactionQuerierCreateUserCall wrap *gomock.Call
type MockTransactionQuerierCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateUserCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateUserCall) Do(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateUserCall) DoAndReturn(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) DeleteDockerImageForProject(ctx context.Context, arg queries.DeleteDockerImageForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerImageForProject indicates an expected call of DeleteDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteDockerImageForProject(ctx, arg any) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteDockerImageForProject), ctx, arg)
	return &MockTransactionQuerierDeleteDockerImageForProjectCall{Call: call}
}

// MockTransactionQuerierDeleteDockerImageForProjectCall wrap *gomock.Call
type MockTransactionQuerierDeleteDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) Return(arg0 error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) Do(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) DeleteGitRepositoryForProject(ctx context.Context, arg queries.DeleteGitRepositoryForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitRepositoryForProject indicates an expected call of DeleteGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteGitRepositoryForProject(ctx, arg any) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteGitRepositoryForProject), ctx, arg)
	return &MockTransactionQuerierDeleteGitRepositoryForProjectCall{Call: call}
}

// MockTransactionQuerierDeleteGitRepositoryForProjectCall wrap *gomock.Call
type MockTransactionQuerierDeleteGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) Return(arg0 error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) Do(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSession mocks base method.
func (m *MockTransactionQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockTransactionQuerierMockRecorder) DeleteSession(ctx, id any) *MockTransactionQuerierDeleteSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSession), ctx, id)
	return &MockTransactionQuerierDeleteSessionCall{Call: call}
}

// MockTransactionQuerierDeleteSessionCall wrap *gomock.Call
type MockTransactionQuerierDeleteSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteSessionCall) Return(arg0 error) *MockTransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteSessionCall) Do(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierDeleteSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSessionsByUserID mocks base method.
func (m *MockTransactionQuerier) DeleteSessionsByUserID(ctx context.Context, userID sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionsByUserID indicates an expected call of DeleteSessionsByUserID.
func (mr *MockTransactionQuerierMockRecorder) DeleteSessionsByUserID(ctx, userID any) *MockTransactionQuerierDeleteSessionsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionsByUserID", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSessionsByUserID), ctx, userID)
	return &MockTransactionQuerierDeleteSessionsByUserIDCall{Call: call}
}

// MockTransactionQuerierDeleteSessionsByUserIDCall wrap *gomock.Call
type MockTransactionQuerierDeleteSessionsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteSessionsByUserIDCall) Return(arg0 error) *MockTransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteSessionsByUserIDCall) Do(f func(context.Context, sql.NullInt64) error) *MockTransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteSessionsByUserIDCall) DoAndReturn(f func(context.Context, sql.NullInt64) error) *MockTransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockTransactionQuerier) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteUser(ctx, id any) *MockTransactionQuerierDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteUser), ctx, id)
	return &MockTransactionQuerierDeleteUserCall{Call: call}
}

// MockTransactionQuerierDeleteUserCall wrap *gomock.Call
type MockTransactionQuerierDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteUserCall) Return(arg0 error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndTransaction mocks base method.
func (m *MockTransactionQuerier) EndTransaction(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTransactionQuerierMockRecorder) EndTransaction(ctx, err any) *MockTransactionQuerierEndTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).EndTransaction), ctx, err)
	return &MockTransactionQuerierEndTransactionCall{Call: call}
}

// MockTransactionQuerierEndTransactionCall wrap *gomock.Call
type MockTransactionQuerierEndTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierEndTransactionCall) Return(arg0 error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierEndTransactionCall) Do(f func(context.Context, error) error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierEndTransactionCall) DoAndReturn(f func(context.Context, error) error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsForProjectCount mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsForProjectCount(ctx context.Context, projectID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsForProjectCount", ctx, projectID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsForProjectCount indicates an expected call of GetBruteforcePasswordsForProjectCount.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsForProjectCount(ctx, projectID any) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsForProjectCount", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsForProjectCount), ctx, projectID)
	return &MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) Do(f func(context.Context, int64) (int64, error)) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsPaginated mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsPaginated(ctx context.Context, arg queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.DefaultBruteforcePassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsPaginated indicates an expected call of GetBruteforcePasswordsPaginated.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsPaginated(ctx, arg any) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsPaginated), ctx, arg)
	return &MockTransactionQuerierGetBruteforcePasswordsPaginatedCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsPaginatedCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) Return(arg0 []*queries.DefaultBruteforcePassword, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) Do(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) DoAndReturn(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsSpecificForProject mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsSpecificForProject(ctx context.Context, projectID int64) ([]sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsSpecificForProject", ctx, projectID)
	ret0, _ := ret[0].([]sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsSpecificForProject indicates an expected call of GetBruteforcePasswordsSpecificForProject.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsSpecificForProject(ctx, projectID any) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsSpecificForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsSpecificForProject), ctx, projectID)
	return &MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Return(arg0 []sql.NullString, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Do(f func(context.Context, int64) ([]sql.NullString, error)) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) DoAndReturn(f func(context.Context, int64) ([]sql.NullString, error)) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcedPasswordByHashAndUsername mocks base method.
func (m *MockTransactionQuerier) GetBruteforcedPasswordByHashAndUsername(ctx context.Context, arg queries.GetBruteforcedPasswordByHashAndUsernameParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcedPasswordByHashAndUsername", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcedPasswordByHashAndUsername indicates an expected call of GetBruteforcedPasswordByHashAndUsername.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcedPasswordByHashAndUsername(ctx, arg any) *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcedPasswordByHashAndUsername", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcedPasswordByHashAndUsername), ctx, arg)
	return &MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall{Call: call}
}

// MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall) Do(f func(context.Context, queries.GetBruteforcedPasswordByHashAndUsernameParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall) DoAndReturn(f func(context.Context, queries.GetBruteforcedPasswordByHashAndUsernameParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierGetBruteforcedPasswordByHashAndUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCPEByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCPEByProductAndVersion(ctx context.Context, arg queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPEByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPEByProductAndVersion indicates an expected call of GetCPEByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCPEByProductAndVersion(ctx, arg any) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPEByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCPEByProductAndVersion), ctx, arg)
	return &MockTransactionQuerierGetCPEByProductAndVersionCall{Call: call}
}

// MockTransactionQuerierGetCPEByProductAndVersionCall wrap *gomock.Call
type MockTransactionQuerierGetCPEByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) Return(arg0 *queries.NvdCpe, arg1 error) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) Do(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveByCveID indicates an expected call of GetCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetCveByCveID(ctx, cveID any) *MockTransactionQuerierGetCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveByCveID), ctx, cveID)
	return &MockTransactionQuerierGetCveByCveIDCall{Call: call}
}

// MockTransactionQuerierGetCveByCveIDCall wrap *gomock.Call
type MockTransactionQuerierGetCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveCpeByCveAndCpe mocks base method.
func (m *MockTransactionQuerier) GetCveCpeByCveAndCpe(ctx context.Context, arg queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveCpeByCveAndCpe", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveCpeByCveAndCpe indicates an expected call of GetCveCpeByCveAndCpe.
func (mr *MockTransactionQuerierMockRecorder) GetCveCpeByCveAndCpe(ctx, arg any) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveCpeByCveAndCpe", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveCpeByCveAndCpe), ctx, arg)
	return &MockTransactionQuerierGetCveCpeByCveAndCpeCall{Call: call}
}

// MockTransactionQuerierGetCveCpeByCveAndCpeCall wrap *gomock.Call
type MockTransactionQuerierGetCveCpeByCveAndCpeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) Return(arg0 *queries.NvdCveCpe, arg1 error) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) Do(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) DoAndReturn(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCvesByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCvesByProductAndVersion(ctx context.Context, arg queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCvesByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].([]*queries.GetCvesByProductAndVersionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCvesByProductAndVersion indicates an expected call of GetCvesByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCvesByProductAndVersion(ctx, arg any) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCvesByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCvesByProductAndVersion), ctx, arg)
	return &MockTransactionQuerierGetCvesByProductAndVersionCall{Call: call}
}

// MockTransactionQuerierGetCvesByProductAndVersionCall wrap *gomock.Call
type MockTransactionQuerierGetCvesByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) Return(arg0 []*queries.GetCvesByProductAndVersionRow, arg1 error) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) Do(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerImagesForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImagesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImagesForProject indicates an expected call of GetDockerImagesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerImagesForProject(ctx, projectID any) *MockTransactionQuerierGetDockerImagesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImagesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerImagesForProject), ctx, projectID)
	return &MockTransactionQuerierGetDockerImagesForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerImagesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerImagesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) Return(arg0 []*queries.ProjectDockerImage, arg1 error) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerLayerScanForProject(ctx context.Context, arg queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerLayerScanForProject indicates an expected call of GetDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierGetDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) Do(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerScannedLayersForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerScannedLayersForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerScannedLayersForProject indicates an expected call of GetDockerScannedLayersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerScannedLayersForProject(ctx, projectID any) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerScannedLayersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerScannedLayersForProject), ctx, projectID)
	return &MockTransactionQuerierGetDockerScannedLayersForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerScannedLayersForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerScannedLayersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitRepositoriesForProject mocks base method.
func (m *MockTransactionQuerier) GetGitRepositoriesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoriesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoriesForProject indicates an expected call of GetGitRepositoriesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitRepositoriesForProject(ctx, projectID any) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoriesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitRepositoriesForProject), ctx, projectID)
	return &MockTransactionQuerierGetGitRepositoriesForProjectCall{Call: call}
}

// MockTransactionQuerierGetGitRepositoriesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetGitRepositoriesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) Return(arg0 []*queries.ProjectGitRepository, arg1 error) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProject mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProject indicates an expected call of GetGitScannedCommitsForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProject(ctx, projectID any) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProject), ctx, projectID)
	return &MockTransactionQuerierGetGitScannedCommitsForProjectCall{Call: call}
}

// MockTransactionQuerierGetGitScannedCommitsForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetGitScannedCommitsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProjectBatch mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProjectBatch(ctx context.Context, arg queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProjectBatch", ctx, arg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProjectBatch indicates an expected call of GetGitScannedCommitsForProjectBatch.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProjectBatch(ctx, arg any) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProjectBatch", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProjectBatch), ctx, arg)
	return &MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall{Call: call}
}

// MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall wrap *gomock.Call
type MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) Do(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) DoAndReturn(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInvalidTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidTOTPSecretForUser indicates an expected call of GetInvalidTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetInvalidTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetInvalidTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierGetInvalidTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierGetInvalidTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierGetInvalidTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCPEsByDBType mocks base method.
func (m *MockTransactionQuerier) GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCPEsByDBType", ctx, databaseType)
	ret0, _ := ret[0].([]*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCPEsByDBType indicates an expected call of GetNvdCPEsByDBType.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCPEsByDBType(ctx, databaseType any) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCPEsByDBType", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCPEsByDBType), ctx, databaseType)
	return &MockTransactionQuerierGetNvdCPEsByDBTypeCall{Call: call}
}

// MockTransactionQuerierGetNvdCPEsByDBTypeCall wrap *gomock.Call
type MockTransactionQuerierGetNvdCPEsByDBTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) Return(arg0 []*queries.NvdCpe, arg1 error) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) Do(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) DoAndReturn(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetNvdCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCveByCveID indicates an expected call of GetNvdCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCveByCveID(ctx, cveID any) *MockTransactionQuerierGetNvdCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCveByCveID), ctx, cveID)
	return &MockTransactionQuerierGetNvdCveByCveIDCall{Call: call}
}

// MockTransactionQuerierGetNvdCveByCveIDCall wrap *gomock.Call
type MockTransactionQuerierGetNvdCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationByName mocks base method.
func (m *MockTransactionQuerier) GetOrganizationByName(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationByName(ctx, name any) *MockTransactionQuerierGetOrganizationByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationByName), ctx, name)
	return &MockTransactionQuerierGetOrganizationByNameCall{Call: call}
}

// MockTransactionQuerierGetOrganizationByNameCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationByNameCall) Return(arg0 *queries.Organization, arg1 error) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationByNameCall) Do(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationByNameCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationMembers mocks base method.
func (m *MockTransactionQuerier) GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembers", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembers indicates an expected call of GetOrganizationMembers.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationMembers(ctx, organizationID any) *MockTransactionQuerierGetOrganizationMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationMembers), ctx, organizationID)
	return &MockTransactionQuerierGetOrganizationMembersCall{Call: call}
}

// MockTransactionQuerierGetOrganizationMembersCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationMembersCall) Return(arg0 []*queries.OrganizationMember, arg1 error) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationMembersCall) Do(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationPermissionsForUser(ctx context.Context, arg queries.GetOrganizationPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationPermissionsForUser indicates an expected call of GetOrganizationPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationPermissionsForUser(ctx, arg any) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationPermissionsForUser), ctx, arg)
	return &MockTransactionQuerierGetOrganizationPermissionsForUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationPermissionsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) Return(arg0 int16, arg1 error) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) Do(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationUser(ctx context.Context, arg queries.GetOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUser indicates an expected call of GetOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationUser(ctx, arg any) *MockTransactionQuerierGetOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationUser), ctx, arg)
	return &MockTransactionQuerierGetOrganizationUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationUserCall) Do(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsByUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsByUser(ctx context.Context, userID int64) ([]*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsByUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsByUser indicates an expected call of GetOrganizationsByUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsByUser(ctx, userID any) *MockTransactionQuerierGetOrganizationsByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsByUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsByUser), ctx, userID)
	return &MockTransactionQuerierGetOrganizationsByUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationsByUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationsByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationsByUserCall) Return(arg0 []*queries.Organization, arg1 error) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationsByUserCall) Do(f func(context.Context, int64) ([]*queries.Organization, error)) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationsByUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Organization, error)) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresDatabase mocks base method.
func (m *MockTransactionQuerier) GetPostgresDatabase(ctx context.Context, id int64) (*queries.GetPostgresDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresDatabase", ctx, id)
	ret0, _ := ret[0].(*queries.GetPostgresDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresDatabase indicates an expected call of GetPostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresDatabase(ctx, id any) *MockTransactionQuerierGetPostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresDatabase), ctx, id)
	return &MockTransactionQuerierGetPostgresDatabaseCall{Call: call}
}

// MockTransactionQuerierGetPostgresDatabaseCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresDatabaseCall) Return(arg0 *queries.GetPostgresDatabaseRow, arg1 error) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresDatabaseCall) Do(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresDatabaseCall) DoAndReturn(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScan mocks base method.
func (m *MockTransactionQuerier) GetPostgresScan(ctx context.Context, id int64) (*queries.GetPostgresScanRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScan", ctx, id)
	ret0, _ := ret[0].(*queries.GetPostgresScanRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScan indicates an expected call of GetPostgresScan.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScan(ctx, id any) *MockTransactionQuerierGetPostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScan), ctx, id)
	return &MockTransactionQuerierGetPostgresScanCall{Call: call}
}

// MockTransactionQuerierGetPostgresScanCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScanCall) Return(arg0 *queries.GetPostgresScanRow, arg1 error) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScanCall) Do(f func(context.Context, int64) (*queries.GetPostgresScanRow, error)) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScanCall) DoAndReturn(f func(context.Context, int64) (*queries.GetPostgresScanRow, error)) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScanResults mocks base method.
func (m *MockTransactionQuerier) GetPostgresScanResults(ctx context.Context, postgresScanID int64) ([]*queries.PostgresScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScanResults", ctx, postgresScanID)
	ret0, _ := ret[0].([]*queries.PostgresScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScanResults indicates an expected call of GetPostgresScanResults.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScanResults(ctx, postgresScanID any) *MockTransactionQuerierGetPostgresScanResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScanResults", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScanResults), ctx, postgresScanID)
	return &MockTransactionQuerierGetPostgresScanResultsCall{Call: call}
}

// MockTransactionQuerierGetPostgresScanResultsCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScanResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScanResultsCall) Return(arg0 []*queries.PostgresScanResult, arg1 error) *MockTransactionQuerierGetPostgresScanResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScanResultsCall) Do(f func(context.Context, int64) ([]*queries.PostgresScanResult, error)) *MockTransactionQuerierGetPostgresScanResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScanResultsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.PostgresScanResult, error)) *MockTransactionQuerierGetPostgresScanResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScansForDatabase mocks base method.
func (m *MockTransactionQuerier) GetPostgresScansForDatabase(ctx context.Context, postgresDatabaseID int64) ([]*queries.GetPostgresScansForDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScansForDatabase", ctx, postgresDatabaseID)
	ret0, _ := ret[0].([]*queries.GetPostgresScansForDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScansForDatabase indicates an expected call of GetPostgresScansForDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScansForDatabase(ctx, postgresDatabaseID any) *MockTransactionQuerierGetPostgresScansForDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScansForDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScansForDatabase), ctx, postgresDatabaseID)
	return &MockTransactionQuerierGetPostgresScansForDatabaseCall{Call: call}
}

// MockTransactionQuerierGetPostgresScansForDatabaseCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScansForDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScansForDatabaseCall) Return(arg0 []*queries.GetPostgresScansForDatabaseRow, arg1 error) *MockTransactionQuerierGetPostgresScansForDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScansForDatabaseCall) Do(f func(context.Context, int64) ([]*queries.GetPostgresScansForDatabaseRow, error)) *MockTransactionQuerierGetPostgresScansForDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScansForDatabaseCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetPostgresScansForDatabaseRow, error)) *MockTransactionQuerierGetPostgresScansForDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScansForProject mocks base method.
func (m *MockTransactionQuerier) GetPostgresScansForProject(ctx context.Context, projectID int64) ([]*queries.GetPostgresScansForProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScansForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.GetPostgresScansForProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScansForProject indicates an expected call of GetPostgresScansForProject.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScansForProject(ctx, projectID any) *MockTransactionQuerierGetPostgresScansForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScansForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScansForProject), ctx, projectID)
	return &MockTransactionQuerierGetPostgresScansForProjectCall{Call: call}
}

// MockTransactionQuerierGetPostgresScansForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScansForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScansForProjectCall) Return(arg0 []*queries.GetPostgresScansForProjectRow, arg1 error) *MockTransactionQuerierGetPostgresScansForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScansForProjectCall) Do(f func(context.Context, int64) ([]*queries.GetPostgresScansForProjectRow, error)) *MockTransactionQuerierGetPostgresScansForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScansForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetPostgresScansForProjectRow, error)) *MockTransactionQuerierGetPostgresScansForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectByOrganizationAndName mocks base method.
func (m *MockTransactionQuerier) GetProjectByOrganizationAndName(ctx context.Context, arg queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOrganizationAndName", ctx, arg)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOrganizationAndName indicates an expected call of GetProjectByOrganizationAndName.
func (mr *MockTransactionQuerierMockRecorder) GetProjectByOrganizationAndName(ctx, arg any) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOrganizationAndName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectByOrganizationAndName), ctx, arg)
	return &MockTransactionQuerierGetProjectByOrganizationAndNameCall{Call: call}
}

// MockTransactionQuerierGetProjectByOrganizationAndNameCall wrap *gomock.Call
type MockTransactionQuerierGetProjectByOrganizationAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) Return(arg0 *queries.Project, arg1 error) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) Do(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) DoAndReturn(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMembers mocks base method.
func (m *MockTransactionQuerier) GetProjectMembers(ctx context.Context, projectID int64) ([]*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockTransactionQuerierMockRecorder) GetProjectMembers(ctx, projectID any) *MockTransactionQuerierGetProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectMembers), ctx, projectID)
	return &MockTransactionQuerierGetProjectMembersCall{Call: call}
}

// MockTransactionQuerierGetProjectMembersCall wrap *gomock.Call
type MockTransactionQuerierGetProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectMembersCall) Return(arg0 []*queries.ProjectMember, arg1 error) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectMembersCall) Do(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetProjectPermissionsForUser(ctx context.Context, arg queries.GetProjectPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPermissionsForUser indicates an expected call of GetProjectPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectPermissionsForUser(ctx, arg any) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectPermissionsForUser), ctx, arg)
	return &MockTransactionQuerierGetProjectPermissionsForUserCall{Call: call}
}

// MockTransactionQuerierGetProjectPermissionsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetProjectPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) Return(arg0 int16, arg1 error) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) Do(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectUser mocks base method.
func (m *MockTransactionQuerier) GetProjectUser(ctx context.Context, arg queries.GetProjectUserParams) (*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectUser", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectUser indicates an expected call of GetProjectUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectUser(ctx, arg any) *MockTransactionQuerierGetProjectUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectUser), ctx, arg)
	return &MockTransactionQuerierGetProjectUserCall{Call: call}
}

// MockTransactionQuerierGetProjectUserCall wrap *gomock.Call
type MockTransactionQuerierGetProjectUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectUserCall) Return(arg0 *queries.ProjectMember, arg1 error) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectUserCall) Do(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectUserCall) DoAndReturn(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectsByOrganization mocks base method.
func (m *MockTransactionQuerier) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOrganization", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByOrganization indicates an expected call of GetProjectsByOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetProjectsByOrganization(ctx, organizationID any) *MockTransactionQuerierGetProjectsByOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectsByOrganization), ctx, organizationID)
	return &MockTransactionQuerierGetProjectsByOrganizationCall{Call: call}
}

// MockTransactionQuerierGetProjectsByOrganizationCall wrap *gomock.Call
type MockTransactionQuerierGetProjectsByOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) Return(arg0 []*queries.Project, arg1 error) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRawPool mocks base method.
func (m *MockTransactionQuerier) GetRawPool() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawPool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetRawPool indicates an expected call of GetRawPool.
func (mr *MockTransactionQuerierMockRecorder) GetRawPool() *MockTransactionQuerierGetRawPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawPool", reflect.TypeOf((*MockTransactionQuerier)(nil).GetRawPool))
	return &MockTransactionQuerierGetRawPoolCall{Call: call}
}

// MockTransactionQuerierGetRawPoolCall wrap *gomock.Call
type MockTransactionQuerierGetRawPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetRawPoolCall) Return(arg0 *pgxpool.Pool) *MockTransactionQuerierGetRawPoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetRawPoolCall) Do(f func() *pgxpool.Pool) *MockTransactionQuerierGetRawPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetRawPoolCall) DoAndReturn(f func() *pgxpool.Pool) *MockTransactionQuerierGetRawPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordToken indicates an expected call of GetResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) GetResetPasswordToken(ctx, id any) *MockTransactionQuerierGetResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetResetPasswordToken), ctx, id)
	return &MockTransactionQuerierGetResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierGetResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierGetResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSession mocks base method.
func (m *MockTransactionQuerier) GetSession(ctx context.Context, id uuid.UUID) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockTransactionQuerierMockRecorder) GetSession(ctx, id any) *MockTransactionQuerierGetSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockTransactionQuerier)(nil).GetSession), ctx, id)
	return &MockTransactionQuerierGetSessionCall{Call: call}
}

// MockTransactionQuerierGetSessionCall wrap *gomock.Call
type MockTransactionQuerierGetSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetSessionCall) Return(arg0 *queries.Session, arg1 error) *MockTransactionQuerierGetSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetSessionCall) Do(f func(context.Context, uuid.UUID) (*queries.Session, error)) *MockTransactionQuerierGetSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.Session, error)) *MockTransactionQuerierGetSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPSecretForUser indicates an expected call of GetTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierGetTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierGetTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierGetTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierGetTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockTransactionQuerier) GetUser(ctx context.Context, id int64) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionQuerierMockRecorder) GetUser(ctx, id any) *MockTransactionQuerierGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUser), ctx, id)
	return &MockTransactionQuerierGetUserCall{Call: call}
}

// MockTransactionQuerierGetUserCall wrap *gomock.Call
type MockTransactionQuerierGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserCall) Do(f func(context.Context, int64) (*queries.User, error)) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserCall) DoAndReturn(f func(context.Context, int64) (*queries.User, error)) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByUsernameOrEmail(ctx context.Context, username string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", ctx, username)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByUsernameOrEmail(ctx, username any) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByUsernameOrEmail), ctx, username)
	return &MockTransactionQuerierGetUserByUsernameOrEmailCall{Call: call}
}

// MockTransactionQuerierGetUserByUsernameOrEmailCall wrap *gomock.Call
type MockTransactionQuerierGetUserByUsernameOrEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) Do(f func(context.Context, string) (*queries.User, error)) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) DoAndReturn(f func(context.Context, string) (*queries.User, error)) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerByToken mocks base method.
func (m *MockTransactionQuerier) GetWorkerByToken(ctx context.Context, token string) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerByToken", ctx, token)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerByToken indicates an expected call of GetWorkerByToken.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerByToken(ctx, token any) *MockTransactionQuerierGetWorkerByTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerByToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerByToken), ctx, token)
	return &MockTransactionQuerierGetWorkerByTokenCall{Call: call}
}

// MockTransactionQuerierGetWorkerByTokenCall wrap *gomock.Call
type MockTransactionQuerierGetWorkerByTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkerByTokenCall) Return(arg0 *queries.Worker, arg1 error) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkerByTokenCall) Do(f func(context.Context, string) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkerByTokenCall) DoAndReturn(f func(context.Context, string) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerForPostgresScan mocks base method.
func (m *MockTransactionQuerier) GetWorkerForPostgresScan(ctx context.Context, id int64) (*queries.GetWorkerForPostgresScanRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerForPostgresScan", ctx, id)
	ret0, _ := ret[0].(*queries.GetWorkerForPostgresScanRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerForPostgresScan indicates an expected call of GetWorkerForPostgresScan.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerForPostgresScan(ctx, id any) *MockTransactionQuerierGetWorkerForPostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerForPostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerForPostgresScan), ctx, id)
	return &MockTransactionQuerierGetWorkerForPostgresScanCall{Call: call}
}

// MockTransactionQuerierGetWorkerForPostgresScanCall wrap *gomock.Call
type MockTransactionQuerierGetWorkerForPostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkerForPostgresScanCall) Return(arg0 *queries.GetWorkerForPostgresScanRow, arg1 error) *MockTransactionQuerierGetWorkerForPostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkerForPostgresScanCall) Do(f func(context.Context, int64) (*queries.GetWorkerForPostgresScanRow, error)) *MockTransactionQuerierGetWorkerForPostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkerForPostgresScanCall) DoAndReturn(f func(context.Context, int64) (*queries.GetWorkerForPostgresScanRow, error)) *MockTransactionQuerierGetWorkerForPostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkersForProject mocks base method.
func (m *MockTransactionQuerier) GetWorkersForProject(ctx context.Context, projectID int64) ([]*queries.GetWorkersForProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkersForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.GetWorkersForProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkersForProject indicates an expected call of GetWorkersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetWorkersForProject(ctx, projectID any) *MockTransactionQuerierGetWorkersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkersForProject), ctx, projectID)
	return &MockTransactionQuerierGetWorkersForProjectCall{Call: call}
}

// MockTransactionQuerierGetWorkersForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetWorkersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkersForProjectCall) Return(arg0 []*queries.GetWorkersForProjectRow, arg1 error) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkersForProjectCall) Do(f func(context.Context, int64) ([]*queries.GetWorkersForProjectRow, error)) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetWorkersForProjectRow, error)) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertBruteforcePasswords mocks base method.
func (m *MockTransactionQuerier) InsertBruteforcePasswords(ctx context.Context, passwords []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBruteforcePasswords", ctx, passwords)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBruteforcePasswords indicates an expected call of InsertBruteforcePasswords.
func (mr *MockTransactionQuerierMockRecorder) InsertBruteforcePasswords(ctx, passwords any) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBruteforcePasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).InsertBruteforcePasswords), ctx, passwords)
	return &MockTransactionQuerierInsertBruteforcePasswordsCall{Call: call}
}

// MockTransactionQuerierInsertBruteforcePasswordsCall wrap *gomock.Call
type MockTransactionQuerierInsertBruteforcePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) Return(arg0 error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) Do(f func(context.Context, []string) error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) DoAndReturn(f func(context.Context, []string) error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertBruteforcedPassword mocks base method.
func (m *MockTransactionQuerier) InsertBruteforcedPassword(ctx context.Context, arg queries.InsertBruteforcedPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBruteforcedPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBruteforcedPassword indicates an expected call of InsertBruteforcedPassword.
func (mr *MockTransactionQuerierMockRecorder) InsertBruteforcedPassword(ctx, arg any) *MockTransactionQuerierInsertBruteforcedPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBruteforcedPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).InsertBruteforcedPassword), ctx, arg)
	return &MockTransactionQuerierInsertBruteforcedPasswordCall{Call: call}
}

// MockTransactionQuerierInsertBruteforcedPasswordCall wrap *gomock.Call
type MockTransactionQuerierInsertBruteforcedPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInsertBruteforcedPasswordCall) Return(arg0 error) *MockTransactionQuerierInsertBruteforcedPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInsertBruteforcedPasswordCall) Do(f func(context.Context, queries.InsertBruteforcedPasswordParams) error) *MockTransactionQuerierInsertBruteforcedPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInsertBruteforcedPasswordCall) DoAndReturn(f func(context.Context, queries.InsertBruteforcedPasswordParams) error) *MockTransactionQuerierInsertBruteforcedPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateResetPasswordToken indicates an expected call of InvalidateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) InvalidateResetPasswordToken(ctx, id any) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateResetPasswordToken), ctx, id)
	return &MockTransactionQuerierInvalidateResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierInvalidateResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierInvalidateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) Return(arg0 error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateTOTPSecretForUser indicates an expected call of InvalidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) InvalidateTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierInvalidateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierInvalidateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierInvalidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) Return(arg0 error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockTransactionQuerier) ListUsers(ctx context.Context, arg queries.ListUsersParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransactionQuerierMockRecorder) ListUsers(ctx, arg any) *MockTransactionQuerierListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsers), ctx, arg)
	return &MockTransactionQuerierListUsersCall{Call: call}
}

// MockTransactionQuerierListUsersCall wrap *gomock.Call
type MockTransactionQuerierListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierListUsersCall) Return(arg0 []*queries.User, arg1 error) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierListUsersCall) Do(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierListUsersCall) DoAndReturn(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersPaginated mocks base method.
func (m *MockTransactionQuerier) ListUsersPaginated(ctx context.Context, arg queries.ListUsersPaginatedParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersPaginated indicates an expected call of ListUsersPaginated.
func (mr *MockTransactionQuerierMockRecorder) ListUsersPaginated(ctx, arg any) *MockTransactionQuerierListUsersPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsersPaginated), ctx, arg)
	return &MockTransactionQuerierListUsersPaginatedCall{Call: call}
}

// MockTransactionQuerierListUsersPaginatedCall wrap *gomock.Call
type MockTransactionQuerierListUsersPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierListUsersPaginatedCall) Return(arg0 []*queries.User, arg1 error) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierListUsersPaginatedCall) Do(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierListUsersPaginatedCall) DoAndReturn(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTransaction mocks base method.
func (m *MockTransactionQuerier) StartTransaction(ctx context.Context) (db.TransactionQuerier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.TransactionQuerier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionQuerierMockRecorder) StartTransaction(ctx any) *MockTransactionQuerierStartTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).StartTransaction), ctx)
	return &MockTransactionQuerierStartTransactionCall{Call: call}
}

// MockTransactionQuerierStartTransactionCall wrap *gomock.Call
type MockTransactionQuerierStartTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierStartTransactionCall) Return(arg0 db.TransactionQuerier, arg1 error) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierStartTransactionCall) Do(f func(context.Context) (db.TransactionQuerier, error)) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierStartTransactionCall) DoAndReturn(f func(context.Context) (db.TransactionQuerier, error)) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) UpdateDockerLayerScanForProject(ctx context.Context, arg queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDockerLayerScanForProject indicates an expected call of UpdateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) UpdateDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierUpdateDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierUpdateDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierUpdateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNvdCPE mocks base method.
func (m *MockTransactionQuerier) UpdateNvdCPE(ctx context.Context, arg queries.UpdateNvdCPEParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNvdCPE indicates an expected call of UpdateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) UpdateNvdCPE(ctx, arg any) *MockTransactionQuerierUpdateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateNvdCPE), ctx, arg)
	return &MockTransactionQuerierUpdateNvdCPECall{Call: call}
}

// MockTransactionQuerierUpdateNvdCPECall wrap *gomock.Call
type MockTransactionQuerierUpdateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateNvdCPECall) Return(arg0 error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateNvdCPECall) Do(f func(context.Context, queries.UpdateNvdCPEParams) error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateNvdCPECall) DoAndReturn(f func(context.Context, queries.UpdateNvdCPEParams) error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresDatabase mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresDatabase(ctx context.Context, arg queries.UpdatePostgresDatabaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresDatabase", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresDatabase indicates an expected call of UpdatePostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresDatabase(ctx, arg any) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresDatabase), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresDatabaseCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresDatabaseCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) Do(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresScanBruteforceResult(ctx context.Context, arg queries.UpdatePostgresScanBruteforceResultParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresScanBruteforceResult indicates an expected call of UpdatePostgresScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresScanBruteforceResult(ctx, arg any) *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresScanBruteforceResult), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresScanBruteforceResultCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresScanBruteforceResultCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall) Do(f func(context.Context, queries.UpdatePostgresScanBruteforceResultParams) error) *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresScanBruteforceResultParams) error) *MockTransactionQuerierUpdatePostgresScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresScanStatus mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresScanStatus(ctx context.Context, arg queries.UpdatePostgresScanStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresScanStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresScanStatus indicates an expected call of UpdatePostgresScanStatus.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresScanStatus(ctx, arg any) *MockTransactionQuerierUpdatePostgresScanStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresScanStatus", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresScanStatus), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresScanStatusCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresScanStatusCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresScanStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresScanStatusCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresScanStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresScanStatusCall) Do(f func(context.Context, queries.UpdatePostgresScanStatusParams) error) *MockTransactionQuerierUpdatePostgresScanStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresScanStatusCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresScanStatusParams) error) *MockTransactionQuerierUpdatePostgresScanStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresVersion mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresVersion(ctx context.Context, arg queries.UpdatePostgresVersionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresVersion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresVersion indicates an expected call of UpdatePostgresVersion.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresVersion(ctx, arg any) *MockTransactionQuerierUpdatePostgresVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresVersion), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresVersionCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresVersionCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresVersionCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresVersionCall) Do(f func(context.Context, queries.UpdatePostgresVersionParams) error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresVersionCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresVersionParams) error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSession mocks base method.
func (m *MockTransactionQuerier) UpdateSession(ctx context.Context, arg queries.UpdateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockTransactionQuerierMockRecorder) UpdateSession(ctx, arg any) *MockTransactionQuerierUpdateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateSession), ctx, arg)
	return &MockTransactionQuerierUpdateSessionCall{Call: call}
}

// MockTransactionQuerierUpdateSessionCall wrap *gomock.Call
type MockTransactionQuerierUpdateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateSessionCall) Return(arg0 error) *MockTransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateSessionCall) Do(f func(context.Context, queries.UpdateSessionParams) error) *MockTransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateSessionCall) DoAndReturn(f func(context.Context, queries.UpdateSessionParams) error) *MockTransactionQuerierUpdateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockTransactionQuerier) UpdateUser(ctx context.Context, arg queries.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionQuerierMockRecorder) UpdateUser(ctx, arg any) *MockTransactionQuerierUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUser), ctx, arg)
	return &MockTransactionQuerierUpdateUserCall{Call: call}
}

// MockTransactionQuerierUpdateUserCall wrap *gomock.Call
type MockTransactionQuerierUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateUserCall) Return(arg0 error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateUserCall) Do(f func(context.Context, queries.UpdateUserParams) error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateUserCall) DoAndReturn(f func(context.Context, queries.UpdateUserParams) error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockTransactionQuerier) UpdateUserPassword(ctx context.Context, arg queries.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockTransactionQuerierMockRecorder) UpdateUserPassword(ctx, arg any) *MockTransactionQuerierUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUserPassword), ctx, arg)
	return &MockTransactionQuerierUpdateUserPasswordCall{Call: call}
}

// MockTransactionQuerierUpdateUserPasswordCall wrap *gomock.Call
type MockTransactionQuerierUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateUserPasswordCall) Return(arg0 error) *MockTransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateUserPasswordCall) Do(f func(context.Context, queries.UpdateUserPasswordParams) error) *MockTransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateUserPasswordCall) DoAndReturn(f func(context.Context, queries.UpdateUserPasswordParams) error) *MockTransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTOTPSecretForUser indicates an expected call of ValidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) ValidateTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).ValidateTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierValidateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierValidateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierValidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) Return(arg0 error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
