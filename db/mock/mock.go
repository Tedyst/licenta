// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/tedyst/licenta/db"
	queries "github.com/tedyst/licenta/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionQuerier is a mock of TransactionQuerier interface.
type MockTransactionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionQuerierMockRecorder
}

// MockTransactionQuerierMockRecorder is the mock recorder for MockTransactionQuerier.
type MockTransactionQuerierMockRecorder struct {
	mock *MockTransactionQuerier
}

// NewMockTransactionQuerier creates a new mock instance.
func NewMockTransactionQuerier(ctrl *gomock.Controller) *MockTransactionQuerier {
	mock := &MockTransactionQuerier{ctrl: ctrl}
	mock.recorder = &MockTransactionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionQuerier) EXPECT() *MockTransactionQuerierMockRecorder {
	return m.recorder
}

// CountUsers mocks base method.
func (m *MockTransactionQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTransactionQuerierMockRecorder) CountUsers(ctx any) *TransactionQuerierCountUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).CountUsers), ctx)
	return &TransactionQuerierCountUsersCall{Call: call}
}

// TransactionQuerierCountUsersCall wrap *gomock.Call
type TransactionQuerierCountUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCountUsersCall) Return(arg0 int64, arg1 error) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCountUsersCall) Do(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCountUsersCall) DoAndReturn(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) CreateResetPasswordToken(ctx context.Context, arg queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPasswordToken", ctx, arg)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPasswordToken indicates an expected call of CreateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) CreateResetPasswordToken(ctx, arg any) *TransactionQuerierCreateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateResetPasswordToken), ctx, arg)
	return &TransactionQuerierCreateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierCreateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierCreateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateResetPasswordTokenCall) Do(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateResetPasswordTokenCall) DoAndReturn(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSession mocks base method.
func (m *MockTransactionQuerier) CreateSession(ctx context.Context, arg queries.CreateSessionParams) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockTransactionQuerierMockRecorder) CreateSession(ctx, arg any) *TransactionQuerierCreateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateSession), ctx, arg)
	return &TransactionQuerierCreateSessionCall{Call: call}
}

// TransactionQuerierCreateSessionCall wrap *gomock.Call
type TransactionQuerierCreateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateSessionCall) Return(arg0 *queries.Session, arg1 error) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateSessionCall) Do(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateSessionCall) DoAndReturn(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) CreateTOTPSecretForUser(ctx context.Context, arg queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTOTPSecretForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTOTPSecretForUser indicates an expected call of CreateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) CreateTOTPSecretForUser(ctx, arg any) *TransactionQuerierCreateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateTOTPSecretForUser), ctx, arg)
	return &TransactionQuerierCreateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierCreateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierCreateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Do(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUser mocks base method.
func (m *MockTransactionQuerier) CreateUser(ctx context.Context, arg queries.CreateUserParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionQuerierMockRecorder) CreateUser(ctx, arg any) *TransactionQuerierCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateUser), ctx, arg)
	return &TransactionQuerierCreateUserCall{Call: call}
}

// TransactionQuerierCreateUserCall wrap *gomock.Call
type TransactionQuerierCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateUserCall) Do(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateUserCall) DoAndReturn(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSession mocks base method.
func (m *MockTransactionQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockTransactionQuerierMockRecorder) DeleteSession(ctx, id any) *TransactionQuerierDeleteSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSession), ctx, id)
	return &TransactionQuerierDeleteSessionCall{Call: call}
}

// TransactionQuerierDeleteSessionCall wrap *gomock.Call
type TransactionQuerierDeleteSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteSessionCall) Return(arg0 error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteSessionCall) Do(f func(context.Context, uuid.UUID) error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSessionsByUserID mocks base method.
func (m *MockTransactionQuerier) DeleteSessionsByUserID(ctx context.Context, userID sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionsByUserID indicates an expected call of DeleteSessionsByUserID.
func (mr *MockTransactionQuerierMockRecorder) DeleteSessionsByUserID(ctx, userID any) *TransactionQuerierDeleteSessionsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionsByUserID", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSessionsByUserID), ctx, userID)
	return &TransactionQuerierDeleteSessionsByUserIDCall{Call: call}
}

// TransactionQuerierDeleteSessionsByUserIDCall wrap *gomock.Call
type TransactionQuerierDeleteSessionsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteSessionsByUserIDCall) Return(arg0 error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteSessionsByUserIDCall) Do(f func(context.Context, sql.NullInt64) error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteSessionsByUserIDCall) DoAndReturn(f func(context.Context, sql.NullInt64) error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockTransactionQuerier) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteUser(ctx, id any) *TransactionQuerierDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteUser), ctx, id)
	return &TransactionQuerierDeleteUserCall{Call: call}
}

// TransactionQuerierDeleteUserCall wrap *gomock.Call
type TransactionQuerierDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteUserCall) Return(arg0 error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndTransaction mocks base method.
func (m *MockTransactionQuerier) EndTransaction(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTransactionQuerierMockRecorder) EndTransaction(ctx, err any) *TransactionQuerierEndTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).EndTransaction), ctx, err)
	return &TransactionQuerierEndTransactionCall{Call: call}
}

// TransactionQuerierEndTransactionCall wrap *gomock.Call
type TransactionQuerierEndTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierEndTransactionCall) Return(arg0 error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierEndTransactionCall) Do(f func(context.Context, error) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierEndTransactionCall) DoAndReturn(f func(context.Context, error) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInvalidTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidTOTPSecretForUser indicates an expected call of GetInvalidTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetInvalidTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetInvalidTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetInvalidTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetInvalidTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetInvalidTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordToken indicates an expected call of GetResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) GetResetPasswordToken(ctx, id any) *TransactionQuerierGetResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetResetPasswordToken), ctx, id)
	return &TransactionQuerierGetResetPasswordTokenCall{Call: call}
}

// TransactionQuerierGetResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierGetResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSession mocks base method.
func (m *MockTransactionQuerier) GetSession(ctx context.Context, id uuid.UUID) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockTransactionQuerierMockRecorder) GetSession(ctx, id any) *TransactionQuerierGetSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockTransactionQuerier)(nil).GetSession), ctx, id)
	return &TransactionQuerierGetSessionCall{Call: call}
}

// TransactionQuerierGetSessionCall wrap *gomock.Call
type TransactionQuerierGetSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetSessionCall) Return(arg0 *queries.Session, arg1 error) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetSessionCall) Do(f func(context.Context, uuid.UUID) (*queries.Session, error)) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.Session, error)) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPSecretForUser indicates an expected call of GetTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockTransactionQuerier) GetUser(ctx context.Context, id int64) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionQuerierMockRecorder) GetUser(ctx, id any) *TransactionQuerierGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUser), ctx, id)
	return &TransactionQuerierGetUserCall{Call: call}
}

// TransactionQuerierGetUserCall wrap *gomock.Call
type TransactionQuerierGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserCall) Do(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserCall) DoAndReturn(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByUsernameOrEmail(ctx context.Context, username string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", ctx, username)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByUsernameOrEmail(ctx, username any) *TransactionQuerierGetUserByUsernameOrEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByUsernameOrEmail), ctx, username)
	return &TransactionQuerierGetUserByUsernameOrEmailCall{Call: call}
}

// TransactionQuerierGetUserByUsernameOrEmailCall wrap *gomock.Call
type TransactionQuerierGetUserByUsernameOrEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Do(f func(context.Context, string) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) DoAndReturn(f func(context.Context, string) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateResetPasswordToken indicates an expected call of InvalidateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) InvalidateResetPasswordToken(ctx, id any) *TransactionQuerierInvalidateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateResetPasswordToken), ctx, id)
	return &TransactionQuerierInvalidateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierInvalidateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierInvalidateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Return(arg0 error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateTOTPSecretForUser indicates an expected call of InvalidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) InvalidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierInvalidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierInvalidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierInvalidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockTransactionQuerier) ListUsers(ctx context.Context, arg queries.ListUsersParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransactionQuerierMockRecorder) ListUsers(ctx, arg any) *TransactionQuerierListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsers), ctx, arg)
	return &TransactionQuerierListUsersCall{Call: call}
}

// TransactionQuerierListUsersCall wrap *gomock.Call
type TransactionQuerierListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersCall) Do(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersCall) DoAndReturn(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersPaginated mocks base method.
func (m *MockTransactionQuerier) ListUsersPaginated(ctx context.Context, arg queries.ListUsersPaginatedParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersPaginated indicates an expected call of ListUsersPaginated.
func (mr *MockTransactionQuerierMockRecorder) ListUsersPaginated(ctx, arg any) *TransactionQuerierListUsersPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsersPaginated), ctx, arg)
	return &TransactionQuerierListUsersPaginatedCall{Call: call}
}

// TransactionQuerierListUsersPaginatedCall wrap *gomock.Call
type TransactionQuerierListUsersPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersPaginatedCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersPaginatedCall) Do(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersPaginatedCall) DoAndReturn(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTransaction mocks base method.
func (m *MockTransactionQuerier) StartTransaction(ctx context.Context) (db.TransactionQuerier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.TransactionQuerier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionQuerierMockRecorder) StartTransaction(ctx any) *TransactionQuerierStartTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).StartTransaction), ctx)
	return &TransactionQuerierStartTransactionCall{Call: call}
}

// TransactionQuerierStartTransactionCall wrap *gomock.Call
type TransactionQuerierStartTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierStartTransactionCall) Return(arg0 db.TransactionQuerier, arg1 error) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierStartTransactionCall) Do(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierStartTransactionCall) DoAndReturn(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSession mocks base method.
func (m *MockTransactionQuerier) UpdateSession(ctx context.Context, arg queries.UpdateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockTransactionQuerierMockRecorder) UpdateSession(ctx, arg any) *TransactionQuerierUpdateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateSession), ctx, arg)
	return &TransactionQuerierUpdateSessionCall{Call: call}
}

// TransactionQuerierUpdateSessionCall wrap *gomock.Call
type TransactionQuerierUpdateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateSessionCall) Return(arg0 error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateSessionCall) Do(f func(context.Context, queries.UpdateSessionParams) error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateSessionCall) DoAndReturn(f func(context.Context, queries.UpdateSessionParams) error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockTransactionQuerier) UpdateUser(ctx context.Context, arg queries.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionQuerierMockRecorder) UpdateUser(ctx, arg any) *TransactionQuerierUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUser), ctx, arg)
	return &TransactionQuerierUpdateUserCall{Call: call}
}

// TransactionQuerierUpdateUserCall wrap *gomock.Call
type TransactionQuerierUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateUserCall) Return(arg0 error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateUserCall) Do(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateUserCall) DoAndReturn(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockTransactionQuerier) UpdateUserPassword(ctx context.Context, arg queries.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockTransactionQuerierMockRecorder) UpdateUserPassword(ctx, arg any) *TransactionQuerierUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUserPassword), ctx, arg)
	return &TransactionQuerierUpdateUserPasswordCall{Call: call}
}

// TransactionQuerierUpdateUserPasswordCall wrap *gomock.Call
type TransactionQuerierUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateUserPasswordCall) Return(arg0 error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateUserPasswordCall) Do(f func(context.Context, queries.UpdateUserPasswordParams) error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateUserPasswordCall) DoAndReturn(f func(context.Context, queries.UpdateUserPasswordParams) error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTOTPSecretForUser indicates an expected call of ValidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) ValidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierValidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).ValidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierValidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierValidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierValidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierValidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
