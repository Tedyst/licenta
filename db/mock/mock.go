// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -package mock -typed -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/tedyst/licenta/db"
	queries "github.com/tedyst/licenta/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionQuerier is a mock of TransactionQuerier interface.
type MockTransactionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionQuerierMockRecorder
}

// MockTransactionQuerierMockRecorder is the mock recorder for MockTransactionQuerier.
type MockTransactionQuerierMockRecorder struct {
	mock *MockTransactionQuerier
}

// NewMockTransactionQuerier creates a new mock instance.
func NewMockTransactionQuerier(ctrl *gomock.Controller) *MockTransactionQuerier {
	mock := &MockTransactionQuerier{ctrl: ctrl}
	mock.recorder = &MockTransactionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionQuerier) EXPECT() *MockTransactionQuerierMockRecorder {
	return m.recorder
}

// AddOrganizationUser mocks base method.
func (m *MockTransactionQuerier) AddOrganizationUser(ctx context.Context, arg queries.AddOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrganizationUser indicates an expected call of AddOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) AddOrganizationUser(ctx, arg any) *MockTransactionQuerierAddOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).AddOrganizationUser), ctx, arg)
	return &MockTransactionQuerierAddOrganizationUserCall{Call: call}
}

// MockTransactionQuerierAddOrganizationUserCall wrap *gomock.Call
type MockTransactionQuerierAddOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierAddOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *MockTransactionQuerierAddOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierAddOrganizationUserCall) Do(f func(context.Context, queries.AddOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierAddOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierAddOrganizationUserCall) DoAndReturn(f func(context.Context, queries.AddOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierAddOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserToOrganization mocks base method.
func (m *MockTransactionQuerier) AddUserToOrganization(ctx context.Context, arg queries.AddUserToOrganizationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToOrganization", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToOrganization indicates an expected call of AddUserToOrganization.
func (mr *MockTransactionQuerierMockRecorder) AddUserToOrganization(ctx, arg any) *MockTransactionQuerierAddUserToOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).AddUserToOrganization), ctx, arg)
	return &MockTransactionQuerierAddUserToOrganizationCall{Call: call}
}

// MockTransactionQuerierAddUserToOrganizationCall wrap *gomock.Call
type MockTransactionQuerierAddUserToOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierAddUserToOrganizationCall) Return(arg0 error) *MockTransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierAddUserToOrganizationCall) Do(f func(context.Context, queries.AddUserToOrganizationParams) error) *MockTransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierAddUserToOrganizationCall) DoAndReturn(f func(context.Context, queries.AddUserToOrganizationParams) error) *MockTransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BindScanToWorker mocks base method.
func (m *MockTransactionQuerier) BindScanToWorker(ctx context.Context, arg queries.BindScanToWorkerParams) (*queries.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindScanToWorker", ctx, arg)
	ret0, _ := ret[0].(*queries.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindScanToWorker indicates an expected call of BindScanToWorker.
func (mr *MockTransactionQuerierMockRecorder) BindScanToWorker(ctx, arg any) *MockTransactionQuerierBindScanToWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindScanToWorker", reflect.TypeOf((*MockTransactionQuerier)(nil).BindScanToWorker), ctx, arg)
	return &MockTransactionQuerierBindScanToWorkerCall{Call: call}
}

// MockTransactionQuerierBindScanToWorkerCall wrap *gomock.Call
type MockTransactionQuerierBindScanToWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierBindScanToWorkerCall) Return(arg0 *queries.Scan, arg1 error) *MockTransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierBindScanToWorkerCall) Do(f func(context.Context, queries.BindScanToWorkerParams) (*queries.Scan, error)) *MockTransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierBindScanToWorkerCall) DoAndReturn(f func(context.Context, queries.BindScanToWorkerParams) (*queries.Scan, error)) *MockTransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountUsers mocks base method.
func (m *MockTransactionQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTransactionQuerierMockRecorder) CountUsers(ctx any) *MockTransactionQuerierCountUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).CountUsers), ctx)
	return &MockTransactionQuerierCountUsersCall{Call: call}
}

// MockTransactionQuerierCountUsersCall wrap *gomock.Call
type MockTransactionQuerierCountUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCountUsersCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCountUsersCall) Do(f func(context.Context) (int64, error)) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCountUsersCall) DoAndReturn(f func(context.Context) (int64, error)) *MockTransactionQuerierCountUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBruteforcedPassword mocks base method.
func (m *MockTransactionQuerier) CreateBruteforcedPassword(ctx context.Context, arg queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBruteforcedPassword", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBruteforcedPassword indicates an expected call of CreateBruteforcedPassword.
func (mr *MockTransactionQuerierMockRecorder) CreateBruteforcedPassword(ctx, arg any) *MockTransactionQuerierCreateBruteforcedPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBruteforcedPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateBruteforcedPassword), ctx, arg)
	return &MockTransactionQuerierCreateBruteforcedPasswordCall{Call: call}
}

// MockTransactionQuerierCreateBruteforcedPasswordCall wrap *gomock.Call
type MockTransactionQuerierCreateBruteforcedPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateBruteforcedPasswordCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *MockTransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateBruteforcedPasswordCall) Do(f func(context.Context, queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateBruteforcedPasswordCall) DoAndReturn(f func(context.Context, queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerImageForProject(ctx context.Context, arg queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerImageForProject indicates an expected call of CreateDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerImageForProject(ctx, arg any) *MockTransactionQuerierCreateDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerImageForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerImageForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerImageForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) Return(arg0 *queries.ProjectDockerImage, arg1 error) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) Do(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerResultsForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerResultsForProject(ctx context.Context, arg []queries.CreateDockerLayerResultsForProjectParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerResultsForProject", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerResultsForProject indicates an expected call of CreateDockerLayerResultsForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerResultsForProject(ctx, arg any) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerResultsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerResultsForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerLayerResultsForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerLayerResultsForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerLayerResultsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) Do(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerLayerResultsForProjectCall) DoAndReturn(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *MockTransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerScanForProject(ctx context.Context, arg queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerScanForProject indicates an expected call of CreateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerScannedLayerForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerScannedLayerForProject(ctx context.Context, arg queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerScannedLayerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerScannedLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerScannedLayerForProject indicates an expected call of CreateDockerScannedLayerForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerScannedLayerForProject(ctx, arg any) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerScannedLayerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerScannedLayerForProject), ctx, arg)
	return &MockTransactionQuerierCreateDockerScannedLayerForProjectCall{Call: call}
}

// MockTransactionQuerierCreateDockerScannedLayerForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateDockerScannedLayerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) Return(arg0 *queries.ProjectDockerScannedLayer, arg1 error) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) Do(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateDockerScannedLayerForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *MockTransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitCommitForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitCommitForProject(ctx context.Context, arg queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitScannedCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitForProject indicates an expected call of CreateGitCommitForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitCommitForProject(ctx, arg any) *MockTransactionQuerierCreateGitCommitForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitCommitForProject), ctx, arg)
	return &MockTransactionQuerierCreateGitCommitForProjectCall{Call: call}
}

// MockTransactionQuerierCreateGitCommitForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateGitCommitForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) Return(arg0 *queries.ProjectGitScannedCommit, arg1 error) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) Do(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitCommitForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *MockTransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitRepositoryForProject(ctx context.Context, arg queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepositoryForProject indicates an expected call of CreateGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitRepositoryForProject(ctx, arg any) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitRepositoryForProject), ctx, arg)
	return &MockTransactionQuerierCreateGitRepositoryForProjectCall{Call: call}
}

// MockTransactionQuerierCreateGitRepositoryForProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) Return(arg0 *queries.ProjectGitRepository, arg1 error) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) Do(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitResultForCommit mocks base method.
func (m *MockTransactionQuerier) CreateGitResultForCommit(ctx context.Context, arg []queries.CreateGitResultForCommitParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitResultForCommit", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitResultForCommit indicates an expected call of CreateGitResultForCommit.
func (mr *MockTransactionQuerierMockRecorder) CreateGitResultForCommit(ctx, arg any) *MockTransactionQuerierCreateGitResultForCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitResultForCommit", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitResultForCommit), ctx, arg)
	return &MockTransactionQuerierCreateGitResultForCommitCall{Call: call}
}

// MockTransactionQuerierCreateGitResultForCommitCall wrap *gomock.Call
type MockTransactionQuerierCreateGitResultForCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateGitResultForCommitCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateGitResultForCommitCall) Do(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateGitResultForCommitCall) DoAndReturn(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *MockTransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMysqlDatabase mocks base method.
func (m *MockTransactionQuerier) CreateMysqlDatabase(ctx context.Context, arg queries.CreateMysqlDatabaseParams) (*queries.MysqlDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMysqlDatabase", ctx, arg)
	ret0, _ := ret[0].(*queries.MysqlDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMysqlDatabase indicates an expected call of CreateMysqlDatabase.
func (mr *MockTransactionQuerierMockRecorder) CreateMysqlDatabase(ctx, arg any) *MockTransactionQuerierCreateMysqlDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMysqlDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateMysqlDatabase), ctx, arg)
	return &MockTransactionQuerierCreateMysqlDatabaseCall{Call: call}
}

// MockTransactionQuerierCreateMysqlDatabaseCall wrap *gomock.Call
type MockTransactionQuerierCreateMysqlDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateMysqlDatabaseCall) Return(arg0 *queries.MysqlDatabase, arg1 error) *MockTransactionQuerierCreateMysqlDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateMysqlDatabaseCall) Do(f func(context.Context, queries.CreateMysqlDatabaseParams) (*queries.MysqlDatabase, error)) *MockTransactionQuerierCreateMysqlDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateMysqlDatabaseCall) DoAndReturn(f func(context.Context, queries.CreateMysqlDatabaseParams) (*queries.MysqlDatabase, error)) *MockTransactionQuerierCreateMysqlDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMysqlScan mocks base method.
func (m *MockTransactionQuerier) CreateMysqlScan(ctx context.Context, arg queries.CreateMysqlScanParams) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMysqlScan", ctx, arg)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMysqlScan indicates an expected call of CreateMysqlScan.
func (mr *MockTransactionQuerierMockRecorder) CreateMysqlScan(ctx, arg any) *MockTransactionQuerierCreateMysqlScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMysqlScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateMysqlScan), ctx, arg)
	return &MockTransactionQuerierCreateMysqlScanCall{Call: call}
}

// MockTransactionQuerierCreateMysqlScanCall wrap *gomock.Call
type MockTransactionQuerierCreateMysqlScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateMysqlScanCall) Return(arg0 *queries.MysqlScan, arg1 error) *MockTransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateMysqlScanCall) Do(f func(context.Context, queries.CreateMysqlScanParams) (*queries.MysqlScan, error)) *MockTransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateMysqlScanCall) DoAndReturn(f func(context.Context, queries.CreateMysqlScanParams) (*queries.MysqlScan, error)) *MockTransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCPE(ctx context.Context, arg queries.CreateNvdCPEParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCPE indicates an expected call of CreateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCPE(ctx, arg any) *MockTransactionQuerierCreateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCPE), ctx, arg)
	return &MockTransactionQuerierCreateNvdCPECall{Call: call}
}

// MockTransactionQuerierCreateNvdCPECall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCPECall) Return(arg0 *queries.NvdCpe, arg1 error) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCPECall) Do(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *MockTransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCve mocks base method.
func (m *MockTransactionQuerier) CreateNvdCve(ctx context.Context, arg queries.CreateNvdCveParams) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCve", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCve indicates an expected call of CreateNvdCve.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCve(ctx, arg any) *MockTransactionQuerierCreateNvdCveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCve", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCve), ctx, arg)
	return &MockTransactionQuerierCreateNvdCveCall{Call: call}
}

// MockTransactionQuerierCreateNvdCveCall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCveCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCveCall) Do(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCveCall) DoAndReturn(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *MockTransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCveCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCveCPE(ctx context.Context, arg queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCveCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCveCPE indicates an expected call of CreateNvdCveCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCveCPE(ctx, arg any) *MockTransactionQuerierCreateNvdCveCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCveCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCveCPE), ctx, arg)
	return &MockTransactionQuerierCreateNvdCveCPECall{Call: call}
}

// MockTransactionQuerierCreateNvdCveCPECall wrap *gomock.Call
type MockTransactionQuerierCreateNvdCveCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateNvdCveCPECall) Return(arg0 *queries.NvdCveCpe, arg1 error) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateNvdCveCPECall) Do(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateNvdCveCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganization mocks base method.
func (m *MockTransactionQuerier) CreateOrganization(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockTransactionQuerierMockRecorder) CreateOrganization(ctx, name any) *MockTransactionQuerierCreateOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateOrganization), ctx, name)
	return &MockTransactionQuerierCreateOrganizationCall{Call: call}
}

// MockTransactionQuerierCreateOrganizationCall wrap *gomock.Call
type MockTransactionQuerierCreateOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateOrganizationCall) Return(arg0 *queries.Organization, arg1 error) *MockTransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateOrganizationCall) Do(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateOrganizationCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresDatabase mocks base method.
func (m *MockTransactionQuerier) CreatePostgresDatabase(ctx context.Context, arg queries.CreatePostgresDatabaseParams) (*queries.PostgresDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresDatabase", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresDatabase indicates an expected call of CreatePostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresDatabase(ctx, arg any) *MockTransactionQuerierCreatePostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresDatabase), ctx, arg)
	return &MockTransactionQuerierCreatePostgresDatabaseCall{Call: call}
}

// MockTransactionQuerierCreatePostgresDatabaseCall wrap *gomock.Call
type MockTransactionQuerierCreatePostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreatePostgresDatabaseCall) Return(arg0 *queries.PostgresDatabase, arg1 error) *MockTransactionQuerierCreatePostgresDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreatePostgresDatabaseCall) Do(f func(context.Context, queries.CreatePostgresDatabaseParams) (*queries.PostgresDatabase, error)) *MockTransactionQuerierCreatePostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreatePostgresDatabaseCall) DoAndReturn(f func(context.Context, queries.CreatePostgresDatabaseParams) (*queries.PostgresDatabase, error)) *MockTransactionQuerierCreatePostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresScan mocks base method.
func (m *MockTransactionQuerier) CreatePostgresScan(ctx context.Context, arg queries.CreatePostgresScanParams) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresScan", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresScan indicates an expected call of CreatePostgresScan.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresScan(ctx, arg any) *MockTransactionQuerierCreatePostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresScan), ctx, arg)
	return &MockTransactionQuerierCreatePostgresScanCall{Call: call}
}

// MockTransactionQuerierCreatePostgresScanCall wrap *gomock.Call
type MockTransactionQuerierCreatePostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreatePostgresScanCall) Return(arg0 *queries.PostgresScan, arg1 error) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreatePostgresScanCall) Do(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreatePostgresScanCall) DoAndReturn(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *MockTransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProject mocks base method.
func (m *MockTransactionQuerier) CreateProject(ctx context.Context, arg queries.CreateProjectParams) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, arg)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockTransactionQuerierMockRecorder) CreateProject(ctx, arg any) *MockTransactionQuerierCreateProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateProject), ctx, arg)
	return &MockTransactionQuerierCreateProjectCall{Call: call}
}

// MockTransactionQuerierCreateProjectCall wrap *gomock.Call
type MockTransactionQuerierCreateProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateProjectCall) Return(arg0 *queries.Project, arg1 error) *MockTransactionQuerierCreateProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateProjectCall) Do(f func(context.Context, queries.CreateProjectParams) (*queries.Project, error)) *MockTransactionQuerierCreateProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateProjectCall) DoAndReturn(f func(context.Context, queries.CreateProjectParams) (*queries.Project, error)) *MockTransactionQuerierCreateProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRememberMeToken mocks base method.
func (m *MockTransactionQuerier) CreateRememberMeToken(ctx context.Context, arg queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRememberMeToken", ctx, arg)
	ret0, _ := ret[0].(*queries.RememberMeToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRememberMeToken indicates an expected call of CreateRememberMeToken.
func (mr *MockTransactionQuerierMockRecorder) CreateRememberMeToken(ctx, arg any) *MockTransactionQuerierCreateRememberMeTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRememberMeToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateRememberMeToken), ctx, arg)
	return &MockTransactionQuerierCreateRememberMeTokenCall{Call: call}
}

// MockTransactionQuerierCreateRememberMeTokenCall wrap *gomock.Call
type MockTransactionQuerierCreateRememberMeTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateRememberMeTokenCall) Return(arg0 *queries.RememberMeToken, arg1 error) *MockTransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateRememberMeTokenCall) Do(f func(context.Context, queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error)) *MockTransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateRememberMeTokenCall) DoAndReturn(f func(context.Context, queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error)) *MockTransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) CreateResetPasswordToken(ctx context.Context, arg queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPasswordToken", ctx, arg)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPasswordToken indicates an expected call of CreateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) CreateResetPasswordToken(ctx, arg any) *MockTransactionQuerierCreateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateResetPasswordToken), ctx, arg)
	return &MockTransactionQuerierCreateResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierCreateResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierCreateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) Do(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateResetPasswordTokenCall) DoAndReturn(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScan mocks base method.
func (m *MockTransactionQuerier) CreateScan(ctx context.Context, arg queries.CreateScanParams) (*queries.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScan", ctx, arg)
	ret0, _ := ret[0].(*queries.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScan indicates an expected call of CreateScan.
func (mr *MockTransactionQuerierMockRecorder) CreateScan(ctx, arg any) *MockTransactionQuerierCreateScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScan), ctx, arg)
	return &MockTransactionQuerierCreateScanCall{Call: call}
}

// MockTransactionQuerierCreateScanCall wrap *gomock.Call
type MockTransactionQuerierCreateScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateScanCall) Return(arg0 *queries.Scan, arg1 error) *MockTransactionQuerierCreateScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateScanCall) Do(f func(context.Context, queries.CreateScanParams) (*queries.Scan, error)) *MockTransactionQuerierCreateScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateScanCall) DoAndReturn(f func(context.Context, queries.CreateScanParams) (*queries.Scan, error)) *MockTransactionQuerierCreateScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) CreateScanBruteforceResult(ctx context.Context, arg queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanBruteforceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanBruteforceResult indicates an expected call of CreateScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) CreateScanBruteforceResult(ctx, arg any) *MockTransactionQuerierCreateScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanBruteforceResult), ctx, arg)
	return &MockTransactionQuerierCreateScanBruteforceResultCall{Call: call}
}

// MockTransactionQuerierCreateScanBruteforceResultCall wrap *gomock.Call
type MockTransactionQuerierCreateScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateScanBruteforceResultCall) Return(arg0 *queries.ScanBruteforceResult, arg1 error) *MockTransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateScanBruteforceResultCall) Do(f func(context.Context, queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error)) *MockTransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error)) *MockTransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanGroup mocks base method.
func (m *MockTransactionQuerier) CreateScanGroup(ctx context.Context, arg queries.CreateScanGroupParams) (*queries.ScanGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanGroup", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanGroup indicates an expected call of CreateScanGroup.
func (mr *MockTransactionQuerierMockRecorder) CreateScanGroup(ctx, arg any) *MockTransactionQuerierCreateScanGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanGroup", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanGroup), ctx, arg)
	return &MockTransactionQuerierCreateScanGroupCall{Call: call}
}

// MockTransactionQuerierCreateScanGroupCall wrap *gomock.Call
type MockTransactionQuerierCreateScanGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateScanGroupCall) Return(arg0 *queries.ScanGroup, arg1 error) *MockTransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateScanGroupCall) Do(f func(context.Context, queries.CreateScanGroupParams) (*queries.ScanGroup, error)) *MockTransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateScanGroupCall) DoAndReturn(f func(context.Context, queries.CreateScanGroupParams) (*queries.ScanGroup, error)) *MockTransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanResult mocks base method.
func (m *MockTransactionQuerier) CreateScanResult(ctx context.Context, arg queries.CreateScanResultParams) (*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanResult", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanResult indicates an expected call of CreateScanResult.
func (mr *MockTransactionQuerierMockRecorder) CreateScanResult(ctx, arg any) *MockTransactionQuerierCreateScanResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanResult), ctx, arg)
	return &MockTransactionQuerierCreateScanResultCall{Call: call}
}

// MockTransactionQuerierCreateScanResultCall wrap *gomock.Call
type MockTransactionQuerierCreateScanResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateScanResultCall) Return(arg0 *queries.ScanResult, arg1 error) *MockTransactionQuerierCreateScanResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateScanResultCall) Do(f func(context.Context, queries.CreateScanResultParams) (*queries.ScanResult, error)) *MockTransactionQuerierCreateScanResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateScanResultCall) DoAndReturn(f func(context.Context, queries.CreateScanResultParams) (*queries.ScanResult, error)) *MockTransactionQuerierCreateScanResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) CreateTOTPSecretForUser(ctx context.Context, arg queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTOTPSecretForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTOTPSecretForUser indicates an expected call of CreateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) CreateTOTPSecretForUser(ctx, arg any) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateTOTPSecretForUser), ctx, arg)
	return &MockTransactionQuerierCreateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierCreateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierCreateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) Do(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *MockTransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUser mocks base method.
func (m *MockTransactionQuerier) CreateUser(ctx context.Context, arg queries.CreateUserParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionQuerierMockRecorder) CreateUser(ctx, arg any) *MockTransactionQuerierCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateUser), ctx, arg)
	return &MockTransactionQuerierCreateUserCall{Call: call}
}

// MockTransactionQuerierCreateUserCall wrap *gomock.Call
type MockTransactionQuerierCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateUserCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateUserCall) Do(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateUserCall) DoAndReturn(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *MockTransactionQuerierCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWebauthnCredential mocks base method.
func (m *MockTransactionQuerier) CreateWebauthnCredential(ctx context.Context, arg queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebauthnCredential", ctx, arg)
	ret0, _ := ret[0].(*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebauthnCredential indicates an expected call of CreateWebauthnCredential.
func (mr *MockTransactionQuerierMockRecorder) CreateWebauthnCredential(ctx, arg any) *MockTransactionQuerierCreateWebauthnCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebauthnCredential", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateWebauthnCredential), ctx, arg)
	return &MockTransactionQuerierCreateWebauthnCredentialCall{Call: call}
}

// MockTransactionQuerierCreateWebauthnCredentialCall wrap *gomock.Call
type MockTransactionQuerierCreateWebauthnCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierCreateWebauthnCredentialCall) Return(arg0 *queries.WebauthnCredential, arg1 error) *MockTransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierCreateWebauthnCredentialCall) Do(f func(context.Context, queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *MockTransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierCreateWebauthnCredentialCall) DoAndReturn(f func(context.Context, queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *MockTransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) DeleteDockerImageForProject(ctx context.Context, arg queries.DeleteDockerImageForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerImageForProject indicates an expected call of DeleteDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteDockerImageForProject(ctx, arg any) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteDockerImageForProject), ctx, arg)
	return &MockTransactionQuerierDeleteDockerImageForProjectCall{Call: call}
}

// MockTransactionQuerierDeleteDockerImageForProjectCall wrap *gomock.Call
type MockTransactionQuerierDeleteDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) Return(arg0 error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) Do(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *MockTransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) DeleteGitRepositoryForProject(ctx context.Context, arg queries.DeleteGitRepositoryForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitRepositoryForProject indicates an expected call of DeleteGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteGitRepositoryForProject(ctx, arg any) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteGitRepositoryForProject), ctx, arg)
	return &MockTransactionQuerierDeleteGitRepositoryForProjectCall{Call: call}
}

// MockTransactionQuerierDeleteGitRepositoryForProjectCall wrap *gomock.Call
type MockTransactionQuerierDeleteGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) Return(arg0 error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) Do(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *MockTransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNvdCveByName mocks base method.
func (m *MockTransactionQuerier) DeleteNvdCveByName(ctx context.Context, cveID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNvdCveByName", ctx, cveID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNvdCveByName indicates an expected call of DeleteNvdCveByName.
func (mr *MockTransactionQuerierMockRecorder) DeleteNvdCveByName(ctx, cveID any) *MockTransactionQuerierDeleteNvdCveByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNvdCveByName", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteNvdCveByName), ctx, cveID)
	return &MockTransactionQuerierDeleteNvdCveByNameCall{Call: call}
}

// MockTransactionQuerierDeleteNvdCveByNameCall wrap *gomock.Call
type MockTransactionQuerierDeleteNvdCveByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteNvdCveByNameCall) Return(arg0 error) *MockTransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteNvdCveByNameCall) Do(f func(context.Context, string) error) *MockTransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteNvdCveByNameCall) DoAndReturn(f func(context.Context, string) error) *MockTransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganization mocks base method.
func (m *MockTransactionQuerier) DeleteOrganization(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockTransactionQuerierMockRecorder) DeleteOrganization(ctx, id any) *MockTransactionQuerierDeleteOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteOrganization), ctx, id)
	return &MockTransactionQuerierDeleteOrganizationCall{Call: call}
}

// MockTransactionQuerierDeleteOrganizationCall wrap *gomock.Call
type MockTransactionQuerierDeleteOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteOrganizationCall) Return(arg0 error) *MockTransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteOrganizationCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteOrganizationCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProject mocks base method.
func (m *MockTransactionQuerier) DeleteProject(ctx context.Context, id int64) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteProject(ctx, id any) *MockTransactionQuerierDeleteProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteProject), ctx, id)
	return &MockTransactionQuerierDeleteProjectCall{Call: call}
}

// MockTransactionQuerierDeleteProjectCall wrap *gomock.Call
type MockTransactionQuerierDeleteProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteProjectCall) Return(arg0 *queries.Project, arg1 error) *MockTransactionQuerierDeleteProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteProjectCall) Do(f func(context.Context, int64) (*queries.Project, error)) *MockTransactionQuerierDeleteProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteProjectCall) DoAndReturn(f func(context.Context, int64) (*queries.Project, error)) *MockTransactionQuerierDeleteProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRememberMeTokenByUserAndToken mocks base method.
func (m *MockTransactionQuerier) DeleteRememberMeTokenByUserAndToken(ctx context.Context, arg queries.DeleteRememberMeTokenByUserAndTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRememberMeTokenByUserAndToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRememberMeTokenByUserAndToken indicates an expected call of DeleteRememberMeTokenByUserAndToken.
func (mr *MockTransactionQuerierMockRecorder) DeleteRememberMeTokenByUserAndToken(ctx, arg any) *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRememberMeTokenByUserAndToken", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteRememberMeTokenByUserAndToken), ctx, arg)
	return &MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall{Call: call}
}

// MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall wrap *gomock.Call
type MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) Return(arg0 error) *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) Do(f func(context.Context, queries.DeleteRememberMeTokenByUserAndTokenParams) error) *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) DoAndReturn(f func(context.Context, queries.DeleteRememberMeTokenByUserAndTokenParams) error) *MockTransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRememberMeTokensForUser mocks base method.
func (m *MockTransactionQuerier) DeleteRememberMeTokensForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRememberMeTokensForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRememberMeTokensForUser indicates an expected call of DeleteRememberMeTokensForUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteRememberMeTokensForUser(ctx, userID any) *MockTransactionQuerierDeleteRememberMeTokensForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRememberMeTokensForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteRememberMeTokensForUser), ctx, userID)
	return &MockTransactionQuerierDeleteRememberMeTokensForUserCall{Call: call}
}

// MockTransactionQuerierDeleteRememberMeTokensForUserCall wrap *gomock.Call
type MockTransactionQuerierDeleteRememberMeTokensForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteRememberMeTokensForUserCall) Return(arg0 error) *MockTransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteRememberMeTokensForUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteRememberMeTokensForUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockTransactionQuerier) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteUser(ctx, id any) *MockTransactionQuerierDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteUser), ctx, id)
	return &MockTransactionQuerierDeleteUserCall{Call: call}
}

// MockTransactionQuerierDeleteUserCall wrap *gomock.Call
type MockTransactionQuerierDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierDeleteUserCall) Return(arg0 error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierDeleteUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierDeleteUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndTransaction mocks base method.
func (m *MockTransactionQuerier) EndTransaction(ctx context.Context, rollback bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", ctx, rollback)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTransactionQuerierMockRecorder) EndTransaction(ctx, rollback any) *MockTransactionQuerierEndTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).EndTransaction), ctx, rollback)
	return &MockTransactionQuerierEndTransactionCall{Call: call}
}

// MockTransactionQuerierEndTransactionCall wrap *gomock.Call
type MockTransactionQuerierEndTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierEndTransactionCall) Return(arg0 error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierEndTransactionCall) Do(f func(context.Context, bool) error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierEndTransactionCall) DoAndReturn(f func(context.Context, bool) error) *MockTransactionQuerierEndTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllOrganizationMembersForOrganizationsThatContainUser mocks base method.
func (m *MockTransactionQuerier) GetAllOrganizationMembersForOrganizationsThatContainUser(ctx context.Context, userID int64) ([]*queries.GetAllOrganizationMembersForOrganizationsThatContainUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrganizationMembersForOrganizationsThatContainUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.GetAllOrganizationMembersForOrganizationsThatContainUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrganizationMembersForOrganizationsThatContainUser indicates an expected call of GetAllOrganizationMembersForOrganizationsThatContainUser.
func (mr *MockTransactionQuerierMockRecorder) GetAllOrganizationMembersForOrganizationsThatContainUser(ctx, userID any) *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrganizationMembersForOrganizationsThatContainUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetAllOrganizationMembersForOrganizationsThatContainUser), ctx, userID)
	return &MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall{Call: call}
}

// MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall wrap *gomock.Call
type MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall) Return(arg0 []*queries.GetAllOrganizationMembersForOrganizationsThatContainUserRow, arg1 error) *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall) Do(f func(context.Context, int64) ([]*queries.GetAllOrganizationMembersForOrganizationsThatContainUserRow, error)) *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetAllOrganizationMembersForOrganizationsThatContainUserRow, error)) *MockTransactionQuerierGetAllOrganizationMembersForOrganizationsThatContainUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllOrganizationProjectsForUser mocks base method.
func (m *MockTransactionQuerier) GetAllOrganizationProjectsForUser(ctx context.Context, userID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrganizationProjectsForUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrganizationProjectsForUser indicates an expected call of GetAllOrganizationProjectsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetAllOrganizationProjectsForUser(ctx, userID any) *MockTransactionQuerierGetAllOrganizationProjectsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrganizationProjectsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetAllOrganizationProjectsForUser), ctx, userID)
	return &MockTransactionQuerierGetAllOrganizationProjectsForUserCall{Call: call}
}

// MockTransactionQuerierGetAllOrganizationProjectsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetAllOrganizationProjectsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetAllOrganizationProjectsForUserCall) Return(arg0 []*queries.Project, arg1 error) *MockTransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetAllOrganizationProjectsForUserCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetAllOrganizationProjectsForUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsForProjectCount mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsForProjectCount(ctx context.Context, projectID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsForProjectCount", ctx, projectID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsForProjectCount indicates an expected call of GetBruteforcePasswordsForProjectCount.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsForProjectCount(ctx, projectID any) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsForProjectCount", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsForProjectCount), ctx, projectID)
	return &MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) Do(f func(context.Context, int64) (int64, error)) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockTransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsPaginated mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsPaginated(ctx context.Context, arg queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.DefaultBruteforcePassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsPaginated indicates an expected call of GetBruteforcePasswordsPaginated.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsPaginated(ctx, arg any) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsPaginated), ctx, arg)
	return &MockTransactionQuerierGetBruteforcePasswordsPaginatedCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsPaginatedCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) Return(arg0 []*queries.DefaultBruteforcePassword, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) Do(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall) DoAndReturn(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *MockTransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsSpecificForProject mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsSpecificForProject(ctx context.Context, projectID int64) ([]sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsSpecificForProject", ctx, projectID)
	ret0, _ := ret[0].([]sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsSpecificForProject indicates an expected call of GetBruteforcePasswordsSpecificForProject.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsSpecificForProject(ctx, projectID any) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsSpecificForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsSpecificForProject), ctx, projectID)
	return &MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall{Call: call}
}

// MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Return(arg0 []sql.NullString, arg1 error) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Do(f func(context.Context, int64) ([]sql.NullString, error)) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) DoAndReturn(f func(context.Context, int64) ([]sql.NullString, error)) *MockTransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcedPasswords mocks base method.
func (m *MockTransactionQuerier) GetBruteforcedPasswords(ctx context.Context, arg queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcedPasswords", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcedPasswords indicates an expected call of GetBruteforcedPasswords.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcedPasswords(ctx, arg any) *MockTransactionQuerierGetBruteforcedPasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcedPasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcedPasswords), ctx, arg)
	return &MockTransactionQuerierGetBruteforcedPasswordsCall{Call: call}
}

// MockTransactionQuerierGetBruteforcedPasswordsCall wrap *gomock.Call
type MockTransactionQuerierGetBruteforcedPasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetBruteforcedPasswordsCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *MockTransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetBruteforcedPasswordsCall) Do(f func(context.Context, queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetBruteforcedPasswordsCall) DoAndReturn(f func(context.Context, queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCPEByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCPEByProductAndVersion(ctx context.Context, arg queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPEByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPEByProductAndVersion indicates an expected call of GetCPEByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCPEByProductAndVersion(ctx, arg any) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPEByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCPEByProductAndVersion), ctx, arg)
	return &MockTransactionQuerierGetCPEByProductAndVersionCall{Call: call}
}

// MockTransactionQuerierGetCPEByProductAndVersionCall wrap *gomock.Call
type MockTransactionQuerierGetCPEByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) Return(arg0 *queries.NvdCpe, arg1 error) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) Do(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCPEByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *MockTransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveByCveID indicates an expected call of GetCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetCveByCveID(ctx, cveID any) *MockTransactionQuerierGetCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveByCveID), ctx, cveID)
	return &MockTransactionQuerierGetCveByCveIDCall{Call: call}
}

// MockTransactionQuerierGetCveByCveIDCall wrap *gomock.Call
type MockTransactionQuerierGetCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveCpeByCveAndCpe mocks base method.
func (m *MockTransactionQuerier) GetCveCpeByCveAndCpe(ctx context.Context, arg queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveCpeByCveAndCpe", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveCpeByCveAndCpe indicates an expected call of GetCveCpeByCveAndCpe.
func (mr *MockTransactionQuerierMockRecorder) GetCveCpeByCveAndCpe(ctx, arg any) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveCpeByCveAndCpe", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveCpeByCveAndCpe), ctx, arg)
	return &MockTransactionQuerierGetCveCpeByCveAndCpeCall{Call: call}
}

// MockTransactionQuerierGetCveCpeByCveAndCpeCall wrap *gomock.Call
type MockTransactionQuerierGetCveCpeByCveAndCpeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) Return(arg0 *queries.NvdCveCpe, arg1 error) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) Do(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCveCpeByCveAndCpeCall) DoAndReturn(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *MockTransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCvesByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCvesByProductAndVersion(ctx context.Context, arg queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCvesByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].([]*queries.GetCvesByProductAndVersionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCvesByProductAndVersion indicates an expected call of GetCvesByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCvesByProductAndVersion(ctx, arg any) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCvesByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCvesByProductAndVersion), ctx, arg)
	return &MockTransactionQuerierGetCvesByProductAndVersionCall{Call: call}
}

// MockTransactionQuerierGetCvesByProductAndVersionCall wrap *gomock.Call
type MockTransactionQuerierGetCvesByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) Return(arg0 []*queries.GetCvesByProductAndVersionRow, arg1 error) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) Do(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetCvesByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *MockTransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerImage mocks base method.
func (m *MockTransactionQuerier) GetDockerImage(ctx context.Context, id int64) (*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImage", ctx, id)
	ret0, _ := ret[0].(*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImage indicates an expected call of GetDockerImage.
func (mr *MockTransactionQuerierMockRecorder) GetDockerImage(ctx, id any) *MockTransactionQuerierGetDockerImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImage", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerImage), ctx, id)
	return &MockTransactionQuerierGetDockerImageCall{Call: call}
}

// MockTransactionQuerierGetDockerImageCall wrap *gomock.Call
type MockTransactionQuerierGetDockerImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerImageCall) Return(arg0 *queries.ProjectDockerImage, arg1 error) *MockTransactionQuerierGetDockerImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerImageCall) Do(f func(context.Context, int64) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerImageCall) DoAndReturn(f func(context.Context, int64) (*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerImagesForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImagesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImagesForProject indicates an expected call of GetDockerImagesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerImagesForProject(ctx, projectID any) *MockTransactionQuerierGetDockerImagesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImagesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerImagesForProject), ctx, projectID)
	return &MockTransactionQuerierGetDockerImagesForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerImagesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerImagesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) Return(arg0 []*queries.ProjectDockerImage, arg1 error) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerImagesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *MockTransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerLayerScanForProject(ctx context.Context, arg queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerLayerScanForProject indicates an expected call of GetDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierGetDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) Do(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerScannedLayersForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerScannedLayersForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerScannedLayersForProject indicates an expected call of GetDockerScannedLayersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerScannedLayersForProject(ctx, projectID any) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerScannedLayersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerScannedLayersForProject), ctx, projectID)
	return &MockTransactionQuerierGetDockerScannedLayersForProjectCall{Call: call}
}

// MockTransactionQuerierGetDockerScannedLayersForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetDockerScannedLayersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetDockerScannedLayersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitRepositoriesForProject mocks base method.
func (m *MockTransactionQuerier) GetGitRepositoriesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoriesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoriesForProject indicates an expected call of GetGitRepositoriesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitRepositoriesForProject(ctx, projectID any) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoriesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitRepositoriesForProject), ctx, projectID)
	return &MockTransactionQuerierGetGitRepositoriesForProjectCall{Call: call}
}

// MockTransactionQuerierGetGitRepositoriesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetGitRepositoriesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) Return(arg0 []*queries.ProjectGitRepository, arg1 error) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitRepositoriesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitRepository mocks base method.
func (m *MockTransactionQuerier) GetGitRepository(ctx context.Context, id int64) (*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepository", ctx, id)
	ret0, _ := ret[0].(*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepository indicates an expected call of GetGitRepository.
func (mr *MockTransactionQuerierMockRecorder) GetGitRepository(ctx, id any) *MockTransactionQuerierGetGitRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepository", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitRepository), ctx, id)
	return &MockTransactionQuerierGetGitRepositoryCall{Call: call}
}

// MockTransactionQuerierGetGitRepositoryCall wrap *gomock.Call
type MockTransactionQuerierGetGitRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitRepositoryCall) Return(arg0 *queries.ProjectGitRepository, arg1 error) *MockTransactionQuerierGetGitRepositoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitRepositoryCall) Do(f func(context.Context, int64) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitRepositoryCall) DoAndReturn(f func(context.Context, int64) (*queries.ProjectGitRepository, error)) *MockTransactionQuerierGetGitRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProject mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProject indicates an expected call of GetGitScannedCommitsForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProject(ctx, projectID any) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProject), ctx, projectID)
	return &MockTransactionQuerierGetGitScannedCommitsForProjectCall{Call: call}
}

// MockTransactionQuerierGetGitScannedCommitsForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetGitScannedCommitsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProjectBatch mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProjectBatch(ctx context.Context, arg queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProjectBatch", ctx, arg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProjectBatch indicates an expected call of GetGitScannedCommitsForProjectBatch.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProjectBatch(ctx, arg any) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProjectBatch", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProjectBatch), ctx, arg)
	return &MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall{Call: call}
}

// MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall wrap *gomock.Call
type MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) Return(arg0 []string, arg1 error) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) Do(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall) DoAndReturn(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *MockTransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInvalidTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidTOTPSecretForUser indicates an expected call of GetInvalidTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetInvalidTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetInvalidTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierGetInvalidTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierGetInvalidTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierGetInvalidTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetInvalidTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlDatabase mocks base method.
func (m *MockTransactionQuerier) GetMysqlDatabase(ctx context.Context, id int64) (*queries.GetMysqlDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlDatabase", ctx, id)
	ret0, _ := ret[0].(*queries.GetMysqlDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlDatabase indicates an expected call of GetMysqlDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlDatabase(ctx, id any) *MockTransactionQuerierGetMysqlDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlDatabase), ctx, id)
	return &MockTransactionQuerierGetMysqlDatabaseCall{Call: call}
}

// MockTransactionQuerierGetMysqlDatabaseCall wrap *gomock.Call
type MockTransactionQuerierGetMysqlDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetMysqlDatabaseCall) Return(arg0 *queries.GetMysqlDatabaseRow, arg1 error) *MockTransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetMysqlDatabaseCall) Do(f func(context.Context, int64) (*queries.GetMysqlDatabaseRow, error)) *MockTransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetMysqlDatabaseCall) DoAndReturn(f func(context.Context, int64) (*queries.GetMysqlDatabaseRow, error)) *MockTransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlDatabasesForProject mocks base method.
func (m *MockTransactionQuerier) GetMysqlDatabasesForProject(ctx context.Context, projectID int64) ([]*queries.MysqlDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlDatabasesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.MysqlDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlDatabasesForProject indicates an expected call of GetMysqlDatabasesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlDatabasesForProject(ctx, projectID any) *MockTransactionQuerierGetMysqlDatabasesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlDatabasesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlDatabasesForProject), ctx, projectID)
	return &MockTransactionQuerierGetMysqlDatabasesForProjectCall{Call: call}
}

// MockTransactionQuerierGetMysqlDatabasesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetMysqlDatabasesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetMysqlDatabasesForProjectCall) Return(arg0 []*queries.MysqlDatabase, arg1 error) *MockTransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetMysqlDatabasesForProjectCall) Do(f func(context.Context, int64) ([]*queries.MysqlDatabase, error)) *MockTransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetMysqlDatabasesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.MysqlDatabase, error)) *MockTransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlScan mocks base method.
func (m *MockTransactionQuerier) GetMysqlScan(ctx context.Context, id int64) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlScan", ctx, id)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlScan indicates an expected call of GetMysqlScan.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlScan(ctx, id any) *MockTransactionQuerierGetMysqlScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlScan), ctx, id)
	return &MockTransactionQuerierGetMysqlScanCall{Call: call}
}

// MockTransactionQuerierGetMysqlScanCall wrap *gomock.Call
type MockTransactionQuerierGetMysqlScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetMysqlScanCall) Return(arg0 *queries.MysqlScan, arg1 error) *MockTransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetMysqlScanCall) Do(f func(context.Context, int64) (*queries.MysqlScan, error)) *MockTransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetMysqlScanCall) DoAndReturn(f func(context.Context, int64) (*queries.MysqlScan, error)) *MockTransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetMysqlScanByScanID(ctx context.Context, scanID int64) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlScanByScanID indicates an expected call of GetMysqlScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlScanByScanID(ctx, scanID any) *MockTransactionQuerierGetMysqlScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlScanByScanID), ctx, scanID)
	return &MockTransactionQuerierGetMysqlScanByScanIDCall{Call: call}
}

// MockTransactionQuerierGetMysqlScanByScanIDCall wrap *gomock.Call
type MockTransactionQuerierGetMysqlScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetMysqlScanByScanIDCall) Return(arg0 *queries.MysqlScan, arg1 error) *MockTransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetMysqlScanByScanIDCall) Do(f func(context.Context, int64) (*queries.MysqlScan, error)) *MockTransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetMysqlScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.MysqlScan, error)) *MockTransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCPEsByDBType mocks base method.
func (m *MockTransactionQuerier) GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCPEsByDBType", ctx, databaseType)
	ret0, _ := ret[0].([]*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCPEsByDBType indicates an expected call of GetNvdCPEsByDBType.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCPEsByDBType(ctx, databaseType any) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCPEsByDBType", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCPEsByDBType), ctx, databaseType)
	return &MockTransactionQuerierGetNvdCPEsByDBTypeCall{Call: call}
}

// MockTransactionQuerierGetNvdCPEsByDBTypeCall wrap *gomock.Call
type MockTransactionQuerierGetNvdCPEsByDBTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) Return(arg0 []*queries.NvdCpe, arg1 error) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) Do(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetNvdCPEsByDBTypeCall) DoAndReturn(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *MockTransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetNvdCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCveByCveID indicates an expected call of GetNvdCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCveByCveID(ctx, cveID any) *MockTransactionQuerierGetNvdCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCveByCveID), ctx, cveID)
	return &MockTransactionQuerierGetNvdCveByCveIDCall{Call: call}
}

// MockTransactionQuerierGetNvdCveByCveIDCall wrap *gomock.Call
type MockTransactionQuerierGetNvdCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetNvdCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *MockTransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganization mocks base method.
func (m *MockTransactionQuerier) GetOrganization(ctx context.Context, id int64) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetOrganization(ctx, id any) *MockTransactionQuerierGetOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganization), ctx, id)
	return &MockTransactionQuerierGetOrganizationCall{Call: call}
}

// MockTransactionQuerierGetOrganizationCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationCall) Return(arg0 *queries.Organization, arg1 error) *MockTransactionQuerierGetOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationCall) Do(f func(context.Context, int64) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationCall) DoAndReturn(f func(context.Context, int64) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationByName mocks base method.
func (m *MockTransactionQuerier) GetOrganizationByName(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationByName(ctx, name any) *MockTransactionQuerierGetOrganizationByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationByName), ctx, name)
	return &MockTransactionQuerierGetOrganizationByNameCall{Call: call}
}

// MockTransactionQuerierGetOrganizationByNameCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationByNameCall) Return(arg0 *queries.Organization, arg1 error) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationByNameCall) Do(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationByNameCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *MockTransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationMembers mocks base method.
func (m *MockTransactionQuerier) GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembers", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembers indicates an expected call of GetOrganizationMembers.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationMembers(ctx, organizationID any) *MockTransactionQuerierGetOrganizationMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationMembers), ctx, organizationID)
	return &MockTransactionQuerierGetOrganizationMembersCall{Call: call}
}

// MockTransactionQuerierGetOrganizationMembersCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationMembersCall) Return(arg0 []*queries.OrganizationMember, arg1 error) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationMembersCall) Do(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationPermissionsForUser(ctx context.Context, arg queries.GetOrganizationPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationPermissionsForUser indicates an expected call of GetOrganizationPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationPermissionsForUser(ctx, arg any) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationPermissionsForUser), ctx, arg)
	return &MockTransactionQuerierGetOrganizationPermissionsForUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationPermissionsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) Return(arg0 int16, arg1 error) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) Do(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationProjects mocks base method.
func (m *MockTransactionQuerier) GetOrganizationProjects(ctx context.Context, organizationID int64) ([]*queries.GetOrganizationProjectsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationProjects", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.GetOrganizationProjectsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationProjects indicates an expected call of GetOrganizationProjects.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationProjects(ctx, organizationID any) *MockTransactionQuerierGetOrganizationProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationProjects", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationProjects), ctx, organizationID)
	return &MockTransactionQuerierGetOrganizationProjectsCall{Call: call}
}

// MockTransactionQuerierGetOrganizationProjectsCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationProjectsCall) Return(arg0 []*queries.GetOrganizationProjectsRow, arg1 error) *MockTransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationProjectsCall) Do(f func(context.Context, int64) ([]*queries.GetOrganizationProjectsRow, error)) *MockTransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationProjectsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetOrganizationProjectsRow, error)) *MockTransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationUser(ctx context.Context, arg queries.GetOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUser indicates an expected call of GetOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationUser(ctx, arg any) *MockTransactionQuerierGetOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationUser), ctx, arg)
	return &MockTransactionQuerierGetOrganizationUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationUserCall) Do(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsByUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsByUser(ctx context.Context, userID int64) ([]*queries.GetOrganizationsByUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsByUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.GetOrganizationsByUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsByUser indicates an expected call of GetOrganizationsByUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsByUser(ctx, userID any) *MockTransactionQuerierGetOrganizationsByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsByUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsByUser), ctx, userID)
	return &MockTransactionQuerierGetOrganizationsByUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationsByUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationsByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationsByUserCall) Return(arg0 []*queries.GetOrganizationsByUserRow, arg1 error) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationsByUserCall) Do(f func(context.Context, int64) ([]*queries.GetOrganizationsByUserRow, error)) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationsByUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetOrganizationsByUserRow, error)) *MockTransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsForUser(ctx context.Context, userID int64) ([]*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsForUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsForUser indicates an expected call of GetOrganizationsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsForUser(ctx, userID any) *MockTransactionQuerierGetOrganizationsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsForUser), ctx, userID)
	return &MockTransactionQuerierGetOrganizationsForUserCall{Call: call}
}

// MockTransactionQuerierGetOrganizationsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetOrganizationsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetOrganizationsForUserCall) Return(arg0 []*queries.Organization, arg1 error) *MockTransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetOrganizationsForUserCall) Do(f func(context.Context, int64) ([]*queries.Organization, error)) *MockTransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetOrganizationsForUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Organization, error)) *MockTransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresDatabase mocks base method.
func (m *MockTransactionQuerier) GetPostgresDatabase(ctx context.Context, id int64) (*queries.GetPostgresDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresDatabase", ctx, id)
	ret0, _ := ret[0].(*queries.GetPostgresDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresDatabase indicates an expected call of GetPostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresDatabase(ctx, id any) *MockTransactionQuerierGetPostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresDatabase), ctx, id)
	return &MockTransactionQuerierGetPostgresDatabaseCall{Call: call}
}

// MockTransactionQuerierGetPostgresDatabaseCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresDatabaseCall) Return(arg0 *queries.GetPostgresDatabaseRow, arg1 error) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresDatabaseCall) Do(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresDatabaseCall) DoAndReturn(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *MockTransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresDatabasesForProject mocks base method.
func (m *MockTransactionQuerier) GetPostgresDatabasesForProject(ctx context.Context, projectID int64) ([]*queries.PostgresDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresDatabasesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.PostgresDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresDatabasesForProject indicates an expected call of GetPostgresDatabasesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresDatabasesForProject(ctx, projectID any) *MockTransactionQuerierGetPostgresDatabasesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresDatabasesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresDatabasesForProject), ctx, projectID)
	return &MockTransactionQuerierGetPostgresDatabasesForProjectCall{Call: call}
}

// MockTransactionQuerierGetPostgresDatabasesForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresDatabasesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresDatabasesForProjectCall) Return(arg0 []*queries.PostgresDatabase, arg1 error) *MockTransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresDatabasesForProjectCall) Do(f func(context.Context, int64) ([]*queries.PostgresDatabase, error)) *MockTransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresDatabasesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.PostgresDatabase, error)) *MockTransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScan mocks base method.
func (m *MockTransactionQuerier) GetPostgresScan(ctx context.Context, id int64) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScan", ctx, id)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScan indicates an expected call of GetPostgresScan.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScan(ctx, id any) *MockTransactionQuerierGetPostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScan), ctx, id)
	return &MockTransactionQuerierGetPostgresScanCall{Call: call}
}

// MockTransactionQuerierGetPostgresScanCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScanCall) Return(arg0 *queries.PostgresScan, arg1 error) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScanCall) Do(f func(context.Context, int64) (*queries.PostgresScan, error)) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScanCall) DoAndReturn(f func(context.Context, int64) (*queries.PostgresScan, error)) *MockTransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetPostgresScanByScanID(ctx context.Context, scanID int64) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScanByScanID indicates an expected call of GetPostgresScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScanByScanID(ctx, scanID any) *MockTransactionQuerierGetPostgresScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScanByScanID), ctx, scanID)
	return &MockTransactionQuerierGetPostgresScanByScanIDCall{Call: call}
}

// MockTransactionQuerierGetPostgresScanByScanIDCall wrap *gomock.Call
type MockTransactionQuerierGetPostgresScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetPostgresScanByScanIDCall) Return(arg0 *queries.PostgresScan, arg1 error) *MockTransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetPostgresScanByScanIDCall) Do(f func(context.Context, int64) (*queries.PostgresScan, error)) *MockTransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetPostgresScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.PostgresScan, error)) *MockTransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProject mocks base method.
func (m *MockTransactionQuerier) GetProject(ctx context.Context, id int64) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockTransactionQuerierMockRecorder) GetProject(ctx, id any) *MockTransactionQuerierGetProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProject), ctx, id)
	return &MockTransactionQuerierGetProjectCall{Call: call}
}

// MockTransactionQuerierGetProjectCall wrap *gomock.Call
type MockTransactionQuerierGetProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectCall) Return(arg0 *queries.Project, arg1 error) *MockTransactionQuerierGetProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectCall) Do(f func(context.Context, int64) (*queries.Project, error)) *MockTransactionQuerierGetProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectCall) DoAndReturn(f func(context.Context, int64) (*queries.Project, error)) *MockTransactionQuerierGetProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectByOrganizationAndName mocks base method.
func (m *MockTransactionQuerier) GetProjectByOrganizationAndName(ctx context.Context, arg queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOrganizationAndName", ctx, arg)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOrganizationAndName indicates an expected call of GetProjectByOrganizationAndName.
func (mr *MockTransactionQuerierMockRecorder) GetProjectByOrganizationAndName(ctx, arg any) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOrganizationAndName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectByOrganizationAndName), ctx, arg)
	return &MockTransactionQuerierGetProjectByOrganizationAndNameCall{Call: call}
}

// MockTransactionQuerierGetProjectByOrganizationAndNameCall wrap *gomock.Call
type MockTransactionQuerierGetProjectByOrganizationAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) Return(arg0 *queries.Project, arg1 error) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) Do(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectByOrganizationAndNameCall) DoAndReturn(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *MockTransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectInfoForMysqlScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetProjectInfoForMysqlScanByScanID(ctx context.Context, scanID int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInfoForMysqlScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.GetProjectInfoForMysqlScanByScanIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInfoForMysqlScanByScanID indicates an expected call of GetProjectInfoForMysqlScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetProjectInfoForMysqlScanByScanID(ctx, scanID any) *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInfoForMysqlScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectInfoForMysqlScanByScanID), ctx, scanID)
	return &MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall{Call: call}
}

// MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall wrap *gomock.Call
type MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) Return(arg0 *queries.GetProjectInfoForMysqlScanByScanIDRow, arg1 error) *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) Do(f func(context.Context, int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error)) *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error)) *MockTransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectInfoForPostgresScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetProjectInfoForPostgresScanByScanID(ctx context.Context, scanID int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInfoForPostgresScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.GetProjectInfoForPostgresScanByScanIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInfoForPostgresScanByScanID indicates an expected call of GetProjectInfoForPostgresScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetProjectInfoForPostgresScanByScanID(ctx, scanID any) *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInfoForPostgresScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectInfoForPostgresScanByScanID), ctx, scanID)
	return &MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall{Call: call}
}

// MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall wrap *gomock.Call
type MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) Return(arg0 *queries.GetProjectInfoForPostgresScanByScanIDRow, arg1 error) *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) Do(f func(context.Context, int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error)) *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error)) *MockTransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMembers mocks base method.
func (m *MockTransactionQuerier) GetProjectMembers(ctx context.Context, projectID int64) ([]*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockTransactionQuerierMockRecorder) GetProjectMembers(ctx, projectID any) *MockTransactionQuerierGetProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectMembers), ctx, projectID)
	return &MockTransactionQuerierGetProjectMembersCall{Call: call}
}

// MockTransactionQuerierGetProjectMembersCall wrap *gomock.Call
type MockTransactionQuerierGetProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectMembersCall) Return(arg0 []*queries.ProjectMember, arg1 error) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectMembersCall) Do(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetProjectPermissionsForUser(ctx context.Context, arg queries.GetProjectPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPermissionsForUser indicates an expected call of GetProjectPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectPermissionsForUser(ctx, arg any) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectPermissionsForUser), ctx, arg)
	return &MockTransactionQuerierGetProjectPermissionsForUserCall{Call: call}
}

// MockTransactionQuerierGetProjectPermissionsForUserCall wrap *gomock.Call
type MockTransactionQuerierGetProjectPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) Return(arg0 int16, arg1 error) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) Do(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *MockTransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectUser mocks base method.
func (m *MockTransactionQuerier) GetProjectUser(ctx context.Context, arg queries.GetProjectUserParams) (*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectUser", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectUser indicates an expected call of GetProjectUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectUser(ctx, arg any) *MockTransactionQuerierGetProjectUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectUser), ctx, arg)
	return &MockTransactionQuerierGetProjectUserCall{Call: call}
}

// MockTransactionQuerierGetProjectUserCall wrap *gomock.Call
type MockTransactionQuerierGetProjectUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectUserCall) Return(arg0 *queries.ProjectMember, arg1 error) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectUserCall) Do(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectUserCall) DoAndReturn(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *MockTransactionQuerierGetProjectUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectWithStats mocks base method.
func (m *MockTransactionQuerier) GetProjectWithStats(ctx context.Context, id int64) (*queries.GetProjectWithStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectWithStats", ctx, id)
	ret0, _ := ret[0].(*queries.GetProjectWithStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectWithStats indicates an expected call of GetProjectWithStats.
func (mr *MockTransactionQuerierMockRecorder) GetProjectWithStats(ctx, id any) *MockTransactionQuerierGetProjectWithStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectWithStats", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectWithStats), ctx, id)
	return &MockTransactionQuerierGetProjectWithStatsCall{Call: call}
}

// MockTransactionQuerierGetProjectWithStatsCall wrap *gomock.Call
type MockTransactionQuerierGetProjectWithStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectWithStatsCall) Return(arg0 *queries.GetProjectWithStatsRow, arg1 error) *MockTransactionQuerierGetProjectWithStatsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectWithStatsCall) Do(f func(context.Context, int64) (*queries.GetProjectWithStatsRow, error)) *MockTransactionQuerierGetProjectWithStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectWithStatsCall) DoAndReturn(f func(context.Context, int64) (*queries.GetProjectWithStatsRow, error)) *MockTransactionQuerierGetProjectWithStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectsByOrganization mocks base method.
func (m *MockTransactionQuerier) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOrganization", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByOrganization indicates an expected call of GetProjectsByOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetProjectsByOrganization(ctx, organizationID any) *MockTransactionQuerierGetProjectsByOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectsByOrganization), ctx, organizationID)
	return &MockTransactionQuerierGetProjectsByOrganizationCall{Call: call}
}

// MockTransactionQuerierGetProjectsByOrganizationCall wrap *gomock.Call
type MockTransactionQuerierGetProjectsByOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) Return(arg0 []*queries.Project, arg1 error) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetProjectsByOrganizationCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *MockTransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordToken indicates an expected call of GetResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) GetResetPasswordToken(ctx, id any) *MockTransactionQuerierGetResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetResetPasswordToken), ctx, id)
	return &MockTransactionQuerierGetResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierGetResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierGetResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *MockTransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScan mocks base method.
func (m *MockTransactionQuerier) GetScan(ctx context.Context, id int64) (*queries.GetScanRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScan", ctx, id)
	ret0, _ := ret[0].(*queries.GetScanRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScan indicates an expected call of GetScan.
func (mr *MockTransactionQuerierMockRecorder) GetScan(ctx, id any) *MockTransactionQuerierGetScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScan), ctx, id)
	return &MockTransactionQuerierGetScanCall{Call: call}
}

// MockTransactionQuerierGetScanCall wrap *gomock.Call
type MockTransactionQuerierGetScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScanCall) Return(arg0 *queries.GetScanRow, arg1 error) *MockTransactionQuerierGetScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScanCall) Do(f func(context.Context, int64) (*queries.GetScanRow, error)) *MockTransactionQuerierGetScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScanCall) DoAndReturn(f func(context.Context, int64) (*queries.GetScanRow, error)) *MockTransactionQuerierGetScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanBruteforceResults mocks base method.
func (m *MockTransactionQuerier) GetScanBruteforceResults(ctx context.Context, scanID int64) ([]*queries.ScanBruteforceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanBruteforceResults", ctx, scanID)
	ret0, _ := ret[0].([]*queries.ScanBruteforceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanBruteforceResults indicates an expected call of GetScanBruteforceResults.
func (mr *MockTransactionQuerierMockRecorder) GetScanBruteforceResults(ctx, scanID any) *MockTransactionQuerierGetScanBruteforceResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanBruteforceResults", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanBruteforceResults), ctx, scanID)
	return &MockTransactionQuerierGetScanBruteforceResultsCall{Call: call}
}

// MockTransactionQuerierGetScanBruteforceResultsCall wrap *gomock.Call
type MockTransactionQuerierGetScanBruteforceResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScanBruteforceResultsCall) Return(arg0 []*queries.ScanBruteforceResult, arg1 error) *MockTransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScanBruteforceResultsCall) Do(f func(context.Context, int64) ([]*queries.ScanBruteforceResult, error)) *MockTransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScanBruteforceResultsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ScanBruteforceResult, error)) *MockTransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanGroup mocks base method.
func (m *MockTransactionQuerier) GetScanGroup(ctx context.Context, id int64) (*queries.ScanGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanGroup", ctx, id)
	ret0, _ := ret[0].(*queries.ScanGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanGroup indicates an expected call of GetScanGroup.
func (mr *MockTransactionQuerierMockRecorder) GetScanGroup(ctx, id any) *MockTransactionQuerierGetScanGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanGroup", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanGroup), ctx, id)
	return &MockTransactionQuerierGetScanGroupCall{Call: call}
}

// MockTransactionQuerierGetScanGroupCall wrap *gomock.Call
type MockTransactionQuerierGetScanGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScanGroupCall) Return(arg0 *queries.ScanGroup, arg1 error) *MockTransactionQuerierGetScanGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScanGroupCall) Do(f func(context.Context, int64) (*queries.ScanGroup, error)) *MockTransactionQuerierGetScanGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScanGroupCall) DoAndReturn(f func(context.Context, int64) (*queries.ScanGroup, error)) *MockTransactionQuerierGetScanGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanResults mocks base method.
func (m *MockTransactionQuerier) GetScanResults(ctx context.Context, scanID int64) ([]*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanResults", ctx, scanID)
	ret0, _ := ret[0].([]*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanResults indicates an expected call of GetScanResults.
func (mr *MockTransactionQuerierMockRecorder) GetScanResults(ctx, scanID any) *MockTransactionQuerierGetScanResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanResults", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanResults), ctx, scanID)
	return &MockTransactionQuerierGetScanResultsCall{Call: call}
}

// MockTransactionQuerierGetScanResultsCall wrap *gomock.Call
type MockTransactionQuerierGetScanResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScanResultsCall) Return(arg0 []*queries.ScanResult, arg1 error) *MockTransactionQuerierGetScanResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScanResultsCall) Do(f func(context.Context, int64) ([]*queries.ScanResult, error)) *MockTransactionQuerierGetScanResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScanResultsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ScanResult, error)) *MockTransactionQuerierGetScanResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanResultsByScanIdAndScanSource mocks base method.
func (m *MockTransactionQuerier) GetScanResultsByScanIdAndScanSource(ctx context.Context, arg queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanResultsByScanIdAndScanSource", ctx, arg)
	ret0, _ := ret[0].([]*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanResultsByScanIdAndScanSource indicates an expected call of GetScanResultsByScanIdAndScanSource.
func (mr *MockTransactionQuerierMockRecorder) GetScanResultsByScanIdAndScanSource(ctx, arg any) *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanResultsByScanIdAndScanSource", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanResultsByScanIdAndScanSource), ctx, arg)
	return &MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall{Call: call}
}

// MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall wrap *gomock.Call
type MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall) Return(arg0 []*queries.ScanResult, arg1 error) *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall) Do(f func(context.Context, queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error)) *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall) DoAndReturn(f func(context.Context, queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error)) *MockTransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScansForProject mocks base method.
func (m *MockTransactionQuerier) GetScansForProject(ctx context.Context, projectID int64) ([]*queries.GetScansForProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScansForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.GetScansForProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScansForProject indicates an expected call of GetScansForProject.
func (mr *MockTransactionQuerierMockRecorder) GetScansForProject(ctx, projectID any) *MockTransactionQuerierGetScansForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScansForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScansForProject), ctx, projectID)
	return &MockTransactionQuerierGetScansForProjectCall{Call: call}
}

// MockTransactionQuerierGetScansForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetScansForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetScansForProjectCall) Return(arg0 []*queries.GetScansForProjectRow, arg1 error) *MockTransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetScansForProjectCall) Do(f func(context.Context, int64) ([]*queries.GetScansForProjectRow, error)) *MockTransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetScansForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetScansForProjectRow, error)) *MockTransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpecificBruteforcePasswordID mocks base method.
func (m *MockTransactionQuerier) GetSpecificBruteforcePasswordID(ctx context.Context, arg queries.GetSpecificBruteforcePasswordIDParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificBruteforcePasswordID", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificBruteforcePasswordID indicates an expected call of GetSpecificBruteforcePasswordID.
func (mr *MockTransactionQuerierMockRecorder) GetSpecificBruteforcePasswordID(ctx, arg any) *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificBruteforcePasswordID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetSpecificBruteforcePasswordID), ctx, arg)
	return &MockTransactionQuerierGetSpecificBruteforcePasswordIDCall{Call: call}
}

// MockTransactionQuerierGetSpecificBruteforcePasswordIDCall wrap *gomock.Call
type MockTransactionQuerierGetSpecificBruteforcePasswordIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall) Return(arg0 int64, arg1 error) *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall) Do(f func(context.Context, queries.GetSpecificBruteforcePasswordIDParams) (int64, error)) *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall) DoAndReturn(f func(context.Context, queries.GetSpecificBruteforcePasswordIDParams) (int64, error)) *MockTransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPSecretForUser indicates an expected call of GetTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierGetTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierGetTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierGetTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierGetTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *MockTransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockTransactionQuerier) GetUser(ctx context.Context, id int64) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionQuerierMockRecorder) GetUser(ctx, id any) *MockTransactionQuerierGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUser), ctx, id)
	return &MockTransactionQuerierGetUserCall{Call: call}
}

// MockTransactionQuerierGetUserCall wrap *gomock.Call
type MockTransactionQuerierGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserCall) Do(f func(context.Context, int64) (*queries.User, error)) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserCall) DoAndReturn(f func(context.Context, int64) (*queries.User, error)) *MockTransactionQuerierGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByConfirmSelector mocks base method.
func (m *MockTransactionQuerier) GetUserByConfirmSelector(ctx context.Context, confirmSelector sql.NullString) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByConfirmSelector", ctx, confirmSelector)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByConfirmSelector indicates an expected call of GetUserByConfirmSelector.
func (mr *MockTransactionQuerierMockRecorder) GetUserByConfirmSelector(ctx, confirmSelector any) *MockTransactionQuerierGetUserByConfirmSelectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByConfirmSelector", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByConfirmSelector), ctx, confirmSelector)
	return &MockTransactionQuerierGetUserByConfirmSelectorCall{Call: call}
}

// MockTransactionQuerierGetUserByConfirmSelectorCall wrap *gomock.Call
type MockTransactionQuerierGetUserByConfirmSelectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByConfirmSelectorCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByConfirmSelectorCall) Do(f func(context.Context, sql.NullString) (*queries.User, error)) *MockTransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByConfirmSelectorCall) DoAndReturn(f func(context.Context, sql.NullString) (*queries.User, error)) *MockTransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByEmail(ctx context.Context, email string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByEmail(ctx, email any) *MockTransactionQuerierGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByEmail), ctx, email)
	return &MockTransactionQuerierGetUserByEmailCall{Call: call}
}

// MockTransactionQuerierGetUserByEmailCall wrap *gomock.Call
type MockTransactionQuerierGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByEmailCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByEmailCall) Do(f func(context.Context, string) (*queries.User, error)) *MockTransactionQuerierGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (*queries.User, error)) *MockTransactionQuerierGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByRecoverSelector mocks base method.
func (m *MockTransactionQuerier) GetUserByRecoverSelector(ctx context.Context, recoverSelector sql.NullString) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByRecoverSelector", ctx, recoverSelector)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByRecoverSelector indicates an expected call of GetUserByRecoverSelector.
func (mr *MockTransactionQuerierMockRecorder) GetUserByRecoverSelector(ctx, recoverSelector any) *MockTransactionQuerierGetUserByRecoverSelectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByRecoverSelector", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByRecoverSelector), ctx, recoverSelector)
	return &MockTransactionQuerierGetUserByRecoverSelectorCall{Call: call}
}

// MockTransactionQuerierGetUserByRecoverSelectorCall wrap *gomock.Call
type MockTransactionQuerierGetUserByRecoverSelectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByRecoverSelectorCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByRecoverSelectorCall) Do(f func(context.Context, sql.NullString) (*queries.User, error)) *MockTransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByRecoverSelectorCall) DoAndReturn(f func(context.Context, sql.NullString) (*queries.User, error)) *MockTransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByUsernameOrEmail(ctx context.Context, arg queries.GetUserByUsernameOrEmailParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByUsernameOrEmail(ctx, arg any) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByUsernameOrEmail), ctx, arg)
	return &MockTransactionQuerierGetUserByUsernameOrEmailCall{Call: call}
}

// MockTransactionQuerierGetUserByUsernameOrEmailCall wrap *gomock.Call
type MockTransactionQuerierGetUserByUsernameOrEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) Return(arg0 *queries.User, arg1 error) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) Do(f func(context.Context, queries.GetUserByUsernameOrEmailParams) (*queries.User, error)) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByUsernameOrEmailCall) DoAndReturn(f func(context.Context, queries.GetUserByUsernameOrEmailParams) (*queries.User, error)) *MockTransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByWebauthnCredentialID mocks base method.
func (m *MockTransactionQuerier) GetUserByWebauthnCredentialID(ctx context.Context, credentialID []byte) (*queries.GetUserByWebauthnCredentialIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByWebauthnCredentialID", ctx, credentialID)
	ret0, _ := ret[0].(*queries.GetUserByWebauthnCredentialIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByWebauthnCredentialID indicates an expected call of GetUserByWebauthnCredentialID.
func (mr *MockTransactionQuerierMockRecorder) GetUserByWebauthnCredentialID(ctx, credentialID any) *MockTransactionQuerierGetUserByWebauthnCredentialIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByWebauthnCredentialID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByWebauthnCredentialID), ctx, credentialID)
	return &MockTransactionQuerierGetUserByWebauthnCredentialIDCall{Call: call}
}

// MockTransactionQuerierGetUserByWebauthnCredentialIDCall wrap *gomock.Call
type MockTransactionQuerierGetUserByWebauthnCredentialIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetUserByWebauthnCredentialIDCall) Return(arg0 *queries.GetUserByWebauthnCredentialIDRow, arg1 error) *MockTransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetUserByWebauthnCredentialIDCall) Do(f func(context.Context, []byte) (*queries.GetUserByWebauthnCredentialIDRow, error)) *MockTransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetUserByWebauthnCredentialIDCall) DoAndReturn(f func(context.Context, []byte) (*queries.GetUserByWebauthnCredentialIDRow, error)) *MockTransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWebauthnCredentialsByUserID mocks base method.
func (m *MockTransactionQuerier) GetWebauthnCredentialsByUserID(ctx context.Context, userID int64) ([]*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebauthnCredentialsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebauthnCredentialsByUserID indicates an expected call of GetWebauthnCredentialsByUserID.
func (mr *MockTransactionQuerierMockRecorder) GetWebauthnCredentialsByUserID(ctx, userID any) *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebauthnCredentialsByUserID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWebauthnCredentialsByUserID), ctx, userID)
	return &MockTransactionQuerierGetWebauthnCredentialsByUserIDCall{Call: call}
}

// MockTransactionQuerierGetWebauthnCredentialsByUserIDCall wrap *gomock.Call
type MockTransactionQuerierGetWebauthnCredentialsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall) Return(arg0 []*queries.WebauthnCredential, arg1 error) *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall) Do(f func(context.Context, int64) ([]*queries.WebauthnCredential, error)) *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall) DoAndReturn(f func(context.Context, int64) ([]*queries.WebauthnCredential, error)) *MockTransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerByToken mocks base method.
func (m *MockTransactionQuerier) GetWorkerByToken(ctx context.Context, token string) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerByToken", ctx, token)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerByToken indicates an expected call of GetWorkerByToken.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerByToken(ctx, token any) *MockTransactionQuerierGetWorkerByTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerByToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerByToken), ctx, token)
	return &MockTransactionQuerierGetWorkerByTokenCall{Call: call}
}

// MockTransactionQuerierGetWorkerByTokenCall wrap *gomock.Call
type MockTransactionQuerierGetWorkerByTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkerByTokenCall) Return(arg0 *queries.Worker, arg1 error) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkerByTokenCall) Do(f func(context.Context, string) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkerByTokenCall) DoAndReturn(f func(context.Context, string) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerForProject mocks base method.
func (m *MockTransactionQuerier) GetWorkerForProject(ctx context.Context, arg queries.GetWorkerForProjectParams) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerForProject indicates an expected call of GetWorkerForProject.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerForProject(ctx, arg any) *MockTransactionQuerierGetWorkerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerForProject), ctx, arg)
	return &MockTransactionQuerierGetWorkerForProjectCall{Call: call}
}

// MockTransactionQuerierGetWorkerForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetWorkerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkerForProjectCall) Return(arg0 *queries.Worker, arg1 error) *MockTransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkerForProjectCall) Do(f func(context.Context, queries.GetWorkerForProjectParams) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkerForProjectCall) DoAndReturn(f func(context.Context, queries.GetWorkerForProjectParams) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerForScan mocks base method.
func (m *MockTransactionQuerier) GetWorkerForScan(ctx context.Context, id int64) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerForScan", ctx, id)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerForScan indicates an expected call of GetWorkerForScan.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerForScan(ctx, id any) *MockTransactionQuerierGetWorkerForScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerForScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerForScan), ctx, id)
	return &MockTransactionQuerierGetWorkerForScanCall{Call: call}
}

// MockTransactionQuerierGetWorkerForScanCall wrap *gomock.Call
type MockTransactionQuerierGetWorkerForScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkerForScanCall) Return(arg0 *queries.Worker, arg1 error) *MockTransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkerForScanCall) Do(f func(context.Context, int64) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkerForScanCall) DoAndReturn(f func(context.Context, int64) (*queries.Worker, error)) *MockTransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkersForProject mocks base method.
func (m *MockTransactionQuerier) GetWorkersForProject(ctx context.Context, projectID int64) ([]*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkersForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkersForProject indicates an expected call of GetWorkersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetWorkersForProject(ctx, projectID any) *MockTransactionQuerierGetWorkersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkersForProject), ctx, projectID)
	return &MockTransactionQuerierGetWorkersForProjectCall{Call: call}
}

// MockTransactionQuerierGetWorkersForProjectCall wrap *gomock.Call
type MockTransactionQuerierGetWorkersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierGetWorkersForProjectCall) Return(arg0 []*queries.Worker, arg1 error) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierGetWorkersForProjectCall) Do(f func(context.Context, int64) ([]*queries.Worker, error)) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierGetWorkersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Worker, error)) *MockTransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertBruteforcePasswords mocks base method.
func (m *MockTransactionQuerier) InsertBruteforcePasswords(ctx context.Context, passwords []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBruteforcePasswords", ctx, passwords)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBruteforcePasswords indicates an expected call of InsertBruteforcePasswords.
func (mr *MockTransactionQuerierMockRecorder) InsertBruteforcePasswords(ctx, passwords any) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBruteforcePasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).InsertBruteforcePasswords), ctx, passwords)
	return &MockTransactionQuerierInsertBruteforcePasswordsCall{Call: call}
}

// MockTransactionQuerierInsertBruteforcePasswordsCall wrap *gomock.Call
type MockTransactionQuerierInsertBruteforcePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) Return(arg0 error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) Do(f func(context.Context, []string) error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInsertBruteforcePasswordsCall) DoAndReturn(f func(context.Context, []string) error) *MockTransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateResetPasswordToken indicates an expected call of InvalidateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) InvalidateResetPasswordToken(ctx, id any) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateResetPasswordToken), ctx, id)
	return &MockTransactionQuerierInvalidateResetPasswordTokenCall{Call: call}
}

// MockTransactionQuerierInvalidateResetPasswordTokenCall wrap *gomock.Call
type MockTransactionQuerierInvalidateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) Return(arg0 error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInvalidateResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockTransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateTOTPSecretForUser indicates an expected call of InvalidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) InvalidateTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierInvalidateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierInvalidateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierInvalidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) Return(arg0 error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierInvalidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockTransactionQuerier) ListUsers(ctx context.Context) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransactionQuerierMockRecorder) ListUsers(ctx any) *MockTransactionQuerierListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsers), ctx)
	return &MockTransactionQuerierListUsersCall{Call: call}
}

// MockTransactionQuerierListUsersCall wrap *gomock.Call
type MockTransactionQuerierListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierListUsersCall) Return(arg0 []*queries.User, arg1 error) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierListUsersCall) Do(f func(context.Context) ([]*queries.User, error)) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierListUsersCall) DoAndReturn(f func(context.Context) ([]*queries.User, error)) *MockTransactionQuerierListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersPaginated mocks base method.
func (m *MockTransactionQuerier) ListUsersPaginated(ctx context.Context, arg queries.ListUsersPaginatedParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersPaginated indicates an expected call of ListUsersPaginated.
func (mr *MockTransactionQuerierMockRecorder) ListUsersPaginated(ctx, arg any) *MockTransactionQuerierListUsersPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsersPaginated), ctx, arg)
	return &MockTransactionQuerierListUsersPaginatedCall{Call: call}
}

// MockTransactionQuerierListUsersPaginatedCall wrap *gomock.Call
type MockTransactionQuerierListUsersPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierListUsersPaginatedCall) Return(arg0 []*queries.User, arg1 error) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierListUsersPaginatedCall) Do(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierListUsersPaginatedCall) DoAndReturn(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *MockTransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveOrganizationUser mocks base method.
func (m *MockTransactionQuerier) RemoveOrganizationUser(ctx context.Context, arg queries.RemoveOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveOrganizationUser indicates an expected call of RemoveOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) RemoveOrganizationUser(ctx, arg any) *MockTransactionQuerierRemoveOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).RemoveOrganizationUser), ctx, arg)
	return &MockTransactionQuerierRemoveOrganizationUserCall{Call: call}
}

// MockTransactionQuerierRemoveOrganizationUserCall wrap *gomock.Call
type MockTransactionQuerierRemoveOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierRemoveOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *MockTransactionQuerierRemoveOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierRemoveOrganizationUserCall) Do(f func(context.Context, queries.RemoveOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierRemoveOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierRemoveOrganizationUserCall) DoAndReturn(f func(context.Context, queries.RemoveOrganizationUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierRemoveOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOrganizationPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) SetOrganizationPermissionsForUser(ctx context.Context, arg queries.SetOrganizationPermissionsForUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrganizationPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrganizationPermissionsForUser indicates an expected call of SetOrganizationPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) SetOrganizationPermissionsForUser(ctx, arg any) *MockTransactionQuerierSetOrganizationPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrganizationPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).SetOrganizationPermissionsForUser), ctx, arg)
	return &MockTransactionQuerierSetOrganizationPermissionsForUserCall{Call: call}
}

// MockTransactionQuerierSetOrganizationPermissionsForUserCall wrap *gomock.Call
type MockTransactionQuerierSetOrganizationPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierSetOrganizationPermissionsForUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *MockTransactionQuerierSetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierSetOrganizationPermissionsForUserCall) Do(f func(context.Context, queries.SetOrganizationPermissionsForUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierSetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierSetOrganizationPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.SetOrganizationPermissionsForUserParams) (*queries.OrganizationMember, error)) *MockTransactionQuerierSetOrganizationPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTransaction mocks base method.
func (m *MockTransactionQuerier) StartTransaction(ctx context.Context) (db.TransactionQuerier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.TransactionQuerier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionQuerierMockRecorder) StartTransaction(ctx any) *MockTransactionQuerierStartTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).StartTransaction), ctx)
	return &MockTransactionQuerierStartTransactionCall{Call: call}
}

// MockTransactionQuerierStartTransactionCall wrap *gomock.Call
type MockTransactionQuerierStartTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierStartTransactionCall) Return(arg0 db.TransactionQuerier, arg1 error) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierStartTransactionCall) Do(f func(context.Context) (db.TransactionQuerier, error)) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierStartTransactionCall) DoAndReturn(f func(context.Context) (db.TransactionQuerier, error)) *MockTransactionQuerierStartTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBruteforcedPassword mocks base method.
func (m *MockTransactionQuerier) UpdateBruteforcedPassword(ctx context.Context, arg queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBruteforcedPassword", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBruteforcedPassword indicates an expected call of UpdateBruteforcedPassword.
func (mr *MockTransactionQuerierMockRecorder) UpdateBruteforcedPassword(ctx, arg any) *MockTransactionQuerierUpdateBruteforcedPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBruteforcedPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateBruteforcedPassword), ctx, arg)
	return &MockTransactionQuerierUpdateBruteforcedPasswordCall{Call: call}
}

// MockTransactionQuerierUpdateBruteforcedPasswordCall wrap *gomock.Call
type MockTransactionQuerierUpdateBruteforcedPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateBruteforcedPasswordCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *MockTransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateBruteforcedPasswordCall) Do(f func(context.Context, queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateBruteforcedPasswordCall) DoAndReturn(f func(context.Context, queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *MockTransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) UpdateDockerLayerScanForProject(ctx context.Context, arg queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDockerLayerScanForProject indicates an expected call of UpdateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) UpdateDockerLayerScanForProject(ctx, arg any) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateDockerLayerScanForProject), ctx, arg)
	return &MockTransactionQuerierUpdateDockerLayerScanForProjectCall{Call: call}
}

// MockTransactionQuerierUpdateDockerLayerScanForProjectCall wrap *gomock.Call
type MockTransactionQuerierUpdateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *MockTransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMysqlDatabase mocks base method.
func (m *MockTransactionQuerier) UpdateMysqlDatabase(ctx context.Context, arg queries.UpdateMysqlDatabaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMysqlDatabase", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMysqlDatabase indicates an expected call of UpdateMysqlDatabase.
func (mr *MockTransactionQuerierMockRecorder) UpdateMysqlDatabase(ctx, arg any) *MockTransactionQuerierUpdateMysqlDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMysqlDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateMysqlDatabase), ctx, arg)
	return &MockTransactionQuerierUpdateMysqlDatabaseCall{Call: call}
}

// MockTransactionQuerierUpdateMysqlDatabaseCall wrap *gomock.Call
type MockTransactionQuerierUpdateMysqlDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateMysqlDatabaseCall) Return(arg0 error) *MockTransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateMysqlDatabaseCall) Do(f func(context.Context, queries.UpdateMysqlDatabaseParams) error) *MockTransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateMysqlDatabaseCall) DoAndReturn(f func(context.Context, queries.UpdateMysqlDatabaseParams) error) *MockTransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMysqlVersion mocks base method.
func (m *MockTransactionQuerier) UpdateMysqlVersion(ctx context.Context, arg queries.UpdateMysqlVersionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMysqlVersion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMysqlVersion indicates an expected call of UpdateMysqlVersion.
func (mr *MockTransactionQuerierMockRecorder) UpdateMysqlVersion(ctx, arg any) *MockTransactionQuerierUpdateMysqlVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMysqlVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateMysqlVersion), ctx, arg)
	return &MockTransactionQuerierUpdateMysqlVersionCall{Call: call}
}

// MockTransactionQuerierUpdateMysqlVersionCall wrap *gomock.Call
type MockTransactionQuerierUpdateMysqlVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateMysqlVersionCall) Return(arg0 error) *MockTransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateMysqlVersionCall) Do(f func(context.Context, queries.UpdateMysqlVersionParams) error) *MockTransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateMysqlVersionCall) DoAndReturn(f func(context.Context, queries.UpdateMysqlVersionParams) error) *MockTransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNvdCPE mocks base method.
func (m *MockTransactionQuerier) UpdateNvdCPE(ctx context.Context, arg queries.UpdateNvdCPEParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNvdCPE indicates an expected call of UpdateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) UpdateNvdCPE(ctx, arg any) *MockTransactionQuerierUpdateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateNvdCPE), ctx, arg)
	return &MockTransactionQuerierUpdateNvdCPECall{Call: call}
}

// MockTransactionQuerierUpdateNvdCPECall wrap *gomock.Call
type MockTransactionQuerierUpdateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateNvdCPECall) Return(arg0 error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateNvdCPECall) Do(f func(context.Context, queries.UpdateNvdCPEParams) error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateNvdCPECall) DoAndReturn(f func(context.Context, queries.UpdateNvdCPEParams) error) *MockTransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresDatabase mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresDatabase(ctx context.Context, arg queries.UpdatePostgresDatabaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresDatabase", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresDatabase indicates an expected call of UpdatePostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresDatabase(ctx, arg any) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresDatabase), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresDatabaseCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresDatabaseCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) Do(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresDatabaseCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *MockTransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresVersion mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresVersion(ctx context.Context, arg queries.UpdatePostgresVersionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresVersion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresVersion indicates an expected call of UpdatePostgresVersion.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresVersion(ctx, arg any) *MockTransactionQuerierUpdatePostgresVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresVersion), ctx, arg)
	return &MockTransactionQuerierUpdatePostgresVersionCall{Call: call}
}

// MockTransactionQuerierUpdatePostgresVersionCall wrap *gomock.Call
type MockTransactionQuerierUpdatePostgresVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdatePostgresVersionCall) Return(arg0 error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdatePostgresVersionCall) Do(f func(context.Context, queries.UpdatePostgresVersionParams) error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdatePostgresVersionCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresVersionParams) error) *MockTransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) UpdateScanBruteforceResult(ctx context.Context, arg queries.UpdateScanBruteforceResultParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScanBruteforceResult indicates an expected call of UpdateScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) UpdateScanBruteforceResult(ctx, arg any) *MockTransactionQuerierUpdateScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateScanBruteforceResult), ctx, arg)
	return &MockTransactionQuerierUpdateScanBruteforceResultCall{Call: call}
}

// MockTransactionQuerierUpdateScanBruteforceResultCall wrap *gomock.Call
type MockTransactionQuerierUpdateScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateScanBruteforceResultCall) Return(arg0 error) *MockTransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateScanBruteforceResultCall) Do(f func(context.Context, queries.UpdateScanBruteforceResultParams) error) *MockTransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.UpdateScanBruteforceResultParams) error) *MockTransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateScanStatus mocks base method.
func (m *MockTransactionQuerier) UpdateScanStatus(ctx context.Context, arg queries.UpdateScanStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScanStatus indicates an expected call of UpdateScanStatus.
func (mr *MockTransactionQuerierMockRecorder) UpdateScanStatus(ctx, arg any) *MockTransactionQuerierUpdateScanStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanStatus", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateScanStatus), ctx, arg)
	return &MockTransactionQuerierUpdateScanStatusCall{Call: call}
}

// MockTransactionQuerierUpdateScanStatusCall wrap *gomock.Call
type MockTransactionQuerierUpdateScanStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateScanStatusCall) Return(arg0 error) *MockTransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateScanStatusCall) Do(f func(context.Context, queries.UpdateScanStatusParams) error) *MockTransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateScanStatusCall) DoAndReturn(f func(context.Context, queries.UpdateScanStatusParams) error) *MockTransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockTransactionQuerier) UpdateUser(ctx context.Context, arg queries.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionQuerierMockRecorder) UpdateUser(ctx, arg any) *MockTransactionQuerierUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUser), ctx, arg)
	return &MockTransactionQuerierUpdateUserCall{Call: call}
}

// MockTransactionQuerierUpdateUserCall wrap *gomock.Call
type MockTransactionQuerierUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateUserCall) Return(arg0 error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateUserCall) Do(f func(context.Context, queries.UpdateUserParams) error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateUserCall) DoAndReturn(f func(context.Context, queries.UpdateUserParams) error) *MockTransactionQuerierUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWebauthnCredential mocks base method.
func (m *MockTransactionQuerier) UpdateWebauthnCredential(ctx context.Context, arg queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebauthnCredential", ctx, arg)
	ret0, _ := ret[0].(*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebauthnCredential indicates an expected call of UpdateWebauthnCredential.
func (mr *MockTransactionQuerierMockRecorder) UpdateWebauthnCredential(ctx, arg any) *MockTransactionQuerierUpdateWebauthnCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebauthnCredential", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateWebauthnCredential), ctx, arg)
	return &MockTransactionQuerierUpdateWebauthnCredentialCall{Call: call}
}

// MockTransactionQuerierUpdateWebauthnCredentialCall wrap *gomock.Call
type MockTransactionQuerierUpdateWebauthnCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierUpdateWebauthnCredentialCall) Return(arg0 *queries.WebauthnCredential, arg1 error) *MockTransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierUpdateWebauthnCredentialCall) Do(f func(context.Context, queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *MockTransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierUpdateWebauthnCredentialCall) DoAndReturn(f func(context.Context, queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *MockTransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTOTPSecretForUser indicates an expected call of ValidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) ValidateTOTPSecretForUser(ctx, userID any) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).ValidateTOTPSecretForUser), ctx, userID)
	return &MockTransactionQuerierValidateTOTPSecretForUserCall{Call: call}
}

// MockTransactionQuerierValidateTOTPSecretForUserCall wrap *gomock.Call
type MockTransactionQuerierValidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) Return(arg0 error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionQuerierValidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *MockTransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
