// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/tedyst/licenta/db"
	queries "github.com/tedyst/licenta/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionQuerier is a mock of TransactionQuerier interface.
type MockTransactionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionQuerierMockRecorder
}

// MockTransactionQuerierMockRecorder is the mock recorder for MockTransactionQuerier.
type MockTransactionQuerierMockRecorder struct {
	mock *MockTransactionQuerier
}

// NewMockTransactionQuerier creates a new mock instance.
func NewMockTransactionQuerier(ctrl *gomock.Controller) *MockTransactionQuerier {
	mock := &MockTransactionQuerier{ctrl: ctrl}
	mock.recorder = &MockTransactionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionQuerier) EXPECT() *MockTransactionQuerierMockRecorder {
	return m.recorder
}

// CountUsers mocks base method.
func (m *MockTransactionQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTransactionQuerierMockRecorder) CountUsers(ctx any) *TransactionQuerierCountUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).CountUsers), ctx)
	return &TransactionQuerierCountUsersCall{Call: call}
}

// TransactionQuerierCountUsersCall wrap *gomock.Call
type TransactionQuerierCountUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCountUsersCall) Return(arg0 int64, arg1 error) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCountUsersCall) Do(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCountUsersCall) DoAndReturn(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerImageForProject(ctx context.Context, arg queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerImageForProject indicates an expected call of CreateDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerImageForProject(ctx, arg any) *TransactionQuerierCreateDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerImageForProject), ctx, arg)
	return &TransactionQuerierCreateDockerImageForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerImageForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerImageForProjectCall) Return(arg0 *queries.ProjectDockerImage, arg1 error) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerImageForProjectCall) Do(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerResultsForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerResultsForProject(ctx context.Context, arg []queries.CreateDockerLayerResultsForProjectParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerResultsForProject", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerResultsForProject indicates an expected call of CreateDockerLayerResultsForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerResultsForProject(ctx, arg any) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerResultsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerResultsForProject), ctx, arg)
	return &TransactionQuerierCreateDockerLayerResultsForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerLayerResultsForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerLayerResultsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) Return(arg0 int64, arg1 error) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) Do(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) DoAndReturn(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerScanForProject(ctx context.Context, arg queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerScanForProject indicates an expected call of CreateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerScanForProject(ctx, arg any) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierCreateDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerScannedLayerForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerScannedLayerForProject(ctx context.Context, arg queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerScannedLayerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerScannedLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerScannedLayerForProject indicates an expected call of CreateDockerScannedLayerForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerScannedLayerForProject(ctx, arg any) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerScannedLayerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerScannedLayerForProject), ctx, arg)
	return &TransactionQuerierCreateDockerScannedLayerForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerScannedLayerForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerScannedLayerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) Return(arg0 *queries.ProjectDockerScannedLayer, arg1 error) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) Do(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitCommitForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitCommitForProject(ctx context.Context, arg queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitScannedCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitForProject indicates an expected call of CreateGitCommitForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitCommitForProject(ctx, arg any) *TransactionQuerierCreateGitCommitForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitCommitForProject), ctx, arg)
	return &TransactionQuerierCreateGitCommitForProjectCall{Call: call}
}

// TransactionQuerierCreateGitCommitForProjectCall wrap *gomock.Call
type TransactionQuerierCreateGitCommitForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitCommitForProjectCall) Return(arg0 *queries.ProjectGitScannedCommit, arg1 error) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitCommitForProjectCall) Do(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitCommitForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitRepositoryForProject(ctx context.Context, arg queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepositoryForProject indicates an expected call of CreateGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitRepositoryForProject(ctx, arg any) *TransactionQuerierCreateGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitRepositoryForProject), ctx, arg)
	return &TransactionQuerierCreateGitRepositoryForProjectCall{Call: call}
}

// TransactionQuerierCreateGitRepositoryForProjectCall wrap *gomock.Call
type TransactionQuerierCreateGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) Return(arg0 *queries.ProjectGitRepository, arg1 error) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) Do(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitResultForCommit mocks base method.
func (m *MockTransactionQuerier) CreateGitResultForCommit(ctx context.Context, arg []queries.CreateGitResultForCommitParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitResultForCommit", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitResultForCommit indicates an expected call of CreateGitResultForCommit.
func (mr *MockTransactionQuerierMockRecorder) CreateGitResultForCommit(ctx, arg any) *TransactionQuerierCreateGitResultForCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitResultForCommit", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitResultForCommit), ctx, arg)
	return &TransactionQuerierCreateGitResultForCommitCall{Call: call}
}

// TransactionQuerierCreateGitResultForCommitCall wrap *gomock.Call
type TransactionQuerierCreateGitResultForCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitResultForCommitCall) Return(arg0 int64, arg1 error) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitResultForCommitCall) Do(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitResultForCommitCall) DoAndReturn(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCPE(ctx context.Context, arg queries.CreateNvdCPEParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCPE indicates an expected call of CreateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCPE(ctx, arg any) *TransactionQuerierCreateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCPE), ctx, arg)
	return &TransactionQuerierCreateNvdCPECall{Call: call}
}

// TransactionQuerierCreateNvdCPECall wrap *gomock.Call
type TransactionQuerierCreateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCPECall) Return(arg0 *queries.NvdCpe, arg1 error) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCPECall) Do(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCve mocks base method.
func (m *MockTransactionQuerier) CreateNvdCve(ctx context.Context, arg queries.CreateNvdCveParams) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCve", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCve indicates an expected call of CreateNvdCve.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCve(ctx, arg any) *TransactionQuerierCreateNvdCveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCve", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCve), ctx, arg)
	return &TransactionQuerierCreateNvdCveCall{Call: call}
}

// TransactionQuerierCreateNvdCveCall wrap *gomock.Call
type TransactionQuerierCreateNvdCveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCveCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCveCall) Do(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCveCall) DoAndReturn(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCveCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCveCPE(ctx context.Context, arg queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCveCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCveCPE indicates an expected call of CreateNvdCveCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCveCPE(ctx, arg any) *TransactionQuerierCreateNvdCveCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCveCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCveCPE), ctx, arg)
	return &TransactionQuerierCreateNvdCveCPECall{Call: call}
}

// TransactionQuerierCreateNvdCveCPECall wrap *gomock.Call
type TransactionQuerierCreateNvdCveCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCveCPECall) Return(arg0 *queries.NvdCveCpe, arg1 error) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCveCPECall) Do(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCveCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) CreateResetPasswordToken(ctx context.Context, arg queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPasswordToken", ctx, arg)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPasswordToken indicates an expected call of CreateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) CreateResetPasswordToken(ctx, arg any) *TransactionQuerierCreateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateResetPasswordToken), ctx, arg)
	return &TransactionQuerierCreateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierCreateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierCreateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateResetPasswordTokenCall) Do(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateResetPasswordTokenCall) DoAndReturn(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSession mocks base method.
func (m *MockTransactionQuerier) CreateSession(ctx context.Context, arg queries.CreateSessionParams) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockTransactionQuerierMockRecorder) CreateSession(ctx, arg any) *TransactionQuerierCreateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateSession), ctx, arg)
	return &TransactionQuerierCreateSessionCall{Call: call}
}

// TransactionQuerierCreateSessionCall wrap *gomock.Call
type TransactionQuerierCreateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateSessionCall) Return(arg0 *queries.Session, arg1 error) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateSessionCall) Do(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateSessionCall) DoAndReturn(f func(context.Context, queries.CreateSessionParams) (*queries.Session, error)) *TransactionQuerierCreateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) CreateTOTPSecretForUser(ctx context.Context, arg queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTOTPSecretForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTOTPSecretForUser indicates an expected call of CreateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) CreateTOTPSecretForUser(ctx, arg any) *TransactionQuerierCreateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateTOTPSecretForUser), ctx, arg)
	return &TransactionQuerierCreateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierCreateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierCreateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Do(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUser mocks base method.
func (m *MockTransactionQuerier) CreateUser(ctx context.Context, arg queries.CreateUserParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionQuerierMockRecorder) CreateUser(ctx, arg any) *TransactionQuerierCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateUser), ctx, arg)
	return &TransactionQuerierCreateUserCall{Call: call}
}

// TransactionQuerierCreateUserCall wrap *gomock.Call
type TransactionQuerierCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateUserCall) Do(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateUserCall) DoAndReturn(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) DeleteDockerImageForProject(ctx context.Context, arg queries.DeleteDockerImageForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerImageForProject indicates an expected call of DeleteDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteDockerImageForProject(ctx, arg any) *TransactionQuerierDeleteDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteDockerImageForProject), ctx, arg)
	return &TransactionQuerierDeleteDockerImageForProjectCall{Call: call}
}

// TransactionQuerierDeleteDockerImageForProjectCall wrap *gomock.Call
type TransactionQuerierDeleteDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteDockerImageForProjectCall) Return(arg0 error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteDockerImageForProjectCall) Do(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) DeleteGitRepositoryForProject(ctx context.Context, arg queries.DeleteGitRepositoryForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitRepositoryForProject indicates an expected call of DeleteGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteGitRepositoryForProject(ctx, arg any) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteGitRepositoryForProject), ctx, arg)
	return &TransactionQuerierDeleteGitRepositoryForProjectCall{Call: call}
}

// TransactionQuerierDeleteGitRepositoryForProjectCall wrap *gomock.Call
type TransactionQuerierDeleteGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) Return(arg0 error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) Do(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSession mocks base method.
func (m *MockTransactionQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockTransactionQuerierMockRecorder) DeleteSession(ctx, id any) *TransactionQuerierDeleteSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSession), ctx, id)
	return &TransactionQuerierDeleteSessionCall{Call: call}
}

// TransactionQuerierDeleteSessionCall wrap *gomock.Call
type TransactionQuerierDeleteSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteSessionCall) Return(arg0 error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteSessionCall) Do(f func(context.Context, uuid.UUID) error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *TransactionQuerierDeleteSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSessionsByUserID mocks base method.
func (m *MockTransactionQuerier) DeleteSessionsByUserID(ctx context.Context, userID sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionsByUserID indicates an expected call of DeleteSessionsByUserID.
func (mr *MockTransactionQuerierMockRecorder) DeleteSessionsByUserID(ctx, userID any) *TransactionQuerierDeleteSessionsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionsByUserID", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteSessionsByUserID), ctx, userID)
	return &TransactionQuerierDeleteSessionsByUserIDCall{Call: call}
}

// TransactionQuerierDeleteSessionsByUserIDCall wrap *gomock.Call
type TransactionQuerierDeleteSessionsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteSessionsByUserIDCall) Return(arg0 error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteSessionsByUserIDCall) Do(f func(context.Context, sql.NullInt64) error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteSessionsByUserIDCall) DoAndReturn(f func(context.Context, sql.NullInt64) error) *TransactionQuerierDeleteSessionsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockTransactionQuerier) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteUser(ctx, id any) *TransactionQuerierDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteUser), ctx, id)
	return &TransactionQuerierDeleteUserCall{Call: call}
}

// TransactionQuerierDeleteUserCall wrap *gomock.Call
type TransactionQuerierDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteUserCall) Return(arg0 error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndTransaction mocks base method.
func (m *MockTransactionQuerier) EndTransaction(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTransactionQuerierMockRecorder) EndTransaction(ctx, err any) *TransactionQuerierEndTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).EndTransaction), ctx, err)
	return &TransactionQuerierEndTransactionCall{Call: call}
}

// TransactionQuerierEndTransactionCall wrap *gomock.Call
type TransactionQuerierEndTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierEndTransactionCall) Return(arg0 error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierEndTransactionCall) Do(f func(context.Context, error) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierEndTransactionCall) DoAndReturn(f func(context.Context, error) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswords mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswords(ctx context.Context, startID []int64) *queries.GetBruteforcePasswordsBatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswords", ctx, startID)
	ret0, _ := ret[0].(*queries.GetBruteforcePasswordsBatchResults)
	return ret0
}

// GetBruteforcePasswords indicates an expected call of GetBruteforcePasswords.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswords(ctx, startID any) *TransactionQuerierGetBruteforcePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswords), ctx, startID)
	return &TransactionQuerierGetBruteforcePasswordsCall{Call: call}
}

// TransactionQuerierGetBruteforcePasswordsCall wrap *gomock.Call
type TransactionQuerierGetBruteforcePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetBruteforcePasswordsCall) Return(arg0 *queries.GetBruteforcePasswordsBatchResults) *TransactionQuerierGetBruteforcePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetBruteforcePasswordsCall) Do(f func(context.Context, []int64) *queries.GetBruteforcePasswordsBatchResults) *TransactionQuerierGetBruteforcePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetBruteforcePasswordsCall) DoAndReturn(f func(context.Context, []int64) *queries.GetBruteforcePasswordsBatchResults) *TransactionQuerierGetBruteforcePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCPEByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCPEByProductAndVersion(ctx context.Context, arg queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPEByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPEByProductAndVersion indicates an expected call of GetCPEByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCPEByProductAndVersion(ctx, arg any) *TransactionQuerierGetCPEByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPEByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCPEByProductAndVersion), ctx, arg)
	return &TransactionQuerierGetCPEByProductAndVersionCall{Call: call}
}

// TransactionQuerierGetCPEByProductAndVersionCall wrap *gomock.Call
type TransactionQuerierGetCPEByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCPEByProductAndVersionCall) Return(arg0 *queries.NvdCpe, arg1 error) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCPEByProductAndVersionCall) Do(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCPEByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveByCveID indicates an expected call of GetCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetCveByCveID(ctx, cveID any) *TransactionQuerierGetCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveByCveID), ctx, cveID)
	return &TransactionQuerierGetCveByCveIDCall{Call: call}
}

// TransactionQuerierGetCveByCveIDCall wrap *gomock.Call
type TransactionQuerierGetCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveCpeByCveAndCpe mocks base method.
func (m *MockTransactionQuerier) GetCveCpeByCveAndCpe(ctx context.Context, arg queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveCpeByCveAndCpe", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveCpeByCveAndCpe indicates an expected call of GetCveCpeByCveAndCpe.
func (mr *MockTransactionQuerierMockRecorder) GetCveCpeByCveAndCpe(ctx, arg any) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveCpeByCveAndCpe", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveCpeByCveAndCpe), ctx, arg)
	return &TransactionQuerierGetCveCpeByCveAndCpeCall{Call: call}
}

// TransactionQuerierGetCveCpeByCveAndCpeCall wrap *gomock.Call
type TransactionQuerierGetCveCpeByCveAndCpeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) Return(arg0 *queries.NvdCveCpe, arg1 error) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) Do(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) DoAndReturn(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerImagesForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImagesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImagesForProject indicates an expected call of GetDockerImagesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerImagesForProject(ctx, projectID any) *TransactionQuerierGetDockerImagesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImagesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerImagesForProject), ctx, projectID)
	return &TransactionQuerierGetDockerImagesForProjectCall{Call: call}
}

// TransactionQuerierGetDockerImagesForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerImagesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerImagesForProjectCall) Return(arg0 []*queries.ProjectDockerImage, arg1 error) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerImagesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerImagesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerLayerScanForProject(ctx context.Context, arg queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerLayerScanForProject indicates an expected call of GetDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerLayerScanForProject(ctx, arg any) *TransactionQuerierGetDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierGetDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierGetDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) Do(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerScannedLayersForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerScannedLayersForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerScannedLayersForProject indicates an expected call of GetDockerScannedLayersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerScannedLayersForProject(ctx, projectID any) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerScannedLayersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerScannedLayersForProject), ctx, projectID)
	return &TransactionQuerierGetDockerScannedLayersForProjectCall{Call: call}
}

// TransactionQuerierGetDockerScannedLayersForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerScannedLayersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitRepositoriesForProject mocks base method.
func (m *MockTransactionQuerier) GetGitRepositoriesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoriesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoriesForProject indicates an expected call of GetGitRepositoriesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitRepositoriesForProject(ctx, projectID any) *TransactionQuerierGetGitRepositoriesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoriesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitRepositoriesForProject), ctx, projectID)
	return &TransactionQuerierGetGitRepositoriesForProjectCall{Call: call}
}

// TransactionQuerierGetGitRepositoriesForProjectCall wrap *gomock.Call
type TransactionQuerierGetGitRepositoriesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) Return(arg0 []*queries.ProjectGitRepository, arg1 error) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProject mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProject indicates an expected call of GetGitScannedCommitsForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProject(ctx, projectID any) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProject), ctx, projectID)
	return &TransactionQuerierGetGitScannedCommitsForProjectCall{Call: call}
}

// TransactionQuerierGetGitScannedCommitsForProjectCall wrap *gomock.Call
type TransactionQuerierGetGitScannedCommitsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProjectBatch mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProjectBatch(ctx context.Context, arg queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProjectBatch", ctx, arg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProjectBatch indicates an expected call of GetGitScannedCommitsForProjectBatch.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProjectBatch(ctx, arg any) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProjectBatch", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProjectBatch), ctx, arg)
	return &TransactionQuerierGetGitScannedCommitsForProjectBatchCall{Call: call}
}

// TransactionQuerierGetGitScannedCommitsForProjectBatchCall wrap *gomock.Call
type TransactionQuerierGetGitScannedCommitsForProjectBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) Do(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) DoAndReturn(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInvalidTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidTOTPSecretForUser indicates an expected call of GetInvalidTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetInvalidTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetInvalidTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetInvalidTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetInvalidTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetInvalidTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCPEsByDBType mocks base method.
func (m *MockTransactionQuerier) GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCPEsByDBType", ctx, databaseType)
	ret0, _ := ret[0].([]*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCPEsByDBType indicates an expected call of GetNvdCPEsByDBType.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCPEsByDBType(ctx, databaseType any) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCPEsByDBType", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCPEsByDBType), ctx, databaseType)
	return &TransactionQuerierGetNvdCPEsByDBTypeCall{Call: call}
}

// TransactionQuerierGetNvdCPEsByDBTypeCall wrap *gomock.Call
type TransactionQuerierGetNvdCPEsByDBTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) Return(arg0 []*queries.NvdCpe, arg1 error) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) Do(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) DoAndReturn(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetNvdCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCveByCveID indicates an expected call of GetNvdCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCveByCveID(ctx, cveID any) *TransactionQuerierGetNvdCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCveByCveID), ctx, cveID)
	return &TransactionQuerierGetNvdCveByCveIDCall{Call: call}
}

// TransactionQuerierGetNvdCveByCveIDCall wrap *gomock.Call
type TransactionQuerierGetNvdCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetNvdCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetNvdCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetNvdCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationByName mocks base method.
func (m *MockTransactionQuerier) GetOrganizationByName(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationByName(ctx, name any) *TransactionQuerierGetOrganizationByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationByName), ctx, name)
	return &TransactionQuerierGetOrganizationByNameCall{Call: call}
}

// TransactionQuerierGetOrganizationByNameCall wrap *gomock.Call
type TransactionQuerierGetOrganizationByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationByNameCall) Return(arg0 *queries.Organization, arg1 error) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationByNameCall) Do(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationByNameCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationMembers mocks base method.
func (m *MockTransactionQuerier) GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembers", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembers indicates an expected call of GetOrganizationMembers.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationMembers(ctx, organizationID any) *TransactionQuerierGetOrganizationMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationMembers), ctx, organizationID)
	return &TransactionQuerierGetOrganizationMembersCall{Call: call}
}

// TransactionQuerierGetOrganizationMembersCall wrap *gomock.Call
type TransactionQuerierGetOrganizationMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationMembersCall) Return(arg0 []*queries.OrganizationMember, arg1 error) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationMembersCall) Do(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationPermissionsForUser(ctx context.Context, arg queries.GetOrganizationPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationPermissionsForUser indicates an expected call of GetOrganizationPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationPermissionsForUser(ctx, arg any) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationPermissionsForUser), ctx, arg)
	return &TransactionQuerierGetOrganizationPermissionsForUserCall{Call: call}
}

// TransactionQuerierGetOrganizationPermissionsForUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) Return(arg0 int16, arg1 error) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) Do(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationUser(ctx context.Context, arg queries.GetOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUser indicates an expected call of GetOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationUser(ctx, arg any) *TransactionQuerierGetOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationUser), ctx, arg)
	return &TransactionQuerierGetOrganizationUserCall{Call: call}
}

// TransactionQuerierGetOrganizationUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationUserCall) Do(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsByUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsByUser(ctx context.Context, userID int64) ([]*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsByUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsByUser indicates an expected call of GetOrganizationsByUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsByUser(ctx, userID any) *TransactionQuerierGetOrganizationsByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsByUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsByUser), ctx, userID)
	return &TransactionQuerierGetOrganizationsByUserCall{Call: call}
}

// TransactionQuerierGetOrganizationsByUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationsByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationsByUserCall) Return(arg0 []*queries.Organization, arg1 error) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationsByUserCall) Do(f func(context.Context, int64) ([]*queries.Organization, error)) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationsByUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Organization, error)) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectByOrganizationAndName mocks base method.
func (m *MockTransactionQuerier) GetProjectByOrganizationAndName(ctx context.Context, arg queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOrganizationAndName", ctx, arg)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOrganizationAndName indicates an expected call of GetProjectByOrganizationAndName.
func (mr *MockTransactionQuerierMockRecorder) GetProjectByOrganizationAndName(ctx, arg any) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOrganizationAndName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectByOrganizationAndName), ctx, arg)
	return &TransactionQuerierGetProjectByOrganizationAndNameCall{Call: call}
}

// TransactionQuerierGetProjectByOrganizationAndNameCall wrap *gomock.Call
type TransactionQuerierGetProjectByOrganizationAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) Return(arg0 *queries.Project, arg1 error) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) Do(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) DoAndReturn(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMembers mocks base method.
func (m *MockTransactionQuerier) GetProjectMembers(ctx context.Context, projectID int64) ([]*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockTransactionQuerierMockRecorder) GetProjectMembers(ctx, projectID any) *TransactionQuerierGetProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectMembers), ctx, projectID)
	return &TransactionQuerierGetProjectMembersCall{Call: call}
}

// TransactionQuerierGetProjectMembersCall wrap *gomock.Call
type TransactionQuerierGetProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectMembersCall) Return(arg0 []*queries.ProjectMember, arg1 error) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectMembersCall) Do(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetProjectPermissionsForUser(ctx context.Context, arg queries.GetProjectPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPermissionsForUser indicates an expected call of GetProjectPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectPermissionsForUser(ctx, arg any) *TransactionQuerierGetProjectPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectPermissionsForUser), ctx, arg)
	return &TransactionQuerierGetProjectPermissionsForUserCall{Call: call}
}

// TransactionQuerierGetProjectPermissionsForUserCall wrap *gomock.Call
type TransactionQuerierGetProjectPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectPermissionsForUserCall) Return(arg0 int16, arg1 error) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectPermissionsForUserCall) Do(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectUser mocks base method.
func (m *MockTransactionQuerier) GetProjectUser(ctx context.Context, arg queries.GetProjectUserParams) (*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectUser", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectUser indicates an expected call of GetProjectUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectUser(ctx, arg any) *TransactionQuerierGetProjectUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectUser), ctx, arg)
	return &TransactionQuerierGetProjectUserCall{Call: call}
}

// TransactionQuerierGetProjectUserCall wrap *gomock.Call
type TransactionQuerierGetProjectUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectUserCall) Return(arg0 *queries.ProjectMember, arg1 error) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectUserCall) Do(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectUserCall) DoAndReturn(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectsByOrganization mocks base method.
func (m *MockTransactionQuerier) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOrganization", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByOrganization indicates an expected call of GetProjectsByOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetProjectsByOrganization(ctx, organizationID any) *TransactionQuerierGetProjectsByOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectsByOrganization), ctx, organizationID)
	return &TransactionQuerierGetProjectsByOrganizationCall{Call: call}
}

// TransactionQuerierGetProjectsByOrganizationCall wrap *gomock.Call
type TransactionQuerierGetProjectsByOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectsByOrganizationCall) Return(arg0 []*queries.Project, arg1 error) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectsByOrganizationCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectsByOrganizationCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordToken indicates an expected call of GetResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) GetResetPasswordToken(ctx, id any) *TransactionQuerierGetResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetResetPasswordToken), ctx, id)
	return &TransactionQuerierGetResetPasswordTokenCall{Call: call}
}

// TransactionQuerierGetResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierGetResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSession mocks base method.
func (m *MockTransactionQuerier) GetSession(ctx context.Context, id uuid.UUID) (*queries.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(*queries.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockTransactionQuerierMockRecorder) GetSession(ctx, id any) *TransactionQuerierGetSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockTransactionQuerier)(nil).GetSession), ctx, id)
	return &TransactionQuerierGetSessionCall{Call: call}
}

// TransactionQuerierGetSessionCall wrap *gomock.Call
type TransactionQuerierGetSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetSessionCall) Return(arg0 *queries.Session, arg1 error) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetSessionCall) Do(f func(context.Context, uuid.UUID) (*queries.Session, error)) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetSessionCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.Session, error)) *TransactionQuerierGetSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPSecretForUser indicates an expected call of GetTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockTransactionQuerier) GetUser(ctx context.Context, id int64) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionQuerierMockRecorder) GetUser(ctx, id any) *TransactionQuerierGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUser), ctx, id)
	return &TransactionQuerierGetUserCall{Call: call}
}

// TransactionQuerierGetUserCall wrap *gomock.Call
type TransactionQuerierGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserCall) Do(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserCall) DoAndReturn(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByUsernameOrEmail(ctx context.Context, username string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", ctx, username)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByUsernameOrEmail(ctx, username any) *TransactionQuerierGetUserByUsernameOrEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByUsernameOrEmail), ctx, username)
	return &TransactionQuerierGetUserByUsernameOrEmailCall{Call: call}
}

// TransactionQuerierGetUserByUsernameOrEmailCall wrap *gomock.Call
type TransactionQuerierGetUserByUsernameOrEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Do(f func(context.Context, string) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) DoAndReturn(f func(context.Context, string) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertBruteforcePasswords mocks base method.
func (m *MockTransactionQuerier) InsertBruteforcePasswords(ctx context.Context, passwords []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBruteforcePasswords", ctx, passwords)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBruteforcePasswords indicates an expected call of InsertBruteforcePasswords.
func (mr *MockTransactionQuerierMockRecorder) InsertBruteforcePasswords(ctx, passwords any) *TransactionQuerierInsertBruteforcePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBruteforcePasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).InsertBruteforcePasswords), ctx, passwords)
	return &TransactionQuerierInsertBruteforcePasswordsCall{Call: call}
}

// TransactionQuerierInsertBruteforcePasswordsCall wrap *gomock.Call
type TransactionQuerierInsertBruteforcePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInsertBruteforcePasswordsCall) Return(arg0 error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInsertBruteforcePasswordsCall) Do(f func(context.Context, []string) error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInsertBruteforcePasswordsCall) DoAndReturn(f func(context.Context, []string) error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateResetPasswordToken indicates an expected call of InvalidateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) InvalidateResetPasswordToken(ctx, id any) *TransactionQuerierInvalidateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateResetPasswordToken), ctx, id)
	return &TransactionQuerierInvalidateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierInvalidateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierInvalidateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Return(arg0 error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateTOTPSecretForUser indicates an expected call of InvalidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) InvalidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierInvalidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierInvalidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierInvalidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockTransactionQuerier) ListUsers(ctx context.Context, arg queries.ListUsersParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransactionQuerierMockRecorder) ListUsers(ctx, arg any) *TransactionQuerierListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsers), ctx, arg)
	return &TransactionQuerierListUsersCall{Call: call}
}

// TransactionQuerierListUsersCall wrap *gomock.Call
type TransactionQuerierListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersCall) Do(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersCall) DoAndReturn(f func(context.Context, queries.ListUsersParams) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersPaginated mocks base method.
func (m *MockTransactionQuerier) ListUsersPaginated(ctx context.Context, arg queries.ListUsersPaginatedParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersPaginated indicates an expected call of ListUsersPaginated.
func (mr *MockTransactionQuerierMockRecorder) ListUsersPaginated(ctx, arg any) *TransactionQuerierListUsersPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsersPaginated), ctx, arg)
	return &TransactionQuerierListUsersPaginatedCall{Call: call}
}

// TransactionQuerierListUsersPaginatedCall wrap *gomock.Call
type TransactionQuerierListUsersPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersPaginatedCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersPaginatedCall) Do(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersPaginatedCall) DoAndReturn(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTransaction mocks base method.
func (m *MockTransactionQuerier) StartTransaction(ctx context.Context) (db.TransactionQuerier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.TransactionQuerier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionQuerierMockRecorder) StartTransaction(ctx any) *TransactionQuerierStartTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).StartTransaction), ctx)
	return &TransactionQuerierStartTransactionCall{Call: call}
}

// TransactionQuerierStartTransactionCall wrap *gomock.Call
type TransactionQuerierStartTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierStartTransactionCall) Return(arg0 db.TransactionQuerier, arg1 error) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierStartTransactionCall) Do(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierStartTransactionCall) DoAndReturn(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) UpdateDockerLayerScanForProject(ctx context.Context, arg queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDockerLayerScanForProject indicates an expected call of UpdateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) UpdateDockerLayerScanForProject(ctx, arg any) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierUpdateDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierUpdateDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierUpdateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNvdCPE mocks base method.
func (m *MockTransactionQuerier) UpdateNvdCPE(ctx context.Context, arg queries.UpdateNvdCPEParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNvdCPE indicates an expected call of UpdateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) UpdateNvdCPE(ctx, arg any) *TransactionQuerierUpdateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateNvdCPE), ctx, arg)
	return &TransactionQuerierUpdateNvdCPECall{Call: call}
}

// TransactionQuerierUpdateNvdCPECall wrap *gomock.Call
type TransactionQuerierUpdateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateNvdCPECall) Return(arg0 error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateNvdCPECall) Do(f func(context.Context, queries.UpdateNvdCPEParams) error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateNvdCPECall) DoAndReturn(f func(context.Context, queries.UpdateNvdCPEParams) error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSession mocks base method.
func (m *MockTransactionQuerier) UpdateSession(ctx context.Context, arg queries.UpdateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockTransactionQuerierMockRecorder) UpdateSession(ctx, arg any) *TransactionQuerierUpdateSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateSession), ctx, arg)
	return &TransactionQuerierUpdateSessionCall{Call: call}
}

// TransactionQuerierUpdateSessionCall wrap *gomock.Call
type TransactionQuerierUpdateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateSessionCall) Return(arg0 error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateSessionCall) Do(f func(context.Context, queries.UpdateSessionParams) error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateSessionCall) DoAndReturn(f func(context.Context, queries.UpdateSessionParams) error) *TransactionQuerierUpdateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockTransactionQuerier) UpdateUser(ctx context.Context, arg queries.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionQuerierMockRecorder) UpdateUser(ctx, arg any) *TransactionQuerierUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUser), ctx, arg)
	return &TransactionQuerierUpdateUserCall{Call: call}
}

// TransactionQuerierUpdateUserCall wrap *gomock.Call
type TransactionQuerierUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateUserCall) Return(arg0 error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateUserCall) Do(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateUserCall) DoAndReturn(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockTransactionQuerier) UpdateUserPassword(ctx context.Context, arg queries.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockTransactionQuerierMockRecorder) UpdateUserPassword(ctx, arg any) *TransactionQuerierUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUserPassword), ctx, arg)
	return &TransactionQuerierUpdateUserPasswordCall{Call: call}
}

// TransactionQuerierUpdateUserPasswordCall wrap *gomock.Call
type TransactionQuerierUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateUserPasswordCall) Return(arg0 error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateUserPasswordCall) Do(f func(context.Context, queries.UpdateUserPasswordParams) error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateUserPasswordCall) DoAndReturn(f func(context.Context, queries.UpdateUserPasswordParams) error) *TransactionQuerierUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTOTPSecretForUser indicates an expected call of ValidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) ValidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierValidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).ValidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierValidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierValidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierValidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierValidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
