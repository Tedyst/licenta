// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -package mock -typed -destination mock/mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/tedyst/licenta/db"
	queries "github.com/tedyst/licenta/db/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionQuerier is a mock of TransactionQuerier interface.
type MockTransactionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionQuerierMockRecorder
}

// MockTransactionQuerierMockRecorder is the mock recorder for MockTransactionQuerier.
type MockTransactionQuerierMockRecorder struct {
	mock *MockTransactionQuerier
}

// NewMockTransactionQuerier creates a new mock instance.
func NewMockTransactionQuerier(ctrl *gomock.Controller) *MockTransactionQuerier {
	mock := &MockTransactionQuerier{ctrl: ctrl}
	mock.recorder = &MockTransactionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionQuerier) EXPECT() *MockTransactionQuerierMockRecorder {
	return m.recorder
}

// AddUserToOrganization mocks base method.
func (m *MockTransactionQuerier) AddUserToOrganization(ctx context.Context, arg queries.AddUserToOrganizationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToOrganization", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToOrganization indicates an expected call of AddUserToOrganization.
func (mr *MockTransactionQuerierMockRecorder) AddUserToOrganization(ctx, arg any) *TransactionQuerierAddUserToOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).AddUserToOrganization), ctx, arg)
	return &TransactionQuerierAddUserToOrganizationCall{Call: call}
}

// TransactionQuerierAddUserToOrganizationCall wrap *gomock.Call
type TransactionQuerierAddUserToOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierAddUserToOrganizationCall) Return(arg0 error) *TransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierAddUserToOrganizationCall) Do(f func(context.Context, queries.AddUserToOrganizationParams) error) *TransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierAddUserToOrganizationCall) DoAndReturn(f func(context.Context, queries.AddUserToOrganizationParams) error) *TransactionQuerierAddUserToOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BindScanToWorker mocks base method.
func (m *MockTransactionQuerier) BindScanToWorker(ctx context.Context, arg queries.BindScanToWorkerParams) (*queries.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindScanToWorker", ctx, arg)
	ret0, _ := ret[0].(*queries.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindScanToWorker indicates an expected call of BindScanToWorker.
func (mr *MockTransactionQuerierMockRecorder) BindScanToWorker(ctx, arg any) *TransactionQuerierBindScanToWorkerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindScanToWorker", reflect.TypeOf((*MockTransactionQuerier)(nil).BindScanToWorker), ctx, arg)
	return &TransactionQuerierBindScanToWorkerCall{Call: call}
}

// TransactionQuerierBindScanToWorkerCall wrap *gomock.Call
type TransactionQuerierBindScanToWorkerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierBindScanToWorkerCall) Return(arg0 *queries.Scan, arg1 error) *TransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierBindScanToWorkerCall) Do(f func(context.Context, queries.BindScanToWorkerParams) (*queries.Scan, error)) *TransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierBindScanToWorkerCall) DoAndReturn(f func(context.Context, queries.BindScanToWorkerParams) (*queries.Scan, error)) *TransactionQuerierBindScanToWorkerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountUsers mocks base method.
func (m *MockTransactionQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTransactionQuerierMockRecorder) CountUsers(ctx any) *TransactionQuerierCountUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).CountUsers), ctx)
	return &TransactionQuerierCountUsersCall{Call: call}
}

// TransactionQuerierCountUsersCall wrap *gomock.Call
type TransactionQuerierCountUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCountUsersCall) Return(arg0 int64, arg1 error) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCountUsersCall) Do(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCountUsersCall) DoAndReturn(f func(context.Context) (int64, error)) *TransactionQuerierCountUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBruteforcedPassword mocks base method.
func (m *MockTransactionQuerier) CreateBruteforcedPassword(ctx context.Context, arg queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBruteforcedPassword", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBruteforcedPassword indicates an expected call of CreateBruteforcedPassword.
func (mr *MockTransactionQuerierMockRecorder) CreateBruteforcedPassword(ctx, arg any) *TransactionQuerierCreateBruteforcedPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBruteforcedPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateBruteforcedPassword), ctx, arg)
	return &TransactionQuerierCreateBruteforcedPasswordCall{Call: call}
}

// TransactionQuerierCreateBruteforcedPasswordCall wrap *gomock.Call
type TransactionQuerierCreateBruteforcedPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateBruteforcedPasswordCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *TransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateBruteforcedPasswordCall) Do(f func(context.Context, queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateBruteforcedPasswordCall) DoAndReturn(f func(context.Context, queries.CreateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierCreateBruteforcedPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerImageForProject(ctx context.Context, arg queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerImageForProject indicates an expected call of CreateDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerImageForProject(ctx, arg any) *TransactionQuerierCreateDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerImageForProject), ctx, arg)
	return &TransactionQuerierCreateDockerImageForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerImageForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerImageForProjectCall) Return(arg0 *queries.ProjectDockerImage, arg1 error) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerImageForProjectCall) Do(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerImageForProjectParams) (*queries.ProjectDockerImage, error)) *TransactionQuerierCreateDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerResultsForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerResultsForProject(ctx context.Context, arg []queries.CreateDockerLayerResultsForProjectParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerResultsForProject", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerResultsForProject indicates an expected call of CreateDockerLayerResultsForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerResultsForProject(ctx, arg any) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerResultsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerResultsForProject), ctx, arg)
	return &TransactionQuerierCreateDockerLayerResultsForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerLayerResultsForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerLayerResultsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) Return(arg0 int64, arg1 error) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) Do(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerLayerResultsForProjectCall) DoAndReturn(f func(context.Context, []queries.CreateDockerLayerResultsForProjectParams) (int64, error)) *TransactionQuerierCreateDockerLayerResultsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerLayerScanForProject(ctx context.Context, arg queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerLayerScanForProject indicates an expected call of CreateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerLayerScanForProject(ctx, arg any) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierCreateDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierCreateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDockerScannedLayerForProject mocks base method.
func (m *MockTransactionQuerier) CreateDockerScannedLayerForProject(ctx context.Context, arg queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerScannedLayerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerScannedLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerScannedLayerForProject indicates an expected call of CreateDockerScannedLayerForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateDockerScannedLayerForProject(ctx, arg any) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerScannedLayerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateDockerScannedLayerForProject), ctx, arg)
	return &TransactionQuerierCreateDockerScannedLayerForProjectCall{Call: call}
}

// TransactionQuerierCreateDockerScannedLayerForProjectCall wrap *gomock.Call
type TransactionQuerierCreateDockerScannedLayerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) Return(arg0 *queries.ProjectDockerScannedLayer, arg1 error) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) Do(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateDockerScannedLayerForProjectCall) DoAndReturn(f func(context.Context, queries.CreateDockerScannedLayerForProjectParams) (*queries.ProjectDockerScannedLayer, error)) *TransactionQuerierCreateDockerScannedLayerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitCommitForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitCommitForProject(ctx context.Context, arg queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitScannedCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitForProject indicates an expected call of CreateGitCommitForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitCommitForProject(ctx, arg any) *TransactionQuerierCreateGitCommitForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitCommitForProject), ctx, arg)
	return &TransactionQuerierCreateGitCommitForProjectCall{Call: call}
}

// TransactionQuerierCreateGitCommitForProjectCall wrap *gomock.Call
type TransactionQuerierCreateGitCommitForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitCommitForProjectCall) Return(arg0 *queries.ProjectGitScannedCommit, arg1 error) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitCommitForProjectCall) Do(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitCommitForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitCommitForProjectParams) (*queries.ProjectGitScannedCommit, error)) *TransactionQuerierCreateGitCommitForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) CreateGitRepositoryForProject(ctx context.Context, arg queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepositoryForProject indicates an expected call of CreateGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) CreateGitRepositoryForProject(ctx, arg any) *TransactionQuerierCreateGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitRepositoryForProject), ctx, arg)
	return &TransactionQuerierCreateGitRepositoryForProjectCall{Call: call}
}

// TransactionQuerierCreateGitRepositoryForProjectCall wrap *gomock.Call
type TransactionQuerierCreateGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) Return(arg0 *queries.ProjectGitRepository, arg1 error) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) Do(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.CreateGitRepositoryForProjectParams) (*queries.ProjectGitRepository, error)) *TransactionQuerierCreateGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGitResultForCommit mocks base method.
func (m *MockTransactionQuerier) CreateGitResultForCommit(ctx context.Context, arg []queries.CreateGitResultForCommitParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitResultForCommit", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitResultForCommit indicates an expected call of CreateGitResultForCommit.
func (mr *MockTransactionQuerierMockRecorder) CreateGitResultForCommit(ctx, arg any) *TransactionQuerierCreateGitResultForCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitResultForCommit", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateGitResultForCommit), ctx, arg)
	return &TransactionQuerierCreateGitResultForCommitCall{Call: call}
}

// TransactionQuerierCreateGitResultForCommitCall wrap *gomock.Call
type TransactionQuerierCreateGitResultForCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateGitResultForCommitCall) Return(arg0 int64, arg1 error) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateGitResultForCommitCall) Do(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateGitResultForCommitCall) DoAndReturn(f func(context.Context, []queries.CreateGitResultForCommitParams) (int64, error)) *TransactionQuerierCreateGitResultForCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateMysqlScan mocks base method.
func (m *MockTransactionQuerier) CreateMysqlScan(ctx context.Context, arg queries.CreateMysqlScanParams) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMysqlScan", ctx, arg)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMysqlScan indicates an expected call of CreateMysqlScan.
func (mr *MockTransactionQuerierMockRecorder) CreateMysqlScan(ctx, arg any) *TransactionQuerierCreateMysqlScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMysqlScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateMysqlScan), ctx, arg)
	return &TransactionQuerierCreateMysqlScanCall{Call: call}
}

// TransactionQuerierCreateMysqlScanCall wrap *gomock.Call
type TransactionQuerierCreateMysqlScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateMysqlScanCall) Return(arg0 *queries.MysqlScan, arg1 error) *TransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateMysqlScanCall) Do(f func(context.Context, queries.CreateMysqlScanParams) (*queries.MysqlScan, error)) *TransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateMysqlScanCall) DoAndReturn(f func(context.Context, queries.CreateMysqlScanParams) (*queries.MysqlScan, error)) *TransactionQuerierCreateMysqlScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCPE(ctx context.Context, arg queries.CreateNvdCPEParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCPE indicates an expected call of CreateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCPE(ctx, arg any) *TransactionQuerierCreateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCPE), ctx, arg)
	return &TransactionQuerierCreateNvdCPECall{Call: call}
}

// TransactionQuerierCreateNvdCPECall wrap *gomock.Call
type TransactionQuerierCreateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCPECall) Return(arg0 *queries.NvdCpe, arg1 error) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCPECall) Do(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCPEParams) (*queries.NvdCpe, error)) *TransactionQuerierCreateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCve mocks base method.
func (m *MockTransactionQuerier) CreateNvdCve(ctx context.Context, arg queries.CreateNvdCveParams) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCve", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCve indicates an expected call of CreateNvdCve.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCve(ctx, arg any) *TransactionQuerierCreateNvdCveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCve", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCve), ctx, arg)
	return &TransactionQuerierCreateNvdCveCall{Call: call}
}

// TransactionQuerierCreateNvdCveCall wrap *gomock.Call
type TransactionQuerierCreateNvdCveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCveCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCveCall) Do(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCveCall) DoAndReturn(f func(context.Context, queries.CreateNvdCveParams) (*queries.NvdCfe, error)) *TransactionQuerierCreateNvdCveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNvdCveCPE mocks base method.
func (m *MockTransactionQuerier) CreateNvdCveCPE(ctx context.Context, arg queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNvdCveCPE", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNvdCveCPE indicates an expected call of CreateNvdCveCPE.
func (mr *MockTransactionQuerierMockRecorder) CreateNvdCveCPE(ctx, arg any) *TransactionQuerierCreateNvdCveCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNvdCveCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateNvdCveCPE), ctx, arg)
	return &TransactionQuerierCreateNvdCveCPECall{Call: call}
}

// TransactionQuerierCreateNvdCveCPECall wrap *gomock.Call
type TransactionQuerierCreateNvdCveCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateNvdCveCPECall) Return(arg0 *queries.NvdCveCpe, arg1 error) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateNvdCveCPECall) Do(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateNvdCveCPECall) DoAndReturn(f func(context.Context, queries.CreateNvdCveCPEParams) (*queries.NvdCveCpe, error)) *TransactionQuerierCreateNvdCveCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrganization mocks base method.
func (m *MockTransactionQuerier) CreateOrganization(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockTransactionQuerierMockRecorder) CreateOrganization(ctx, name any) *TransactionQuerierCreateOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateOrganization), ctx, name)
	return &TransactionQuerierCreateOrganizationCall{Call: call}
}

// TransactionQuerierCreateOrganizationCall wrap *gomock.Call
type TransactionQuerierCreateOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateOrganizationCall) Return(arg0 *queries.Organization, arg1 error) *TransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateOrganizationCall) Do(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateOrganizationCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierCreateOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePostgresScan mocks base method.
func (m *MockTransactionQuerier) CreatePostgresScan(ctx context.Context, arg queries.CreatePostgresScanParams) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostgresScan", ctx, arg)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostgresScan indicates an expected call of CreatePostgresScan.
func (mr *MockTransactionQuerierMockRecorder) CreatePostgresScan(ctx, arg any) *TransactionQuerierCreatePostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreatePostgresScan), ctx, arg)
	return &TransactionQuerierCreatePostgresScanCall{Call: call}
}

// TransactionQuerierCreatePostgresScanCall wrap *gomock.Call
type TransactionQuerierCreatePostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreatePostgresScanCall) Return(arg0 *queries.PostgresScan, arg1 error) *TransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreatePostgresScanCall) Do(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *TransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreatePostgresScanCall) DoAndReturn(f func(context.Context, queries.CreatePostgresScanParams) (*queries.PostgresScan, error)) *TransactionQuerierCreatePostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRememberMeToken mocks base method.
func (m *MockTransactionQuerier) CreateRememberMeToken(ctx context.Context, arg queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRememberMeToken", ctx, arg)
	ret0, _ := ret[0].(*queries.RememberMeToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRememberMeToken indicates an expected call of CreateRememberMeToken.
func (mr *MockTransactionQuerierMockRecorder) CreateRememberMeToken(ctx, arg any) *TransactionQuerierCreateRememberMeTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRememberMeToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateRememberMeToken), ctx, arg)
	return &TransactionQuerierCreateRememberMeTokenCall{Call: call}
}

// TransactionQuerierCreateRememberMeTokenCall wrap *gomock.Call
type TransactionQuerierCreateRememberMeTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateRememberMeTokenCall) Return(arg0 *queries.RememberMeToken, arg1 error) *TransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateRememberMeTokenCall) Do(f func(context.Context, queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error)) *TransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateRememberMeTokenCall) DoAndReturn(f func(context.Context, queries.CreateRememberMeTokenParams) (*queries.RememberMeToken, error)) *TransactionQuerierCreateRememberMeTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) CreateResetPasswordToken(ctx context.Context, arg queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPasswordToken", ctx, arg)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPasswordToken indicates an expected call of CreateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) CreateResetPasswordToken(ctx, arg any) *TransactionQuerierCreateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateResetPasswordToken), ctx, arg)
	return &TransactionQuerierCreateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierCreateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierCreateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateResetPasswordTokenCall) Do(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateResetPasswordTokenCall) DoAndReturn(f func(context.Context, queries.CreateResetPasswordTokenParams) (*queries.ResetPasswordToken, error)) *TransactionQuerierCreateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScan mocks base method.
func (m *MockTransactionQuerier) CreateScan(ctx context.Context, arg queries.CreateScanParams) (*queries.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScan", ctx, arg)
	ret0, _ := ret[0].(*queries.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScan indicates an expected call of CreateScan.
func (mr *MockTransactionQuerierMockRecorder) CreateScan(ctx, arg any) *TransactionQuerierCreateScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScan", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScan), ctx, arg)
	return &TransactionQuerierCreateScanCall{Call: call}
}

// TransactionQuerierCreateScanCall wrap *gomock.Call
type TransactionQuerierCreateScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateScanCall) Return(arg0 *queries.Scan, arg1 error) *TransactionQuerierCreateScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateScanCall) Do(f func(context.Context, queries.CreateScanParams) (*queries.Scan, error)) *TransactionQuerierCreateScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateScanCall) DoAndReturn(f func(context.Context, queries.CreateScanParams) (*queries.Scan, error)) *TransactionQuerierCreateScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) CreateScanBruteforceResult(ctx context.Context, arg queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanBruteforceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanBruteforceResult indicates an expected call of CreateScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) CreateScanBruteforceResult(ctx, arg any) *TransactionQuerierCreateScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanBruteforceResult), ctx, arg)
	return &TransactionQuerierCreateScanBruteforceResultCall{Call: call}
}

// TransactionQuerierCreateScanBruteforceResultCall wrap *gomock.Call
type TransactionQuerierCreateScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateScanBruteforceResultCall) Return(arg0 *queries.ScanBruteforceResult, arg1 error) *TransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateScanBruteforceResultCall) Do(f func(context.Context, queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error)) *TransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.CreateScanBruteforceResultParams) (*queries.ScanBruteforceResult, error)) *TransactionQuerierCreateScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanGroup mocks base method.
func (m *MockTransactionQuerier) CreateScanGroup(ctx context.Context, arg queries.CreateScanGroupParams) (*queries.ScanGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanGroup", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanGroup indicates an expected call of CreateScanGroup.
func (mr *MockTransactionQuerierMockRecorder) CreateScanGroup(ctx, arg any) *TransactionQuerierCreateScanGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanGroup", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanGroup), ctx, arg)
	return &TransactionQuerierCreateScanGroupCall{Call: call}
}

// TransactionQuerierCreateScanGroupCall wrap *gomock.Call
type TransactionQuerierCreateScanGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateScanGroupCall) Return(arg0 *queries.ScanGroup, arg1 error) *TransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateScanGroupCall) Do(f func(context.Context, queries.CreateScanGroupParams) (*queries.ScanGroup, error)) *TransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateScanGroupCall) DoAndReturn(f func(context.Context, queries.CreateScanGroupParams) (*queries.ScanGroup, error)) *TransactionQuerierCreateScanGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateScanResult mocks base method.
func (m *MockTransactionQuerier) CreateScanResult(ctx context.Context, arg queries.CreateScanResultParams) (*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanResult", ctx, arg)
	ret0, _ := ret[0].(*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanResult indicates an expected call of CreateScanResult.
func (mr *MockTransactionQuerierMockRecorder) CreateScanResult(ctx, arg any) *TransactionQuerierCreateScanResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanResult", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateScanResult), ctx, arg)
	return &TransactionQuerierCreateScanResultCall{Call: call}
}

// TransactionQuerierCreateScanResultCall wrap *gomock.Call
type TransactionQuerierCreateScanResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateScanResultCall) Return(arg0 *queries.ScanResult, arg1 error) *TransactionQuerierCreateScanResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateScanResultCall) Do(f func(context.Context, queries.CreateScanResultParams) (*queries.ScanResult, error)) *TransactionQuerierCreateScanResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateScanResultCall) DoAndReturn(f func(context.Context, queries.CreateScanResultParams) (*queries.ScanResult, error)) *TransactionQuerierCreateScanResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) CreateTOTPSecretForUser(ctx context.Context, arg queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTOTPSecretForUser", ctx, arg)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTOTPSecretForUser indicates an expected call of CreateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) CreateTOTPSecretForUser(ctx, arg any) *TransactionQuerierCreateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateTOTPSecretForUser), ctx, arg)
	return &TransactionQuerierCreateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierCreateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierCreateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateTOTPSecretForUserCall) Do(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, queries.CreateTOTPSecretForUserParams) (*queries.TotpSecretToken, error)) *TransactionQuerierCreateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateUser mocks base method.
func (m *MockTransactionQuerier) CreateUser(ctx context.Context, arg queries.CreateUserParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransactionQuerierMockRecorder) CreateUser(ctx, arg any) *TransactionQuerierCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateUser), ctx, arg)
	return &TransactionQuerierCreateUserCall{Call: call}
}

// TransactionQuerierCreateUserCall wrap *gomock.Call
type TransactionQuerierCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateUserCall) Do(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateUserCall) DoAndReturn(f func(context.Context, queries.CreateUserParams) (*queries.User, error)) *TransactionQuerierCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateWebauthnCredential mocks base method.
func (m *MockTransactionQuerier) CreateWebauthnCredential(ctx context.Context, arg queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebauthnCredential", ctx, arg)
	ret0, _ := ret[0].(*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebauthnCredential indicates an expected call of CreateWebauthnCredential.
func (mr *MockTransactionQuerierMockRecorder) CreateWebauthnCredential(ctx, arg any) *TransactionQuerierCreateWebauthnCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebauthnCredential", reflect.TypeOf((*MockTransactionQuerier)(nil).CreateWebauthnCredential), ctx, arg)
	return &TransactionQuerierCreateWebauthnCredentialCall{Call: call}
}

// TransactionQuerierCreateWebauthnCredentialCall wrap *gomock.Call
type TransactionQuerierCreateWebauthnCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierCreateWebauthnCredentialCall) Return(arg0 *queries.WebauthnCredential, arg1 error) *TransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierCreateWebauthnCredentialCall) Do(f func(context.Context, queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *TransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierCreateWebauthnCredentialCall) DoAndReturn(f func(context.Context, queries.CreateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *TransactionQuerierCreateWebauthnCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDockerImageForProject mocks base method.
func (m *MockTransactionQuerier) DeleteDockerImageForProject(ctx context.Context, arg queries.DeleteDockerImageForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDockerImageForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerImageForProject indicates an expected call of DeleteDockerImageForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteDockerImageForProject(ctx, arg any) *TransactionQuerierDeleteDockerImageForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImageForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteDockerImageForProject), ctx, arg)
	return &TransactionQuerierDeleteDockerImageForProjectCall{Call: call}
}

// TransactionQuerierDeleteDockerImageForProjectCall wrap *gomock.Call
type TransactionQuerierDeleteDockerImageForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteDockerImageForProjectCall) Return(arg0 error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteDockerImageForProjectCall) Do(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteDockerImageForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteDockerImageForProjectParams) error) *TransactionQuerierDeleteDockerImageForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGitRepositoryForProject mocks base method.
func (m *MockTransactionQuerier) DeleteGitRepositoryForProject(ctx context.Context, arg queries.DeleteGitRepositoryForProjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitRepositoryForProject", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitRepositoryForProject indicates an expected call of DeleteGitRepositoryForProject.
func (mr *MockTransactionQuerierMockRecorder) DeleteGitRepositoryForProject(ctx, arg any) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitRepositoryForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteGitRepositoryForProject), ctx, arg)
	return &TransactionQuerierDeleteGitRepositoryForProjectCall{Call: call}
}

// TransactionQuerierDeleteGitRepositoryForProjectCall wrap *gomock.Call
type TransactionQuerierDeleteGitRepositoryForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) Return(arg0 error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) Do(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteGitRepositoryForProjectCall) DoAndReturn(f func(context.Context, queries.DeleteGitRepositoryForProjectParams) error) *TransactionQuerierDeleteGitRepositoryForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNvdCveByName mocks base method.
func (m *MockTransactionQuerier) DeleteNvdCveByName(ctx context.Context, cveID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNvdCveByName", ctx, cveID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNvdCveByName indicates an expected call of DeleteNvdCveByName.
func (mr *MockTransactionQuerierMockRecorder) DeleteNvdCveByName(ctx, cveID any) *TransactionQuerierDeleteNvdCveByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNvdCveByName", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteNvdCveByName), ctx, cveID)
	return &TransactionQuerierDeleteNvdCveByNameCall{Call: call}
}

// TransactionQuerierDeleteNvdCveByNameCall wrap *gomock.Call
type TransactionQuerierDeleteNvdCveByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteNvdCveByNameCall) Return(arg0 error) *TransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteNvdCveByNameCall) Do(f func(context.Context, string) error) *TransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteNvdCveByNameCall) DoAndReturn(f func(context.Context, string) error) *TransactionQuerierDeleteNvdCveByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOrganization mocks base method.
func (m *MockTransactionQuerier) DeleteOrganization(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockTransactionQuerierMockRecorder) DeleteOrganization(ctx, id any) *TransactionQuerierDeleteOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteOrganization), ctx, id)
	return &TransactionQuerierDeleteOrganizationCall{Call: call}
}

// TransactionQuerierDeleteOrganizationCall wrap *gomock.Call
type TransactionQuerierDeleteOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteOrganizationCall) Return(arg0 error) *TransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteOrganizationCall) Do(f func(context.Context, int64) error) *TransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteOrganizationCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierDeleteOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRememberMeTokenByUserAndToken mocks base method.
func (m *MockTransactionQuerier) DeleteRememberMeTokenByUserAndToken(ctx context.Context, arg queries.DeleteRememberMeTokenByUserAndTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRememberMeTokenByUserAndToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRememberMeTokenByUserAndToken indicates an expected call of DeleteRememberMeTokenByUserAndToken.
func (mr *MockTransactionQuerierMockRecorder) DeleteRememberMeTokenByUserAndToken(ctx, arg any) *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRememberMeTokenByUserAndToken", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteRememberMeTokenByUserAndToken), ctx, arg)
	return &TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall{Call: call}
}

// TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall wrap *gomock.Call
type TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) Return(arg0 error) *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) Do(f func(context.Context, queries.DeleteRememberMeTokenByUserAndTokenParams) error) *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall) DoAndReturn(f func(context.Context, queries.DeleteRememberMeTokenByUserAndTokenParams) error) *TransactionQuerierDeleteRememberMeTokenByUserAndTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRememberMeTokensForUser mocks base method.
func (m *MockTransactionQuerier) DeleteRememberMeTokensForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRememberMeTokensForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRememberMeTokensForUser indicates an expected call of DeleteRememberMeTokensForUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteRememberMeTokensForUser(ctx, userID any) *TransactionQuerierDeleteRememberMeTokensForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRememberMeTokensForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteRememberMeTokensForUser), ctx, userID)
	return &TransactionQuerierDeleteRememberMeTokensForUserCall{Call: call}
}

// TransactionQuerierDeleteRememberMeTokensForUserCall wrap *gomock.Call
type TransactionQuerierDeleteRememberMeTokensForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteRememberMeTokensForUserCall) Return(arg0 error) *TransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteRememberMeTokensForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteRememberMeTokensForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierDeleteRememberMeTokensForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockTransactionQuerier) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransactionQuerierMockRecorder) DeleteUser(ctx, id any) *TransactionQuerierDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransactionQuerier)(nil).DeleteUser), ctx, id)
	return &TransactionQuerierDeleteUserCall{Call: call}
}

// TransactionQuerierDeleteUserCall wrap *gomock.Call
type TransactionQuerierDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierDeleteUserCall) Return(arg0 error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierDeleteUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierDeleteUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EndTransaction mocks base method.
func (m *MockTransactionQuerier) EndTransaction(ctx context.Context, rollback bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTransaction", ctx, rollback)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockTransactionQuerierMockRecorder) EndTransaction(ctx, rollback any) *TransactionQuerierEndTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).EndTransaction), ctx, rollback)
	return &TransactionQuerierEndTransactionCall{Call: call}
}

// TransactionQuerierEndTransactionCall wrap *gomock.Call
type TransactionQuerierEndTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierEndTransactionCall) Return(arg0 error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierEndTransactionCall) Do(f func(context.Context, bool) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierEndTransactionCall) DoAndReturn(f func(context.Context, bool) error) *TransactionQuerierEndTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllOrganizationProjectsForUser mocks base method.
func (m *MockTransactionQuerier) GetAllOrganizationProjectsForUser(ctx context.Context, userID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrganizationProjectsForUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrganizationProjectsForUser indicates an expected call of GetAllOrganizationProjectsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetAllOrganizationProjectsForUser(ctx, userID any) *TransactionQuerierGetAllOrganizationProjectsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrganizationProjectsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetAllOrganizationProjectsForUser), ctx, userID)
	return &TransactionQuerierGetAllOrganizationProjectsForUserCall{Call: call}
}

// TransactionQuerierGetAllOrganizationProjectsForUserCall wrap *gomock.Call
type TransactionQuerierGetAllOrganizationProjectsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetAllOrganizationProjectsForUserCall) Return(arg0 []*queries.Project, arg1 error) *TransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetAllOrganizationProjectsForUserCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetAllOrganizationProjectsForUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetAllOrganizationProjectsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsForProjectCount mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsForProjectCount(ctx context.Context, projectID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsForProjectCount", ctx, projectID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsForProjectCount indicates an expected call of GetBruteforcePasswordsForProjectCount.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsForProjectCount(ctx, projectID any) *TransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsForProjectCount", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsForProjectCount), ctx, projectID)
	return &TransactionQuerierGetBruteforcePasswordsForProjectCountCall{Call: call}
}

// TransactionQuerierGetBruteforcePasswordsForProjectCountCall wrap *gomock.Call
type TransactionQuerierGetBruteforcePasswordsForProjectCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetBruteforcePasswordsForProjectCountCall) Return(arg0 int64, arg1 error) *TransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetBruteforcePasswordsForProjectCountCall) Do(f func(context.Context, int64) (int64, error)) *TransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetBruteforcePasswordsForProjectCountCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *TransactionQuerierGetBruteforcePasswordsForProjectCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsPaginated mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsPaginated(ctx context.Context, arg queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.DefaultBruteforcePassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsPaginated indicates an expected call of GetBruteforcePasswordsPaginated.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsPaginated(ctx, arg any) *TransactionQuerierGetBruteforcePasswordsPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsPaginated), ctx, arg)
	return &TransactionQuerierGetBruteforcePasswordsPaginatedCall{Call: call}
}

// TransactionQuerierGetBruteforcePasswordsPaginatedCall wrap *gomock.Call
type TransactionQuerierGetBruteforcePasswordsPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetBruteforcePasswordsPaginatedCall) Return(arg0 []*queries.DefaultBruteforcePassword, arg1 error) *TransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetBruteforcePasswordsPaginatedCall) Do(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *TransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetBruteforcePasswordsPaginatedCall) DoAndReturn(f func(context.Context, queries.GetBruteforcePasswordsPaginatedParams) ([]*queries.DefaultBruteforcePassword, error)) *TransactionQuerierGetBruteforcePasswordsPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcePasswordsSpecificForProject mocks base method.
func (m *MockTransactionQuerier) GetBruteforcePasswordsSpecificForProject(ctx context.Context, projectID int64) ([]sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcePasswordsSpecificForProject", ctx, projectID)
	ret0, _ := ret[0].([]sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcePasswordsSpecificForProject indicates an expected call of GetBruteforcePasswordsSpecificForProject.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcePasswordsSpecificForProject(ctx, projectID any) *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcePasswordsSpecificForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcePasswordsSpecificForProject), ctx, projectID)
	return &TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall{Call: call}
}

// TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall wrap *gomock.Call
type TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Return(arg0 []sql.NullString, arg1 error) *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) Do(f func(context.Context, int64) ([]sql.NullString, error)) *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall) DoAndReturn(f func(context.Context, int64) ([]sql.NullString, error)) *TransactionQuerierGetBruteforcePasswordsSpecificForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBruteforcedPasswords mocks base method.
func (m *MockTransactionQuerier) GetBruteforcedPasswords(ctx context.Context, arg queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBruteforcedPasswords", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBruteforcedPasswords indicates an expected call of GetBruteforcedPasswords.
func (mr *MockTransactionQuerierMockRecorder) GetBruteforcedPasswords(ctx, arg any) *TransactionQuerierGetBruteforcedPasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBruteforcedPasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).GetBruteforcedPasswords), ctx, arg)
	return &TransactionQuerierGetBruteforcedPasswordsCall{Call: call}
}

// TransactionQuerierGetBruteforcedPasswordsCall wrap *gomock.Call
type TransactionQuerierGetBruteforcedPasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetBruteforcedPasswordsCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *TransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetBruteforcedPasswordsCall) Do(f func(context.Context, queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetBruteforcedPasswordsCall) DoAndReturn(f func(context.Context, queries.GetBruteforcedPasswordsParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierGetBruteforcedPasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCPEByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCPEByProductAndVersion(ctx context.Context, arg queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPEByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPEByProductAndVersion indicates an expected call of GetCPEByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCPEByProductAndVersion(ctx, arg any) *TransactionQuerierGetCPEByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPEByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCPEByProductAndVersion), ctx, arg)
	return &TransactionQuerierGetCPEByProductAndVersionCall{Call: call}
}

// TransactionQuerierGetCPEByProductAndVersionCall wrap *gomock.Call
type TransactionQuerierGetCPEByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCPEByProductAndVersionCall) Return(arg0 *queries.NvdCpe, arg1 error) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCPEByProductAndVersionCall) Do(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCPEByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCPEByProductAndVersionParams) (*queries.NvdCpe, error)) *TransactionQuerierGetCPEByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveByCveID indicates an expected call of GetCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetCveByCveID(ctx, cveID any) *TransactionQuerierGetCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveByCveID), ctx, cveID)
	return &TransactionQuerierGetCveByCveIDCall{Call: call}
}

// TransactionQuerierGetCveByCveIDCall wrap *gomock.Call
type TransactionQuerierGetCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCveCpeByCveAndCpe mocks base method.
func (m *MockTransactionQuerier) GetCveCpeByCveAndCpe(ctx context.Context, arg queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCveCpeByCveAndCpe", ctx, arg)
	ret0, _ := ret[0].(*queries.NvdCveCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCveCpeByCveAndCpe indicates an expected call of GetCveCpeByCveAndCpe.
func (mr *MockTransactionQuerierMockRecorder) GetCveCpeByCveAndCpe(ctx, arg any) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCveCpeByCveAndCpe", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCveCpeByCveAndCpe), ctx, arg)
	return &TransactionQuerierGetCveCpeByCveAndCpeCall{Call: call}
}

// TransactionQuerierGetCveCpeByCveAndCpeCall wrap *gomock.Call
type TransactionQuerierGetCveCpeByCveAndCpeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) Return(arg0 *queries.NvdCveCpe, arg1 error) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) Do(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCveCpeByCveAndCpeCall) DoAndReturn(f func(context.Context, queries.GetCveCpeByCveAndCpeParams) (*queries.NvdCveCpe, error)) *TransactionQuerierGetCveCpeByCveAndCpeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCvesByProductAndVersion mocks base method.
func (m *MockTransactionQuerier) GetCvesByProductAndVersion(ctx context.Context, arg queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCvesByProductAndVersion", ctx, arg)
	ret0, _ := ret[0].([]*queries.GetCvesByProductAndVersionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCvesByProductAndVersion indicates an expected call of GetCvesByProductAndVersion.
func (mr *MockTransactionQuerierMockRecorder) GetCvesByProductAndVersion(ctx, arg any) *TransactionQuerierGetCvesByProductAndVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCvesByProductAndVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).GetCvesByProductAndVersion), ctx, arg)
	return &TransactionQuerierGetCvesByProductAndVersionCall{Call: call}
}

// TransactionQuerierGetCvesByProductAndVersionCall wrap *gomock.Call
type TransactionQuerierGetCvesByProductAndVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetCvesByProductAndVersionCall) Return(arg0 []*queries.GetCvesByProductAndVersionRow, arg1 error) *TransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetCvesByProductAndVersionCall) Do(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *TransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetCvesByProductAndVersionCall) DoAndReturn(f func(context.Context, queries.GetCvesByProductAndVersionParams) ([]*queries.GetCvesByProductAndVersionRow, error)) *TransactionQuerierGetCvesByProductAndVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerImagesForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectDockerImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImagesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectDockerImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImagesForProject indicates an expected call of GetDockerImagesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerImagesForProject(ctx, projectID any) *TransactionQuerierGetDockerImagesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImagesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerImagesForProject), ctx, projectID)
	return &TransactionQuerierGetDockerImagesForProjectCall{Call: call}
}

// TransactionQuerierGetDockerImagesForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerImagesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerImagesForProjectCall) Return(arg0 []*queries.ProjectDockerImage, arg1 error) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerImagesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerImagesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectDockerImage, error)) *TransactionQuerierGetDockerImagesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerLayerScanForProject(ctx context.Context, arg queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerLayerScanForProject indicates an expected call of GetDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerLayerScanForProject(ctx, arg any) *TransactionQuerierGetDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierGetDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierGetDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) Do(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.GetDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierGetDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDockerScannedLayersForProject mocks base method.
func (m *MockTransactionQuerier) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerScannedLayersForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerScannedLayersForProject indicates an expected call of GetDockerScannedLayersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetDockerScannedLayersForProject(ctx, projectID any) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerScannedLayersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetDockerScannedLayersForProject), ctx, projectID)
	return &TransactionQuerierGetDockerScannedLayersForProjectCall{Call: call}
}

// TransactionQuerierGetDockerScannedLayersForProjectCall wrap *gomock.Call
type TransactionQuerierGetDockerScannedLayersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetDockerScannedLayersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetDockerScannedLayersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitRepositoriesForProject mocks base method.
func (m *MockTransactionQuerier) GetGitRepositoriesForProject(ctx context.Context, projectID int64) ([]*queries.ProjectGitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoriesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectGitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoriesForProject indicates an expected call of GetGitRepositoriesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitRepositoriesForProject(ctx, projectID any) *TransactionQuerierGetGitRepositoriesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoriesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitRepositoriesForProject), ctx, projectID)
	return &TransactionQuerierGetGitRepositoriesForProjectCall{Call: call}
}

// TransactionQuerierGetGitRepositoriesForProjectCall wrap *gomock.Call
type TransactionQuerierGetGitRepositoriesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) Return(arg0 []*queries.ProjectGitRepository, arg1 error) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) Do(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitRepositoriesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectGitRepository, error)) *TransactionQuerierGetGitRepositoriesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProject mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProject(ctx context.Context, projectID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProject", ctx, projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProject indicates an expected call of GetGitScannedCommitsForProject.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProject(ctx, projectID any) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProject), ctx, projectID)
	return &TransactionQuerierGetGitScannedCommitsForProjectCall{Call: call}
}

// TransactionQuerierGetGitScannedCommitsForProjectCall wrap *gomock.Call
type TransactionQuerierGetGitScannedCommitsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) Do(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitScannedCommitsForProjectCall) DoAndReturn(f func(context.Context, int64) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGitScannedCommitsForProjectBatch mocks base method.
func (m *MockTransactionQuerier) GetGitScannedCommitsForProjectBatch(ctx context.Context, arg queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitScannedCommitsForProjectBatch", ctx, arg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitScannedCommitsForProjectBatch indicates an expected call of GetGitScannedCommitsForProjectBatch.
func (mr *MockTransactionQuerierMockRecorder) GetGitScannedCommitsForProjectBatch(ctx, arg any) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitScannedCommitsForProjectBatch", reflect.TypeOf((*MockTransactionQuerier)(nil).GetGitScannedCommitsForProjectBatch), ctx, arg)
	return &TransactionQuerierGetGitScannedCommitsForProjectBatchCall{Call: call}
}

// TransactionQuerierGetGitScannedCommitsForProjectBatchCall wrap *gomock.Call
type TransactionQuerierGetGitScannedCommitsForProjectBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) Return(arg0 []string, arg1 error) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) Do(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetGitScannedCommitsForProjectBatchCall) DoAndReturn(f func(context.Context, queries.GetGitScannedCommitsForProjectBatchParams) ([]string, error)) *TransactionQuerierGetGitScannedCommitsForProjectBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInvalidTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidTOTPSecretForUser indicates an expected call of GetInvalidTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetInvalidTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetInvalidTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetInvalidTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetInvalidTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetInvalidTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetInvalidTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetInvalidTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlDatabase mocks base method.
func (m *MockTransactionQuerier) GetMysqlDatabase(ctx context.Context, id int64) (*queries.GetMysqlDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlDatabase", ctx, id)
	ret0, _ := ret[0].(*queries.GetMysqlDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlDatabase indicates an expected call of GetMysqlDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlDatabase(ctx, id any) *TransactionQuerierGetMysqlDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlDatabase), ctx, id)
	return &TransactionQuerierGetMysqlDatabaseCall{Call: call}
}

// TransactionQuerierGetMysqlDatabaseCall wrap *gomock.Call
type TransactionQuerierGetMysqlDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetMysqlDatabaseCall) Return(arg0 *queries.GetMysqlDatabaseRow, arg1 error) *TransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetMysqlDatabaseCall) Do(f func(context.Context, int64) (*queries.GetMysqlDatabaseRow, error)) *TransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetMysqlDatabaseCall) DoAndReturn(f func(context.Context, int64) (*queries.GetMysqlDatabaseRow, error)) *TransactionQuerierGetMysqlDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlDatabasesForProject mocks base method.
func (m *MockTransactionQuerier) GetMysqlDatabasesForProject(ctx context.Context, projectID int64) ([]*queries.MysqlDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlDatabasesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.MysqlDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlDatabasesForProject indicates an expected call of GetMysqlDatabasesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlDatabasesForProject(ctx, projectID any) *TransactionQuerierGetMysqlDatabasesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlDatabasesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlDatabasesForProject), ctx, projectID)
	return &TransactionQuerierGetMysqlDatabasesForProjectCall{Call: call}
}

// TransactionQuerierGetMysqlDatabasesForProjectCall wrap *gomock.Call
type TransactionQuerierGetMysqlDatabasesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetMysqlDatabasesForProjectCall) Return(arg0 []*queries.MysqlDatabase, arg1 error) *TransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetMysqlDatabasesForProjectCall) Do(f func(context.Context, int64) ([]*queries.MysqlDatabase, error)) *TransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetMysqlDatabasesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.MysqlDatabase, error)) *TransactionQuerierGetMysqlDatabasesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlScan mocks base method.
func (m *MockTransactionQuerier) GetMysqlScan(ctx context.Context, id int64) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlScan", ctx, id)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlScan indicates an expected call of GetMysqlScan.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlScan(ctx, id any) *TransactionQuerierGetMysqlScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlScan), ctx, id)
	return &TransactionQuerierGetMysqlScanCall{Call: call}
}

// TransactionQuerierGetMysqlScanCall wrap *gomock.Call
type TransactionQuerierGetMysqlScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetMysqlScanCall) Return(arg0 *queries.MysqlScan, arg1 error) *TransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetMysqlScanCall) Do(f func(context.Context, int64) (*queries.MysqlScan, error)) *TransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetMysqlScanCall) DoAndReturn(f func(context.Context, int64) (*queries.MysqlScan, error)) *TransactionQuerierGetMysqlScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMysqlScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetMysqlScanByScanID(ctx context.Context, scanID int64) (*queries.MysqlScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.MysqlScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMysqlScanByScanID indicates an expected call of GetMysqlScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetMysqlScanByScanID(ctx, scanID any) *TransactionQuerierGetMysqlScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetMysqlScanByScanID), ctx, scanID)
	return &TransactionQuerierGetMysqlScanByScanIDCall{Call: call}
}

// TransactionQuerierGetMysqlScanByScanIDCall wrap *gomock.Call
type TransactionQuerierGetMysqlScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetMysqlScanByScanIDCall) Return(arg0 *queries.MysqlScan, arg1 error) *TransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetMysqlScanByScanIDCall) Do(f func(context.Context, int64) (*queries.MysqlScan, error)) *TransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetMysqlScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.MysqlScan, error)) *TransactionQuerierGetMysqlScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCPEsByDBType mocks base method.
func (m *MockTransactionQuerier) GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*queries.NvdCpe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCPEsByDBType", ctx, databaseType)
	ret0, _ := ret[0].([]*queries.NvdCpe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCPEsByDBType indicates an expected call of GetNvdCPEsByDBType.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCPEsByDBType(ctx, databaseType any) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCPEsByDBType", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCPEsByDBType), ctx, databaseType)
	return &TransactionQuerierGetNvdCPEsByDBTypeCall{Call: call}
}

// TransactionQuerierGetNvdCPEsByDBTypeCall wrap *gomock.Call
type TransactionQuerierGetNvdCPEsByDBTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) Return(arg0 []*queries.NvdCpe, arg1 error) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) Do(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetNvdCPEsByDBTypeCall) DoAndReturn(f func(context.Context, int32) ([]*queries.NvdCpe, error)) *TransactionQuerierGetNvdCPEsByDBTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNvdCveByCveID mocks base method.
func (m *MockTransactionQuerier) GetNvdCveByCveID(ctx context.Context, cveID string) (*queries.NvdCfe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvdCveByCveID", ctx, cveID)
	ret0, _ := ret[0].(*queries.NvdCfe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvdCveByCveID indicates an expected call of GetNvdCveByCveID.
func (mr *MockTransactionQuerierMockRecorder) GetNvdCveByCveID(ctx, cveID any) *TransactionQuerierGetNvdCveByCveIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvdCveByCveID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetNvdCveByCveID), ctx, cveID)
	return &TransactionQuerierGetNvdCveByCveIDCall{Call: call}
}

// TransactionQuerierGetNvdCveByCveIDCall wrap *gomock.Call
type TransactionQuerierGetNvdCveByCveIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetNvdCveByCveIDCall) Return(arg0 *queries.NvdCfe, arg1 error) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetNvdCveByCveIDCall) Do(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetNvdCveByCveIDCall) DoAndReturn(f func(context.Context, string) (*queries.NvdCfe, error)) *TransactionQuerierGetNvdCveByCveIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganization mocks base method.
func (m *MockTransactionQuerier) GetOrganization(ctx context.Context, id int64) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetOrganization(ctx, id any) *TransactionQuerierGetOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganization), ctx, id)
	return &TransactionQuerierGetOrganizationCall{Call: call}
}

// TransactionQuerierGetOrganizationCall wrap *gomock.Call
type TransactionQuerierGetOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationCall) Return(arg0 *queries.Organization, arg1 error) *TransactionQuerierGetOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationCall) Do(f func(context.Context, int64) (*queries.Organization, error)) *TransactionQuerierGetOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationCall) DoAndReturn(f func(context.Context, int64) (*queries.Organization, error)) *TransactionQuerierGetOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationByName mocks base method.
func (m *MockTransactionQuerier) GetOrganizationByName(ctx context.Context, name string) (*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByName", ctx, name)
	ret0, _ := ret[0].(*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByName indicates an expected call of GetOrganizationByName.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationByName(ctx, name any) *TransactionQuerierGetOrganizationByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationByName), ctx, name)
	return &TransactionQuerierGetOrganizationByNameCall{Call: call}
}

// TransactionQuerierGetOrganizationByNameCall wrap *gomock.Call
type TransactionQuerierGetOrganizationByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationByNameCall) Return(arg0 *queries.Organization, arg1 error) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationByNameCall) Do(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationByNameCall) DoAndReturn(f func(context.Context, string) (*queries.Organization, error)) *TransactionQuerierGetOrganizationByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationMembers mocks base method.
func (m *MockTransactionQuerier) GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembers", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembers indicates an expected call of GetOrganizationMembers.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationMembers(ctx, organizationID any) *TransactionQuerierGetOrganizationMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationMembers), ctx, organizationID)
	return &TransactionQuerierGetOrganizationMembersCall{Call: call}
}

// TransactionQuerierGetOrganizationMembersCall wrap *gomock.Call
type TransactionQuerierGetOrganizationMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationMembersCall) Return(arg0 []*queries.OrganizationMember, arg1 error) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationMembersCall) Do(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationPermissionsForUser(ctx context.Context, arg queries.GetOrganizationPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationPermissionsForUser indicates an expected call of GetOrganizationPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationPermissionsForUser(ctx, arg any) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationPermissionsForUser), ctx, arg)
	return &TransactionQuerierGetOrganizationPermissionsForUserCall{Call: call}
}

// TransactionQuerierGetOrganizationPermissionsForUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) Return(arg0 int16, arg1 error) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) Do(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationPermissionsForUserParams) (int16, error)) *TransactionQuerierGetOrganizationPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationProjects mocks base method.
func (m *MockTransactionQuerier) GetOrganizationProjects(ctx context.Context, organizationID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationProjects", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationProjects indicates an expected call of GetOrganizationProjects.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationProjects(ctx, organizationID any) *TransactionQuerierGetOrganizationProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationProjects", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationProjects), ctx, organizationID)
	return &TransactionQuerierGetOrganizationProjectsCall{Call: call}
}

// TransactionQuerierGetOrganizationProjectsCall wrap *gomock.Call
type TransactionQuerierGetOrganizationProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationProjectsCall) Return(arg0 []*queries.Project, arg1 error) *TransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationProjectsCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationProjectsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetOrganizationProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationUser(ctx context.Context, arg queries.GetOrganizationUserParams) (*queries.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUser", ctx, arg)
	ret0, _ := ret[0].(*queries.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUser indicates an expected call of GetOrganizationUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationUser(ctx, arg any) *TransactionQuerierGetOrganizationUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationUser), ctx, arg)
	return &TransactionQuerierGetOrganizationUserCall{Call: call}
}

// TransactionQuerierGetOrganizationUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationUserCall) Return(arg0 *queries.OrganizationMember, arg1 error) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationUserCall) Do(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationUserCall) DoAndReturn(f func(context.Context, queries.GetOrganizationUserParams) (*queries.OrganizationMember, error)) *TransactionQuerierGetOrganizationUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsByUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsByUser(ctx context.Context, userID int64) ([]*queries.GetOrganizationsByUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsByUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.GetOrganizationsByUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsByUser indicates an expected call of GetOrganizationsByUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsByUser(ctx, userID any) *TransactionQuerierGetOrganizationsByUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsByUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsByUser), ctx, userID)
	return &TransactionQuerierGetOrganizationsByUserCall{Call: call}
}

// TransactionQuerierGetOrganizationsByUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationsByUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationsByUserCall) Return(arg0 []*queries.GetOrganizationsByUserRow, arg1 error) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationsByUserCall) Do(f func(context.Context, int64) ([]*queries.GetOrganizationsByUserRow, error)) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationsByUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetOrganizationsByUserRow, error)) *TransactionQuerierGetOrganizationsByUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrganizationsForUser mocks base method.
func (m *MockTransactionQuerier) GetOrganizationsForUser(ctx context.Context, userID int64) ([]*queries.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationsForUser", ctx, userID)
	ret0, _ := ret[0].([]*queries.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationsForUser indicates an expected call of GetOrganizationsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetOrganizationsForUser(ctx, userID any) *TransactionQuerierGetOrganizationsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetOrganizationsForUser), ctx, userID)
	return &TransactionQuerierGetOrganizationsForUserCall{Call: call}
}

// TransactionQuerierGetOrganizationsForUserCall wrap *gomock.Call
type TransactionQuerierGetOrganizationsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetOrganizationsForUserCall) Return(arg0 []*queries.Organization, arg1 error) *TransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetOrganizationsForUserCall) Do(f func(context.Context, int64) ([]*queries.Organization, error)) *TransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetOrganizationsForUserCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Organization, error)) *TransactionQuerierGetOrganizationsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresDatabase mocks base method.
func (m *MockTransactionQuerier) GetPostgresDatabase(ctx context.Context, id int64) (*queries.GetPostgresDatabaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresDatabase", ctx, id)
	ret0, _ := ret[0].(*queries.GetPostgresDatabaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresDatabase indicates an expected call of GetPostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresDatabase(ctx, id any) *TransactionQuerierGetPostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresDatabase), ctx, id)
	return &TransactionQuerierGetPostgresDatabaseCall{Call: call}
}

// TransactionQuerierGetPostgresDatabaseCall wrap *gomock.Call
type TransactionQuerierGetPostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetPostgresDatabaseCall) Return(arg0 *queries.GetPostgresDatabaseRow, arg1 error) *TransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetPostgresDatabaseCall) Do(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *TransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetPostgresDatabaseCall) DoAndReturn(f func(context.Context, int64) (*queries.GetPostgresDatabaseRow, error)) *TransactionQuerierGetPostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresDatabasesForProject mocks base method.
func (m *MockTransactionQuerier) GetPostgresDatabasesForProject(ctx context.Context, projectID int64) ([]*queries.PostgresDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresDatabasesForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.PostgresDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresDatabasesForProject indicates an expected call of GetPostgresDatabasesForProject.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresDatabasesForProject(ctx, projectID any) *TransactionQuerierGetPostgresDatabasesForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresDatabasesForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresDatabasesForProject), ctx, projectID)
	return &TransactionQuerierGetPostgresDatabasesForProjectCall{Call: call}
}

// TransactionQuerierGetPostgresDatabasesForProjectCall wrap *gomock.Call
type TransactionQuerierGetPostgresDatabasesForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetPostgresDatabasesForProjectCall) Return(arg0 []*queries.PostgresDatabase, arg1 error) *TransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetPostgresDatabasesForProjectCall) Do(f func(context.Context, int64) ([]*queries.PostgresDatabase, error)) *TransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetPostgresDatabasesForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.PostgresDatabase, error)) *TransactionQuerierGetPostgresDatabasesForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScan mocks base method.
func (m *MockTransactionQuerier) GetPostgresScan(ctx context.Context, id int64) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScan", ctx, id)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScan indicates an expected call of GetPostgresScan.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScan(ctx, id any) *TransactionQuerierGetPostgresScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScan), ctx, id)
	return &TransactionQuerierGetPostgresScanCall{Call: call}
}

// TransactionQuerierGetPostgresScanCall wrap *gomock.Call
type TransactionQuerierGetPostgresScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetPostgresScanCall) Return(arg0 *queries.PostgresScan, arg1 error) *TransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetPostgresScanCall) Do(f func(context.Context, int64) (*queries.PostgresScan, error)) *TransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetPostgresScanCall) DoAndReturn(f func(context.Context, int64) (*queries.PostgresScan, error)) *TransactionQuerierGetPostgresScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPostgresScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetPostgresScanByScanID(ctx context.Context, scanID int64) (*queries.PostgresScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgresScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.PostgresScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostgresScanByScanID indicates an expected call of GetPostgresScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetPostgresScanByScanID(ctx, scanID any) *TransactionQuerierGetPostgresScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgresScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetPostgresScanByScanID), ctx, scanID)
	return &TransactionQuerierGetPostgresScanByScanIDCall{Call: call}
}

// TransactionQuerierGetPostgresScanByScanIDCall wrap *gomock.Call
type TransactionQuerierGetPostgresScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetPostgresScanByScanIDCall) Return(arg0 *queries.PostgresScan, arg1 error) *TransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetPostgresScanByScanIDCall) Do(f func(context.Context, int64) (*queries.PostgresScan, error)) *TransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetPostgresScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.PostgresScan, error)) *TransactionQuerierGetPostgresScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProject mocks base method.
func (m *MockTransactionQuerier) GetProject(ctx context.Context, id int64) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockTransactionQuerierMockRecorder) GetProject(ctx, id any) *TransactionQuerierGetProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProject), ctx, id)
	return &TransactionQuerierGetProjectCall{Call: call}
}

// TransactionQuerierGetProjectCall wrap *gomock.Call
type TransactionQuerierGetProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectCall) Return(arg0 *queries.Project, arg1 error) *TransactionQuerierGetProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectCall) Do(f func(context.Context, int64) (*queries.Project, error)) *TransactionQuerierGetProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectCall) DoAndReturn(f func(context.Context, int64) (*queries.Project, error)) *TransactionQuerierGetProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectByOrganizationAndName mocks base method.
func (m *MockTransactionQuerier) GetProjectByOrganizationAndName(ctx context.Context, arg queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOrganizationAndName", ctx, arg)
	ret0, _ := ret[0].(*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOrganizationAndName indicates an expected call of GetProjectByOrganizationAndName.
func (mr *MockTransactionQuerierMockRecorder) GetProjectByOrganizationAndName(ctx, arg any) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOrganizationAndName", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectByOrganizationAndName), ctx, arg)
	return &TransactionQuerierGetProjectByOrganizationAndNameCall{Call: call}
}

// TransactionQuerierGetProjectByOrganizationAndNameCall wrap *gomock.Call
type TransactionQuerierGetProjectByOrganizationAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) Return(arg0 *queries.Project, arg1 error) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) Do(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectByOrganizationAndNameCall) DoAndReturn(f func(context.Context, queries.GetProjectByOrganizationAndNameParams) (*queries.Project, error)) *TransactionQuerierGetProjectByOrganizationAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectInfoForMysqlScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetProjectInfoForMysqlScanByScanID(ctx context.Context, scanID int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInfoForMysqlScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.GetProjectInfoForMysqlScanByScanIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInfoForMysqlScanByScanID indicates an expected call of GetProjectInfoForMysqlScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetProjectInfoForMysqlScanByScanID(ctx, scanID any) *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInfoForMysqlScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectInfoForMysqlScanByScanID), ctx, scanID)
	return &TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall{Call: call}
}

// TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall wrap *gomock.Call
type TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) Return(arg0 *queries.GetProjectInfoForMysqlScanByScanIDRow, arg1 error) *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) Do(f func(context.Context, int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error)) *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.GetProjectInfoForMysqlScanByScanIDRow, error)) *TransactionQuerierGetProjectInfoForMysqlScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectInfoForPostgresScanByScanID mocks base method.
func (m *MockTransactionQuerier) GetProjectInfoForPostgresScanByScanID(ctx context.Context, scanID int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectInfoForPostgresScanByScanID", ctx, scanID)
	ret0, _ := ret[0].(*queries.GetProjectInfoForPostgresScanByScanIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectInfoForPostgresScanByScanID indicates an expected call of GetProjectInfoForPostgresScanByScanID.
func (mr *MockTransactionQuerierMockRecorder) GetProjectInfoForPostgresScanByScanID(ctx, scanID any) *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectInfoForPostgresScanByScanID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectInfoForPostgresScanByScanID), ctx, scanID)
	return &TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall{Call: call}
}

// TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall wrap *gomock.Call
type TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) Return(arg0 *queries.GetProjectInfoForPostgresScanByScanIDRow, arg1 error) *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) Do(f func(context.Context, int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error)) *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall) DoAndReturn(f func(context.Context, int64) (*queries.GetProjectInfoForPostgresScanByScanIDRow, error)) *TransactionQuerierGetProjectInfoForPostgresScanByScanIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMembers mocks base method.
func (m *MockTransactionQuerier) GetProjectMembers(ctx context.Context, projectID int64) ([]*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectMembers", ctx, projectID)
	ret0, _ := ret[0].([]*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectMembers indicates an expected call of GetProjectMembers.
func (mr *MockTransactionQuerierMockRecorder) GetProjectMembers(ctx, projectID any) *TransactionQuerierGetProjectMembersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMembers", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectMembers), ctx, projectID)
	return &TransactionQuerierGetProjectMembersCall{Call: call}
}

// TransactionQuerierGetProjectMembersCall wrap *gomock.Call
type TransactionQuerierGetProjectMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectMembersCall) Return(arg0 []*queries.ProjectMember, arg1 error) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectMembersCall) Do(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectMembersCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ProjectMember, error)) *TransactionQuerierGetProjectMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectPermissionsForUser mocks base method.
func (m *MockTransactionQuerier) GetProjectPermissionsForUser(ctx context.Context, arg queries.GetProjectPermissionsForUserParams) (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectPermissionsForUser", ctx, arg)
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectPermissionsForUser indicates an expected call of GetProjectPermissionsForUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectPermissionsForUser(ctx, arg any) *TransactionQuerierGetProjectPermissionsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectPermissionsForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectPermissionsForUser), ctx, arg)
	return &TransactionQuerierGetProjectPermissionsForUserCall{Call: call}
}

// TransactionQuerierGetProjectPermissionsForUserCall wrap *gomock.Call
type TransactionQuerierGetProjectPermissionsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectPermissionsForUserCall) Return(arg0 int16, arg1 error) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectPermissionsForUserCall) Do(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectPermissionsForUserCall) DoAndReturn(f func(context.Context, queries.GetProjectPermissionsForUserParams) (int16, error)) *TransactionQuerierGetProjectPermissionsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectUser mocks base method.
func (m *MockTransactionQuerier) GetProjectUser(ctx context.Context, arg queries.GetProjectUserParams) (*queries.ProjectMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectUser", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectUser indicates an expected call of GetProjectUser.
func (mr *MockTransactionQuerierMockRecorder) GetProjectUser(ctx, arg any) *TransactionQuerierGetProjectUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectUser), ctx, arg)
	return &TransactionQuerierGetProjectUserCall{Call: call}
}

// TransactionQuerierGetProjectUserCall wrap *gomock.Call
type TransactionQuerierGetProjectUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectUserCall) Return(arg0 *queries.ProjectMember, arg1 error) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectUserCall) Do(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectUserCall) DoAndReturn(f func(context.Context, queries.GetProjectUserParams) (*queries.ProjectMember, error)) *TransactionQuerierGetProjectUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectsByOrganization mocks base method.
func (m *MockTransactionQuerier) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*queries.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOrganization", ctx, organizationID)
	ret0, _ := ret[0].([]*queries.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByOrganization indicates an expected call of GetProjectsByOrganization.
func (mr *MockTransactionQuerierMockRecorder) GetProjectsByOrganization(ctx, organizationID any) *TransactionQuerierGetProjectsByOrganizationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOrganization", reflect.TypeOf((*MockTransactionQuerier)(nil).GetProjectsByOrganization), ctx, organizationID)
	return &TransactionQuerierGetProjectsByOrganizationCall{Call: call}
}

// TransactionQuerierGetProjectsByOrganizationCall wrap *gomock.Call
type TransactionQuerierGetProjectsByOrganizationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetProjectsByOrganizationCall) Return(arg0 []*queries.Project, arg1 error) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetProjectsByOrganizationCall) Do(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetProjectsByOrganizationCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Project, error)) *TransactionQuerierGetProjectsByOrganizationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*queries.ResetPasswordToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(*queries.ResetPasswordToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResetPasswordToken indicates an expected call of GetResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) GetResetPasswordToken(ctx, id any) *TransactionQuerierGetResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetResetPasswordToken), ctx, id)
	return &TransactionQuerierGetResetPasswordTokenCall{Call: call}
}

// TransactionQuerierGetResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierGetResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetResetPasswordTokenCall) Return(arg0 *queries.ResetPasswordToken, arg1 error) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) (*queries.ResetPasswordToken, error)) *TransactionQuerierGetResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScan mocks base method.
func (m *MockTransactionQuerier) GetScan(ctx context.Context, id int64) (*queries.GetScanRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScan", ctx, id)
	ret0, _ := ret[0].(*queries.GetScanRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScan indicates an expected call of GetScan.
func (mr *MockTransactionQuerierMockRecorder) GetScan(ctx, id any) *TransactionQuerierGetScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScan), ctx, id)
	return &TransactionQuerierGetScanCall{Call: call}
}

// TransactionQuerierGetScanCall wrap *gomock.Call
type TransactionQuerierGetScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScanCall) Return(arg0 *queries.GetScanRow, arg1 error) *TransactionQuerierGetScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScanCall) Do(f func(context.Context, int64) (*queries.GetScanRow, error)) *TransactionQuerierGetScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScanCall) DoAndReturn(f func(context.Context, int64) (*queries.GetScanRow, error)) *TransactionQuerierGetScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanBruteforceResults mocks base method.
func (m *MockTransactionQuerier) GetScanBruteforceResults(ctx context.Context, scanID int64) ([]*queries.ScanBruteforceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanBruteforceResults", ctx, scanID)
	ret0, _ := ret[0].([]*queries.ScanBruteforceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanBruteforceResults indicates an expected call of GetScanBruteforceResults.
func (mr *MockTransactionQuerierMockRecorder) GetScanBruteforceResults(ctx, scanID any) *TransactionQuerierGetScanBruteforceResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanBruteforceResults", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanBruteforceResults), ctx, scanID)
	return &TransactionQuerierGetScanBruteforceResultsCall{Call: call}
}

// TransactionQuerierGetScanBruteforceResultsCall wrap *gomock.Call
type TransactionQuerierGetScanBruteforceResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScanBruteforceResultsCall) Return(arg0 []*queries.ScanBruteforceResult, arg1 error) *TransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScanBruteforceResultsCall) Do(f func(context.Context, int64) ([]*queries.ScanBruteforceResult, error)) *TransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScanBruteforceResultsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ScanBruteforceResult, error)) *TransactionQuerierGetScanBruteforceResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanGroup mocks base method.
func (m *MockTransactionQuerier) GetScanGroup(ctx context.Context, id int64) (*queries.ScanGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanGroup", ctx, id)
	ret0, _ := ret[0].(*queries.ScanGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanGroup indicates an expected call of GetScanGroup.
func (mr *MockTransactionQuerierMockRecorder) GetScanGroup(ctx, id any) *TransactionQuerierGetScanGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanGroup", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanGroup), ctx, id)
	return &TransactionQuerierGetScanGroupCall{Call: call}
}

// TransactionQuerierGetScanGroupCall wrap *gomock.Call
type TransactionQuerierGetScanGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScanGroupCall) Return(arg0 *queries.ScanGroup, arg1 error) *TransactionQuerierGetScanGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScanGroupCall) Do(f func(context.Context, int64) (*queries.ScanGroup, error)) *TransactionQuerierGetScanGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScanGroupCall) DoAndReturn(f func(context.Context, int64) (*queries.ScanGroup, error)) *TransactionQuerierGetScanGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanResults mocks base method.
func (m *MockTransactionQuerier) GetScanResults(ctx context.Context, scanID int64) ([]*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanResults", ctx, scanID)
	ret0, _ := ret[0].([]*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanResults indicates an expected call of GetScanResults.
func (mr *MockTransactionQuerierMockRecorder) GetScanResults(ctx, scanID any) *TransactionQuerierGetScanResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanResults", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanResults), ctx, scanID)
	return &TransactionQuerierGetScanResultsCall{Call: call}
}

// TransactionQuerierGetScanResultsCall wrap *gomock.Call
type TransactionQuerierGetScanResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScanResultsCall) Return(arg0 []*queries.ScanResult, arg1 error) *TransactionQuerierGetScanResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScanResultsCall) Do(f func(context.Context, int64) ([]*queries.ScanResult, error)) *TransactionQuerierGetScanResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScanResultsCall) DoAndReturn(f func(context.Context, int64) ([]*queries.ScanResult, error)) *TransactionQuerierGetScanResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScanResultsByScanIdAndScanSource mocks base method.
func (m *MockTransactionQuerier) GetScanResultsByScanIdAndScanSource(ctx context.Context, arg queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanResultsByScanIdAndScanSource", ctx, arg)
	ret0, _ := ret[0].([]*queries.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanResultsByScanIdAndScanSource indicates an expected call of GetScanResultsByScanIdAndScanSource.
func (mr *MockTransactionQuerierMockRecorder) GetScanResultsByScanIdAndScanSource(ctx, arg any) *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanResultsByScanIdAndScanSource", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScanResultsByScanIdAndScanSource), ctx, arg)
	return &TransactionQuerierGetScanResultsByScanIdAndScanSourceCall{Call: call}
}

// TransactionQuerierGetScanResultsByScanIdAndScanSourceCall wrap *gomock.Call
type TransactionQuerierGetScanResultsByScanIdAndScanSourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall) Return(arg0 []*queries.ScanResult, arg1 error) *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall) Do(f func(context.Context, queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error)) *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall) DoAndReturn(f func(context.Context, queries.GetScanResultsByScanIdAndScanSourceParams) ([]*queries.ScanResult, error)) *TransactionQuerierGetScanResultsByScanIdAndScanSourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetScansForProject mocks base method.
func (m *MockTransactionQuerier) GetScansForProject(ctx context.Context, projectID int64) ([]*queries.GetScansForProjectRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScansForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.GetScansForProjectRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScansForProject indicates an expected call of GetScansForProject.
func (mr *MockTransactionQuerierMockRecorder) GetScansForProject(ctx, projectID any) *TransactionQuerierGetScansForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScansForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetScansForProject), ctx, projectID)
	return &TransactionQuerierGetScansForProjectCall{Call: call}
}

// TransactionQuerierGetScansForProjectCall wrap *gomock.Call
type TransactionQuerierGetScansForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetScansForProjectCall) Return(arg0 []*queries.GetScansForProjectRow, arg1 error) *TransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetScansForProjectCall) Do(f func(context.Context, int64) ([]*queries.GetScansForProjectRow, error)) *TransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetScansForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.GetScansForProjectRow, error)) *TransactionQuerierGetScansForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpecificBruteforcePasswordID mocks base method.
func (m *MockTransactionQuerier) GetSpecificBruteforcePasswordID(ctx context.Context, arg queries.GetSpecificBruteforcePasswordIDParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificBruteforcePasswordID", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecificBruteforcePasswordID indicates an expected call of GetSpecificBruteforcePasswordID.
func (mr *MockTransactionQuerierMockRecorder) GetSpecificBruteforcePasswordID(ctx, arg any) *TransactionQuerierGetSpecificBruteforcePasswordIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificBruteforcePasswordID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetSpecificBruteforcePasswordID), ctx, arg)
	return &TransactionQuerierGetSpecificBruteforcePasswordIDCall{Call: call}
}

// TransactionQuerierGetSpecificBruteforcePasswordIDCall wrap *gomock.Call
type TransactionQuerierGetSpecificBruteforcePasswordIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetSpecificBruteforcePasswordIDCall) Return(arg0 int64, arg1 error) *TransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetSpecificBruteforcePasswordIDCall) Do(f func(context.Context, queries.GetSpecificBruteforcePasswordIDParams) (int64, error)) *TransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetSpecificBruteforcePasswordIDCall) DoAndReturn(f func(context.Context, queries.GetSpecificBruteforcePasswordIDParams) (int64, error)) *TransactionQuerierGetSpecificBruteforcePasswordIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) GetTOTPSecretForUser(ctx context.Context, userID int64) (*queries.TotpSecretToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(*queries.TotpSecretToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOTPSecretForUser indicates an expected call of GetTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) GetTOTPSecretForUser(ctx, userID any) *TransactionQuerierGetTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierGetTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierGetTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierGetTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetTOTPSecretForUserCall) Return(arg0 *queries.TotpSecretToken, arg1 error) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetTOTPSecretForUserCall) Do(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) (*queries.TotpSecretToken, error)) *TransactionQuerierGetTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockTransactionQuerier) GetUser(ctx context.Context, id int64) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransactionQuerierMockRecorder) GetUser(ctx, id any) *TransactionQuerierGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUser), ctx, id)
	return &TransactionQuerierGetUserCall{Call: call}
}

// TransactionQuerierGetUserCall wrap *gomock.Call
type TransactionQuerierGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserCall) Do(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserCall) DoAndReturn(f func(context.Context, int64) (*queries.User, error)) *TransactionQuerierGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByConfirmSelector mocks base method.
func (m *MockTransactionQuerier) GetUserByConfirmSelector(ctx context.Context, confirmSelector sql.NullString) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByConfirmSelector", ctx, confirmSelector)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByConfirmSelector indicates an expected call of GetUserByConfirmSelector.
func (mr *MockTransactionQuerierMockRecorder) GetUserByConfirmSelector(ctx, confirmSelector any) *TransactionQuerierGetUserByConfirmSelectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByConfirmSelector", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByConfirmSelector), ctx, confirmSelector)
	return &TransactionQuerierGetUserByConfirmSelectorCall{Call: call}
}

// TransactionQuerierGetUserByConfirmSelectorCall wrap *gomock.Call
type TransactionQuerierGetUserByConfirmSelectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByConfirmSelectorCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByConfirmSelectorCall) Do(f func(context.Context, sql.NullString) (*queries.User, error)) *TransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByConfirmSelectorCall) DoAndReturn(f func(context.Context, sql.NullString) (*queries.User, error)) *TransactionQuerierGetUserByConfirmSelectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByRecoverSelector mocks base method.
func (m *MockTransactionQuerier) GetUserByRecoverSelector(ctx context.Context, recoverSelector sql.NullString) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByRecoverSelector", ctx, recoverSelector)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByRecoverSelector indicates an expected call of GetUserByRecoverSelector.
func (mr *MockTransactionQuerierMockRecorder) GetUserByRecoverSelector(ctx, recoverSelector any) *TransactionQuerierGetUserByRecoverSelectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByRecoverSelector", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByRecoverSelector), ctx, recoverSelector)
	return &TransactionQuerierGetUserByRecoverSelectorCall{Call: call}
}

// TransactionQuerierGetUserByRecoverSelectorCall wrap *gomock.Call
type TransactionQuerierGetUserByRecoverSelectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByRecoverSelectorCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByRecoverSelectorCall) Do(f func(context.Context, sql.NullString) (*queries.User, error)) *TransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByRecoverSelectorCall) DoAndReturn(f func(context.Context, sql.NullString) (*queries.User, error)) *TransactionQuerierGetUserByRecoverSelectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsernameOrEmail mocks base method.
func (m *MockTransactionQuerier) GetUserByUsernameOrEmail(ctx context.Context, arg queries.GetUserByUsernameOrEmailParams) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameOrEmail", ctx, arg)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameOrEmail indicates an expected call of GetUserByUsernameOrEmail.
func (mr *MockTransactionQuerierMockRecorder) GetUserByUsernameOrEmail(ctx, arg any) *TransactionQuerierGetUserByUsernameOrEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameOrEmail", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByUsernameOrEmail), ctx, arg)
	return &TransactionQuerierGetUserByUsernameOrEmailCall{Call: call}
}

// TransactionQuerierGetUserByUsernameOrEmailCall wrap *gomock.Call
type TransactionQuerierGetUserByUsernameOrEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Return(arg0 *queries.User, arg1 error) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) Do(f func(context.Context, queries.GetUserByUsernameOrEmailParams) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByUsernameOrEmailCall) DoAndReturn(f func(context.Context, queries.GetUserByUsernameOrEmailParams) (*queries.User, error)) *TransactionQuerierGetUserByUsernameOrEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByWebauthnCredentialID mocks base method.
func (m *MockTransactionQuerier) GetUserByWebauthnCredentialID(ctx context.Context, credentialID []byte) (*queries.GetUserByWebauthnCredentialIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByWebauthnCredentialID", ctx, credentialID)
	ret0, _ := ret[0].(*queries.GetUserByWebauthnCredentialIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByWebauthnCredentialID indicates an expected call of GetUserByWebauthnCredentialID.
func (mr *MockTransactionQuerierMockRecorder) GetUserByWebauthnCredentialID(ctx, credentialID any) *TransactionQuerierGetUserByWebauthnCredentialIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByWebauthnCredentialID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetUserByWebauthnCredentialID), ctx, credentialID)
	return &TransactionQuerierGetUserByWebauthnCredentialIDCall{Call: call}
}

// TransactionQuerierGetUserByWebauthnCredentialIDCall wrap *gomock.Call
type TransactionQuerierGetUserByWebauthnCredentialIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetUserByWebauthnCredentialIDCall) Return(arg0 *queries.GetUserByWebauthnCredentialIDRow, arg1 error) *TransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetUserByWebauthnCredentialIDCall) Do(f func(context.Context, []byte) (*queries.GetUserByWebauthnCredentialIDRow, error)) *TransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetUserByWebauthnCredentialIDCall) DoAndReturn(f func(context.Context, []byte) (*queries.GetUserByWebauthnCredentialIDRow, error)) *TransactionQuerierGetUserByWebauthnCredentialIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWebauthnCredentialsByUserID mocks base method.
func (m *MockTransactionQuerier) GetWebauthnCredentialsByUserID(ctx context.Context, userID int64) ([]*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebauthnCredentialsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebauthnCredentialsByUserID indicates an expected call of GetWebauthnCredentialsByUserID.
func (mr *MockTransactionQuerierMockRecorder) GetWebauthnCredentialsByUserID(ctx, userID any) *TransactionQuerierGetWebauthnCredentialsByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebauthnCredentialsByUserID", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWebauthnCredentialsByUserID), ctx, userID)
	return &TransactionQuerierGetWebauthnCredentialsByUserIDCall{Call: call}
}

// TransactionQuerierGetWebauthnCredentialsByUserIDCall wrap *gomock.Call
type TransactionQuerierGetWebauthnCredentialsByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetWebauthnCredentialsByUserIDCall) Return(arg0 []*queries.WebauthnCredential, arg1 error) *TransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetWebauthnCredentialsByUserIDCall) Do(f func(context.Context, int64) ([]*queries.WebauthnCredential, error)) *TransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetWebauthnCredentialsByUserIDCall) DoAndReturn(f func(context.Context, int64) ([]*queries.WebauthnCredential, error)) *TransactionQuerierGetWebauthnCredentialsByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerByToken mocks base method.
func (m *MockTransactionQuerier) GetWorkerByToken(ctx context.Context, token string) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerByToken", ctx, token)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerByToken indicates an expected call of GetWorkerByToken.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerByToken(ctx, token any) *TransactionQuerierGetWorkerByTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerByToken", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerByToken), ctx, token)
	return &TransactionQuerierGetWorkerByTokenCall{Call: call}
}

// TransactionQuerierGetWorkerByTokenCall wrap *gomock.Call
type TransactionQuerierGetWorkerByTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetWorkerByTokenCall) Return(arg0 *queries.Worker, arg1 error) *TransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetWorkerByTokenCall) Do(f func(context.Context, string) (*queries.Worker, error)) *TransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetWorkerByTokenCall) DoAndReturn(f func(context.Context, string) (*queries.Worker, error)) *TransactionQuerierGetWorkerByTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerForProject mocks base method.
func (m *MockTransactionQuerier) GetWorkerForProject(ctx context.Context, arg queries.GetWorkerForProjectParams) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerForProject indicates an expected call of GetWorkerForProject.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerForProject(ctx, arg any) *TransactionQuerierGetWorkerForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerForProject), ctx, arg)
	return &TransactionQuerierGetWorkerForProjectCall{Call: call}
}

// TransactionQuerierGetWorkerForProjectCall wrap *gomock.Call
type TransactionQuerierGetWorkerForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetWorkerForProjectCall) Return(arg0 *queries.Worker, arg1 error) *TransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetWorkerForProjectCall) Do(f func(context.Context, queries.GetWorkerForProjectParams) (*queries.Worker, error)) *TransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetWorkerForProjectCall) DoAndReturn(f func(context.Context, queries.GetWorkerForProjectParams) (*queries.Worker, error)) *TransactionQuerierGetWorkerForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkerForScan mocks base method.
func (m *MockTransactionQuerier) GetWorkerForScan(ctx context.Context, id int64) (*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerForScan", ctx, id)
	ret0, _ := ret[0].(*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerForScan indicates an expected call of GetWorkerForScan.
func (mr *MockTransactionQuerierMockRecorder) GetWorkerForScan(ctx, id any) *TransactionQuerierGetWorkerForScanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerForScan", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkerForScan), ctx, id)
	return &TransactionQuerierGetWorkerForScanCall{Call: call}
}

// TransactionQuerierGetWorkerForScanCall wrap *gomock.Call
type TransactionQuerierGetWorkerForScanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetWorkerForScanCall) Return(arg0 *queries.Worker, arg1 error) *TransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetWorkerForScanCall) Do(f func(context.Context, int64) (*queries.Worker, error)) *TransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetWorkerForScanCall) DoAndReturn(f func(context.Context, int64) (*queries.Worker, error)) *TransactionQuerierGetWorkerForScanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWorkersForProject mocks base method.
func (m *MockTransactionQuerier) GetWorkersForProject(ctx context.Context, projectID int64) ([]*queries.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkersForProject", ctx, projectID)
	ret0, _ := ret[0].([]*queries.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkersForProject indicates an expected call of GetWorkersForProject.
func (mr *MockTransactionQuerierMockRecorder) GetWorkersForProject(ctx, projectID any) *TransactionQuerierGetWorkersForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkersForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).GetWorkersForProject), ctx, projectID)
	return &TransactionQuerierGetWorkersForProjectCall{Call: call}
}

// TransactionQuerierGetWorkersForProjectCall wrap *gomock.Call
type TransactionQuerierGetWorkersForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierGetWorkersForProjectCall) Return(arg0 []*queries.Worker, arg1 error) *TransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierGetWorkersForProjectCall) Do(f func(context.Context, int64) ([]*queries.Worker, error)) *TransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierGetWorkersForProjectCall) DoAndReturn(f func(context.Context, int64) ([]*queries.Worker, error)) *TransactionQuerierGetWorkersForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertBruteforcePasswords mocks base method.
func (m *MockTransactionQuerier) InsertBruteforcePasswords(ctx context.Context, passwords []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBruteforcePasswords", ctx, passwords)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBruteforcePasswords indicates an expected call of InsertBruteforcePasswords.
func (mr *MockTransactionQuerierMockRecorder) InsertBruteforcePasswords(ctx, passwords any) *TransactionQuerierInsertBruteforcePasswordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBruteforcePasswords", reflect.TypeOf((*MockTransactionQuerier)(nil).InsertBruteforcePasswords), ctx, passwords)
	return &TransactionQuerierInsertBruteforcePasswordsCall{Call: call}
}

// TransactionQuerierInsertBruteforcePasswordsCall wrap *gomock.Call
type TransactionQuerierInsertBruteforcePasswordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInsertBruteforcePasswordsCall) Return(arg0 error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInsertBruteforcePasswordsCall) Do(f func(context.Context, []string) error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInsertBruteforcePasswordsCall) DoAndReturn(f func(context.Context, []string) error) *TransactionQuerierInsertBruteforcePasswordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateResetPasswordToken mocks base method.
func (m *MockTransactionQuerier) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateResetPasswordToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateResetPasswordToken indicates an expected call of InvalidateResetPasswordToken.
func (mr *MockTransactionQuerierMockRecorder) InvalidateResetPasswordToken(ctx, id any) *TransactionQuerierInvalidateResetPasswordTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateResetPasswordToken", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateResetPasswordToken), ctx, id)
	return &TransactionQuerierInvalidateResetPasswordTokenCall{Call: call}
}

// TransactionQuerierInvalidateResetPasswordTokenCall wrap *gomock.Call
type TransactionQuerierInvalidateResetPasswordTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Return(arg0 error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) Do(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateResetPasswordTokenCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *TransactionQuerierInvalidateResetPasswordTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateTOTPSecretForUser indicates an expected call of InvalidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) InvalidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).InvalidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierInvalidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierInvalidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierInvalidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierInvalidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierInvalidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsers mocks base method.
func (m *MockTransactionQuerier) ListUsers(ctx context.Context) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransactionQuerierMockRecorder) ListUsers(ctx any) *TransactionQuerierListUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsers), ctx)
	return &TransactionQuerierListUsersCall{Call: call}
}

// TransactionQuerierListUsersCall wrap *gomock.Call
type TransactionQuerierListUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersCall) Do(f func(context.Context) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersCall) DoAndReturn(f func(context.Context) ([]*queries.User, error)) *TransactionQuerierListUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListUsersPaginated mocks base method.
func (m *MockTransactionQuerier) ListUsersPaginated(ctx context.Context, arg queries.ListUsersPaginatedParams) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPaginated", ctx, arg)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersPaginated indicates an expected call of ListUsersPaginated.
func (mr *MockTransactionQuerierMockRecorder) ListUsersPaginated(ctx, arg any) *TransactionQuerierListUsersPaginatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPaginated", reflect.TypeOf((*MockTransactionQuerier)(nil).ListUsersPaginated), ctx, arg)
	return &TransactionQuerierListUsersPaginatedCall{Call: call}
}

// TransactionQuerierListUsersPaginatedCall wrap *gomock.Call
type TransactionQuerierListUsersPaginatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierListUsersPaginatedCall) Return(arg0 []*queries.User, arg1 error) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierListUsersPaginatedCall) Do(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierListUsersPaginatedCall) DoAndReturn(f func(context.Context, queries.ListUsersPaginatedParams) ([]*queries.User, error)) *TransactionQuerierListUsersPaginatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartTransaction mocks base method.
func (m *MockTransactionQuerier) StartTransaction(ctx context.Context) (db.TransactionQuerier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.TransactionQuerier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionQuerierMockRecorder) StartTransaction(ctx any) *TransactionQuerierStartTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionQuerier)(nil).StartTransaction), ctx)
	return &TransactionQuerierStartTransactionCall{Call: call}
}

// TransactionQuerierStartTransactionCall wrap *gomock.Call
type TransactionQuerierStartTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierStartTransactionCall) Return(arg0 db.TransactionQuerier, arg1 error) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierStartTransactionCall) Do(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierStartTransactionCall) DoAndReturn(f func(context.Context) (db.TransactionQuerier, error)) *TransactionQuerierStartTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBruteforcedPassword mocks base method.
func (m *MockTransactionQuerier) UpdateBruteforcedPassword(ctx context.Context, arg queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBruteforcedPassword", ctx, arg)
	ret0, _ := ret[0].(*queries.BruteforcedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBruteforcedPassword indicates an expected call of UpdateBruteforcedPassword.
func (mr *MockTransactionQuerierMockRecorder) UpdateBruteforcedPassword(ctx, arg any) *TransactionQuerierUpdateBruteforcedPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBruteforcedPassword", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateBruteforcedPassword), ctx, arg)
	return &TransactionQuerierUpdateBruteforcedPasswordCall{Call: call}
}

// TransactionQuerierUpdateBruteforcedPasswordCall wrap *gomock.Call
type TransactionQuerierUpdateBruteforcedPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateBruteforcedPasswordCall) Return(arg0 *queries.BruteforcedPassword, arg1 error) *TransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateBruteforcedPasswordCall) Do(f func(context.Context, queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateBruteforcedPasswordCall) DoAndReturn(f func(context.Context, queries.UpdateBruteforcedPasswordParams) (*queries.BruteforcedPassword, error)) *TransactionQuerierUpdateBruteforcedPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDockerLayerScanForProject mocks base method.
func (m *MockTransactionQuerier) UpdateDockerLayerScanForProject(ctx context.Context, arg queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDockerLayerScanForProject", ctx, arg)
	ret0, _ := ret[0].(*queries.ProjectDockerLayerScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDockerLayerScanForProject indicates an expected call of UpdateDockerLayerScanForProject.
func (mr *MockTransactionQuerierMockRecorder) UpdateDockerLayerScanForProject(ctx, arg any) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerLayerScanForProject", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateDockerLayerScanForProject), ctx, arg)
	return &TransactionQuerierUpdateDockerLayerScanForProjectCall{Call: call}
}

// TransactionQuerierUpdateDockerLayerScanForProjectCall wrap *gomock.Call
type TransactionQuerierUpdateDockerLayerScanForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) Return(arg0 *queries.ProjectDockerLayerScan, arg1 error) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) Do(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateDockerLayerScanForProjectCall) DoAndReturn(f func(context.Context, queries.UpdateDockerLayerScanForProjectParams) (*queries.ProjectDockerLayerScan, error)) *TransactionQuerierUpdateDockerLayerScanForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMysqlDatabase mocks base method.
func (m *MockTransactionQuerier) UpdateMysqlDatabase(ctx context.Context, arg queries.UpdateMysqlDatabaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMysqlDatabase", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMysqlDatabase indicates an expected call of UpdateMysqlDatabase.
func (mr *MockTransactionQuerierMockRecorder) UpdateMysqlDatabase(ctx, arg any) *TransactionQuerierUpdateMysqlDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMysqlDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateMysqlDatabase), ctx, arg)
	return &TransactionQuerierUpdateMysqlDatabaseCall{Call: call}
}

// TransactionQuerierUpdateMysqlDatabaseCall wrap *gomock.Call
type TransactionQuerierUpdateMysqlDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateMysqlDatabaseCall) Return(arg0 error) *TransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateMysqlDatabaseCall) Do(f func(context.Context, queries.UpdateMysqlDatabaseParams) error) *TransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateMysqlDatabaseCall) DoAndReturn(f func(context.Context, queries.UpdateMysqlDatabaseParams) error) *TransactionQuerierUpdateMysqlDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMysqlVersion mocks base method.
func (m *MockTransactionQuerier) UpdateMysqlVersion(ctx context.Context, arg queries.UpdateMysqlVersionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMysqlVersion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMysqlVersion indicates an expected call of UpdateMysqlVersion.
func (mr *MockTransactionQuerierMockRecorder) UpdateMysqlVersion(ctx, arg any) *TransactionQuerierUpdateMysqlVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMysqlVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateMysqlVersion), ctx, arg)
	return &TransactionQuerierUpdateMysqlVersionCall{Call: call}
}

// TransactionQuerierUpdateMysqlVersionCall wrap *gomock.Call
type TransactionQuerierUpdateMysqlVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateMysqlVersionCall) Return(arg0 error) *TransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateMysqlVersionCall) Do(f func(context.Context, queries.UpdateMysqlVersionParams) error) *TransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateMysqlVersionCall) DoAndReturn(f func(context.Context, queries.UpdateMysqlVersionParams) error) *TransactionQuerierUpdateMysqlVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNvdCPE mocks base method.
func (m *MockTransactionQuerier) UpdateNvdCPE(ctx context.Context, arg queries.UpdateNvdCPEParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNvdCPE", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNvdCPE indicates an expected call of UpdateNvdCPE.
func (mr *MockTransactionQuerierMockRecorder) UpdateNvdCPE(ctx, arg any) *TransactionQuerierUpdateNvdCPECall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNvdCPE", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateNvdCPE), ctx, arg)
	return &TransactionQuerierUpdateNvdCPECall{Call: call}
}

// TransactionQuerierUpdateNvdCPECall wrap *gomock.Call
type TransactionQuerierUpdateNvdCPECall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateNvdCPECall) Return(arg0 error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateNvdCPECall) Do(f func(context.Context, queries.UpdateNvdCPEParams) error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateNvdCPECall) DoAndReturn(f func(context.Context, queries.UpdateNvdCPEParams) error) *TransactionQuerierUpdateNvdCPECall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresDatabase mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresDatabase(ctx context.Context, arg queries.UpdatePostgresDatabaseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresDatabase", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresDatabase indicates an expected call of UpdatePostgresDatabase.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresDatabase(ctx, arg any) *TransactionQuerierUpdatePostgresDatabaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresDatabase", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresDatabase), ctx, arg)
	return &TransactionQuerierUpdatePostgresDatabaseCall{Call: call}
}

// TransactionQuerierUpdatePostgresDatabaseCall wrap *gomock.Call
type TransactionQuerierUpdatePostgresDatabaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdatePostgresDatabaseCall) Return(arg0 error) *TransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdatePostgresDatabaseCall) Do(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *TransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdatePostgresDatabaseCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresDatabaseParams) error) *TransactionQuerierUpdatePostgresDatabaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePostgresVersion mocks base method.
func (m *MockTransactionQuerier) UpdatePostgresVersion(ctx context.Context, arg queries.UpdatePostgresVersionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostgresVersion", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostgresVersion indicates an expected call of UpdatePostgresVersion.
func (mr *MockTransactionQuerierMockRecorder) UpdatePostgresVersion(ctx, arg any) *TransactionQuerierUpdatePostgresVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostgresVersion", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdatePostgresVersion), ctx, arg)
	return &TransactionQuerierUpdatePostgresVersionCall{Call: call}
}

// TransactionQuerierUpdatePostgresVersionCall wrap *gomock.Call
type TransactionQuerierUpdatePostgresVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdatePostgresVersionCall) Return(arg0 error) *TransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdatePostgresVersionCall) Do(f func(context.Context, queries.UpdatePostgresVersionParams) error) *TransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdatePostgresVersionCall) DoAndReturn(f func(context.Context, queries.UpdatePostgresVersionParams) error) *TransactionQuerierUpdatePostgresVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateScanBruteforceResult mocks base method.
func (m *MockTransactionQuerier) UpdateScanBruteforceResult(ctx context.Context, arg queries.UpdateScanBruteforceResultParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanBruteforceResult", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScanBruteforceResult indicates an expected call of UpdateScanBruteforceResult.
func (mr *MockTransactionQuerierMockRecorder) UpdateScanBruteforceResult(ctx, arg any) *TransactionQuerierUpdateScanBruteforceResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanBruteforceResult", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateScanBruteforceResult), ctx, arg)
	return &TransactionQuerierUpdateScanBruteforceResultCall{Call: call}
}

// TransactionQuerierUpdateScanBruteforceResultCall wrap *gomock.Call
type TransactionQuerierUpdateScanBruteforceResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateScanBruteforceResultCall) Return(arg0 error) *TransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateScanBruteforceResultCall) Do(f func(context.Context, queries.UpdateScanBruteforceResultParams) error) *TransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateScanBruteforceResultCall) DoAndReturn(f func(context.Context, queries.UpdateScanBruteforceResultParams) error) *TransactionQuerierUpdateScanBruteforceResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateScanStatus mocks base method.
func (m *MockTransactionQuerier) UpdateScanStatus(ctx context.Context, arg queries.UpdateScanStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScanStatus indicates an expected call of UpdateScanStatus.
func (mr *MockTransactionQuerierMockRecorder) UpdateScanStatus(ctx, arg any) *TransactionQuerierUpdateScanStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanStatus", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateScanStatus), ctx, arg)
	return &TransactionQuerierUpdateScanStatusCall{Call: call}
}

// TransactionQuerierUpdateScanStatusCall wrap *gomock.Call
type TransactionQuerierUpdateScanStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateScanStatusCall) Return(arg0 error) *TransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateScanStatusCall) Do(f func(context.Context, queries.UpdateScanStatusParams) error) *TransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateScanStatusCall) DoAndReturn(f func(context.Context, queries.UpdateScanStatusParams) error) *TransactionQuerierUpdateScanStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockTransactionQuerier) UpdateUser(ctx context.Context, arg queries.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionQuerierMockRecorder) UpdateUser(ctx, arg any) *TransactionQuerierUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateUser), ctx, arg)
	return &TransactionQuerierUpdateUserCall{Call: call}
}

// TransactionQuerierUpdateUserCall wrap *gomock.Call
type TransactionQuerierUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateUserCall) Return(arg0 error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateUserCall) Do(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateUserCall) DoAndReturn(f func(context.Context, queries.UpdateUserParams) error) *TransactionQuerierUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWebauthnCredential mocks base method.
func (m *MockTransactionQuerier) UpdateWebauthnCredential(ctx context.Context, arg queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebauthnCredential", ctx, arg)
	ret0, _ := ret[0].(*queries.WebauthnCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebauthnCredential indicates an expected call of UpdateWebauthnCredential.
func (mr *MockTransactionQuerierMockRecorder) UpdateWebauthnCredential(ctx, arg any) *TransactionQuerierUpdateWebauthnCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebauthnCredential", reflect.TypeOf((*MockTransactionQuerier)(nil).UpdateWebauthnCredential), ctx, arg)
	return &TransactionQuerierUpdateWebauthnCredentialCall{Call: call}
}

// TransactionQuerierUpdateWebauthnCredentialCall wrap *gomock.Call
type TransactionQuerierUpdateWebauthnCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierUpdateWebauthnCredentialCall) Return(arg0 *queries.WebauthnCredential, arg1 error) *TransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierUpdateWebauthnCredentialCall) Do(f func(context.Context, queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *TransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierUpdateWebauthnCredentialCall) DoAndReturn(f func(context.Context, queries.UpdateWebauthnCredentialParams) (*queries.WebauthnCredential, error)) *TransactionQuerierUpdateWebauthnCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateTOTPSecretForUser mocks base method.
func (m *MockTransactionQuerier) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTPSecretForUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTOTPSecretForUser indicates an expected call of ValidateTOTPSecretForUser.
func (mr *MockTransactionQuerierMockRecorder) ValidateTOTPSecretForUser(ctx, userID any) *TransactionQuerierValidateTOTPSecretForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTPSecretForUser", reflect.TypeOf((*MockTransactionQuerier)(nil).ValidateTOTPSecretForUser), ctx, userID)
	return &TransactionQuerierValidateTOTPSecretForUserCall{Call: call}
}

// TransactionQuerierValidateTOTPSecretForUserCall wrap *gomock.Call
type TransactionQuerierValidateTOTPSecretForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Return(arg0 error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionQuerierValidateTOTPSecretForUserCall) Do(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionQuerierValidateTOTPSecretForUserCall) DoAndReturn(f func(context.Context, int64) error) *TransactionQuerierValidateTOTPSecretForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
