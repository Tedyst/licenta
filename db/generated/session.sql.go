// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: session.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id, totp_key
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, totp_key, waiting_2fa, created_at
`

type CreateSessionParams struct {
	ID      uuid.UUID
	UserID  pgtype.Int8
	TotpKey pgtype.Text
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.UserID, arg.TotpKey)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotpKey,
		&i.Waiting2fa,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, totp_key, waiting_2fa, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotpKey,
		&i.Waiting2fa,
		&i.CreatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions SET
    user_id = $2,
    totp_key = $3
WHERE id = $1
`

type UpdateSessionParams struct {
	ID      uuid.UUID
	UserID  pgtype.Int8
	TotpKey pgtype.Text
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession, arg.ID, arg.UserID, arg.TotpKey)
	return err
}
