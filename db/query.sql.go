// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id, totp_key
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, totp_key, waiting_2fa, created_at
`

type CreateSessionParams struct {
	ID      uuid.UUID
	UserID  pgtype.Int8
	TotpKey pgtype.Text
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.UserID, arg.TotpKey)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotpKey,
		&i.Waiting2fa,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, email
) VALUES (
  $1, $2, $3
)
RETURNING id, username, password, email, admin, totp_secret
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Admin,
		&i.TotpSecret,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, totp_key, waiting_2fa, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotpKey,
		&i.Waiting2fa,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, email, admin, totp_secret FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Admin,
		&i.TotpSecret,
	)
	return i, err
}

const getUserBySession = `-- name: GetUserBySession :one
SELECT users.id, username, password, email, admin, totp_secret, sessions.id, user_id, totp_key, waiting_2fa, created_at FROM users
INNER JOIN sessions ON sessions.user_id = users.id
WHERE sessions.id = $1 LIMIT 1
`

type GetUserBySessionRow struct {
	ID         int64
	Username   string
	Password   string
	Email      string
	Admin      bool
	TotpSecret pgtype.Text
	ID_2       uuid.UUID
	UserID     pgtype.Int8
	TotpKey    pgtype.Text
	Waiting2fa bool
	CreatedAt  pgtype.Timestamptz
}

func (q *Queries) GetUserBySession(ctx context.Context, id uuid.UUID) (GetUserBySessionRow, error) {
	row := q.db.QueryRow(ctx, getUserBySession, id)
	var i GetUserBySessionRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Admin,
		&i.TotpSecret,
		&i.ID_2,
		&i.UserID,
		&i.TotpKey,
		&i.Waiting2fa,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT id, username, password, email, admin, totp_secret FROM users
WHERE username = $1 OR email = $1 LIMIT 1
`

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameOrEmail, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Admin,
		&i.TotpSecret,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, admin, totp_secret FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Admin,
			&i.TotpSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions SET
    user_id = $2,
    totp_key = $3
WHERE id = $1
`

type UpdateSessionParams struct {
	ID      uuid.UUID
	UserID  pgtype.Int8
	TotpKey pgtype.Text
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession, arg.ID, arg.UserID, arg.TotpKey)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    username = $2,
    password = $3,
    email = $4,
    admin = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64
	Username string
	Password string
	Email    string
	Admin    bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Admin,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET
    password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserTOTPSecret = `-- name: UpdateUserTOTPSecret :exec
UPDATE users SET
    totp_secret = $2
WHERE id = $1
`

type UpdateUserTOTPSecretParams struct {
	ID         int64
	TotpSecret pgtype.Text
}

func (q *Queries) UpdateUserTOTPSecret(ctx context.Context, arg UpdateUserTOTPSecretParams) error {
	_, err := q.db.Exec(ctx, updateUserTOTPSecret, arg.ID, arg.TotpSecret)
	return err
}
