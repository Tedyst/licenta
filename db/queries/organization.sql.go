// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: organization.sql

package queries

import (
	"context"
)

const getOrganizationByName = `-- name: GetOrganizationByName :one
SELECT
    id, name, created_at
FROM
    organizations
WHERE
    name = $1
LIMIT 1
`

func (q *Queries) GetOrganizationByName(ctx context.Context, name string) (*Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByName, name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}

const getOrganizationMembers = `-- name: GetOrganizationMembers :many
SELECT
    id, organization_id, user_id, role, created_at
FROM
    organization_members
WHERE
    organization_id = $1
`

func (q *Queries) GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*OrganizationMember, error) {
	rows, err := q.db.Query(ctx, getOrganizationMembers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrganizationMember
	for rows.Next() {
		var i OrganizationMember
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationPermissionsForUser = `-- name: GetOrganizationPermissionsForUser :one
SELECT
    organization_members.role::smallint AS role
FROM
    organization_members
WHERE
    organization_id = $1
    AND user_id = $2
`

type GetOrganizationPermissionsForUserParams struct {
	OrganizationID int64
	UserID         int64
}

func (q *Queries) GetOrganizationPermissionsForUser(ctx context.Context, arg GetOrganizationPermissionsForUserParams) (int16, error) {
	row := q.db.QueryRow(ctx, getOrganizationPermissionsForUser, arg.OrganizationID, arg.UserID)
	var role int16
	err := row.Scan(&role)
	return role, err
}

const getOrganizationUser = `-- name: GetOrganizationUser :one
SELECT
    id, organization_id, user_id, role, created_at
FROM
    organization_members
WHERE
    organization_id = $1
    AND user_id = $2
LIMIT 1
`

type GetOrganizationUserParams struct {
	OrganizationID int64
	UserID         int64
}

func (q *Queries) GetOrganizationUser(ctx context.Context, arg GetOrganizationUserParams) (*OrganizationMember, error) {
	row := q.db.QueryRow(ctx, getOrganizationUser, arg.OrganizationID, arg.UserID)
	var i OrganizationMember
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const getOrganizationsByUser = `-- name: GetOrganizationsByUser :many
SELECT
    organizations.id, organizations.name, organizations.created_at
FROM
    organizations
    INNER JOIN organization_members ON organizations.id = organization_members.organization_id
WHERE
    organization_members.user_id = $1
`

func (q *Queries) GetOrganizationsByUser(ctx context.Context, userID int64) ([]*Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
