// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: docker.sql

package queries

import (
	"context"
	"database/sql"
)

const createDockerImageForProject = `-- name: CreateDockerImageForProject :one
INSERT INTO project_docker_images(project_id, docker_image, username, PASSWORD)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, docker_image, username, password, created_at
`

type CreateDockerImageForProjectParams struct {
	ProjectID   int64
	DockerImage string
	Username    sql.NullString
	Password    sql.NullString
}

func (q *Queries) CreateDockerImageForProject(ctx context.Context, arg CreateDockerImageForProjectParams) (*ProjectDockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImageForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
	)
	var i ProjectDockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteDockerImageForProject = `-- name: DeleteDockerImageForProject :exec
DELETE FROM project_docker_images
WHERE project_id = $1
    AND docker_image = $2
`

type DeleteDockerImageForProjectParams struct {
	ProjectID   int64
	DockerImage string
}

func (q *Queries) DeleteDockerImageForProject(ctx context.Context, arg DeleteDockerImageForProjectParams) error {
	_, err := q.db.Exec(ctx, deleteDockerImageForProject, arg.ProjectID, arg.DockerImage)
	return err
}

const getDockerImagesForProject = `-- name: GetDockerImagesForProject :many
SELECT
    id, project_id, docker_image, username, password, created_at
FROM
    project_docker_images
WHERE
    project_id = $1
`

func (q *Queries) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*ProjectDockerImage, error) {
	rows, err := q.db.Query(ctx, getDockerImagesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ProjectDockerImage
	for rows.Next() {
		var i ProjectDockerImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DockerImage,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerScannedLayersForProject = `-- name: GetDockerScannedLayersForProject :many
SELECT
    layer_hash
FROM
    project_docker_scanned_layers
WHERE
    project_id = $1
`

func (q *Queries) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getDockerScannedLayersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var layer_hash string
		if err := rows.Scan(&layer_hash); err != nil {
			return nil, err
		}
		items = append(items, layer_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
