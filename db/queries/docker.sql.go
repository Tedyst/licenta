// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: docker.sql

package queries

import (
	"context"
	"database/sql"
)

const createDockerImage = `-- name: CreateDockerImage :one
INSERT INTO docker_images(project_id, docker_image, username, PASSWORD, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageParams struct {
	ProjectID                     int64           `json:"project_id"`
	DockerImage                   string          `json:"docker_image"`
	Username                      sql.NullString  `json:"username"`
	Password                      sql.NullString  `json:"password"`
	MinProbability                sql.NullFloat64 `json:"min_probability"`
	ProbabilityDecreaseMultiplier sql.NullFloat64 `json:"probability_decrease_multiplier"`
	ProbabilityIncreaseMultiplier sql.NullFloat64 `json:"probability_increase_multiplier"`
	EntropyThreshold              sql.NullFloat64 `json:"entropy_threshold"`
	LogisticGrowthRate            sql.NullFloat64 `json:"logistic_growth_rate"`
}

func (q *Queries) CreateDockerImage(ctx context.Context, arg CreateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImage,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
		arg.MinProbability,
		arg.ProbabilityDecreaseMultiplier,
		arg.ProbabilityIncreaseMultiplier,
		arg.EntropyThreshold,
		arg.LogisticGrowthRate,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

const createDockerImageForProject = `-- name: CreateDockerImageForProject :one
INSERT INTO docker_images(project_id, docker_image, username, PASSWORD)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageForProjectParams struct {
	ProjectID   int64          `json:"project_id"`
	DockerImage string         `json:"docker_image"`
	Username    sql.NullString `json:"username"`
	Password    sql.NullString `json:"password"`
}

func (q *Queries) CreateDockerImageForProject(ctx context.Context, arg CreateDockerImageForProjectParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImageForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

type CreateDockerLayerResultsForProjectParams struct {
	ProjectID   int64          `json:"project_id"`
	LayerID     int64          `json:"layer_id"`
	Name        string         `json:"name"`
	Line        string         `json:"line"`
	LineNumber  int32          `json:"line_number"`
	Match       string         `json:"match"`
	Probability float64        `json:"probability"`
	Username    sql.NullString `json:"username"`
	Password    sql.NullString `json:"password"`
	Filename    string         `json:"filename"`
}

const createDockerLayerScanForProject = `-- name: CreateDockerLayerScanForProject :one
INSERT INTO docker_scans(project_id, docker_image, layers_to_scan)
    VALUES ($1, $2, $3)
RETURNING
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
`

type CreateDockerLayerScanForProjectParams struct {
	ProjectID    int64 `json:"project_id"`
	DockerImage  int64 `json:"docker_image"`
	LayersToScan int32 `json:"layers_to_scan"`
}

func (q *Queries) CreateDockerLayerScanForProject(ctx context.Context, arg CreateDockerLayerScanForProjectParams) (*DockerScan, error) {
	row := q.db.QueryRow(ctx, createDockerLayerScanForProject, arg.ProjectID, arg.DockerImage, arg.LayersToScan)
	var i DockerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}

const createDockerScannedLayerForProject = `-- name: CreateDockerScannedLayerForProject :one
INSERT INTO docker_layers(project_id, layer_hash)
    VALUES ($1, $2)
RETURNING
    id, project_id, scan_id, layer_hash, scanned_at
`

type CreateDockerScannedLayerForProjectParams struct {
	ProjectID int64  `json:"project_id"`
	LayerHash string `json:"layer_hash"`
}

func (q *Queries) CreateDockerScannedLayerForProject(ctx context.Context, arg CreateDockerScannedLayerForProjectParams) (*DockerLayer, error) {
	row := q.db.QueryRow(ctx, createDockerScannedLayerForProject, arg.ProjectID, arg.LayerHash)
	var i DockerLayer
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ScanID,
		&i.LayerHash,
		&i.ScannedAt,
	)
	return &i, err
}

const deleteDockerImage = `-- name: DeleteDockerImage :exec
DELETE FROM docker_images
WHERE id = $1
`

func (q *Queries) DeleteDockerImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDockerImage, id)
	return err
}

const deleteDockerImageForProject = `-- name: DeleteDockerImageForProject :exec
DELETE FROM docker_images
WHERE project_id = $1
    AND docker_image = $2
`

type DeleteDockerImageForProjectParams struct {
	ProjectID   int64  `json:"project_id"`
	DockerImage string `json:"docker_image"`
}

func (q *Queries) DeleteDockerImageForProject(ctx context.Context, arg DeleteDockerImageForProjectParams) error {
	_, err := q.db.Exec(ctx, deleteDockerImageForProject, arg.ProjectID, arg.DockerImage)
	return err
}

const getDockerImage = `-- name: GetDockerImage :one
SELECT
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
FROM
    docker_images
WHERE
    id = $1
`

func (q *Queries) GetDockerImage(ctx context.Context, id int64) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, getDockerImage, id)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

const getDockerImagesForProject = `-- name: GetDockerImagesForProject :many
SELECT
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
FROM
    docker_images
WHERE
    project_id = $1
`

func (q *Queries) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*DockerImage, error) {
	rows, err := q.db.Query(ctx, getDockerImagesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DockerImage
	for rows.Next() {
		var i DockerImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DockerImage,
			&i.Username,
			&i.Password,
			&i.MinProbability,
			&i.ProbabilityDecreaseMultiplier,
			&i.ProbabilityIncreaseMultiplier,
			&i.EntropyThreshold,
			&i.LogisticGrowthRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerLayerScanForProject = `-- name: GetDockerLayerScanForProject :one
SELECT
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
FROM
    docker_scans
WHERE
    project_id = $1
    AND docker_image = $2
`

type GetDockerLayerScanForProjectParams struct {
	ProjectID   int64 `json:"project_id"`
	DockerImage int64 `json:"docker_image"`
}

func (q *Queries) GetDockerLayerScanForProject(ctx context.Context, arg GetDockerLayerScanForProjectParams) (*DockerScan, error) {
	row := q.db.QueryRow(ctx, getDockerLayerScanForProject, arg.ProjectID, arg.DockerImage)
	var i DockerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}

const getDockerLayersAndResultsForScan = `-- name: GetDockerLayersAndResultsForScan :many
SELECT
    docker_layers.id, docker_layers.project_id, docker_layers.scan_id, docker_layers.layer_hash, docker_layers.scanned_at,
    docker_results.id, docker_results.project_id, docker_results.layer_id, docker_results.name, docker_results.line, docker_results.line_number, docker_results.match, docker_results.probability, docker_results.username, docker_results.password, docker_results.filename, docker_results.created_at
FROM
    docker_layers
    LEFT JOIN docker_results ON docker_results.layer_id = docker_layers.id
WHERE
    docker_layers.scan_id = $1
`

type GetDockerLayersAndResultsForScanRow struct {
	DockerLayer  DockerLayer  `json:"docker_layer"`
	DockerResult DockerResult `json:"docker_result"`
}

func (q *Queries) GetDockerLayersAndResultsForScan(ctx context.Context, scanID int64) ([]*GetDockerLayersAndResultsForScanRow, error) {
	rows, err := q.db.Query(ctx, getDockerLayersAndResultsForScan, scanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDockerLayersAndResultsForScanRow
	for rows.Next() {
		var i GetDockerLayersAndResultsForScanRow
		if err := rows.Scan(
			&i.DockerLayer.ID,
			&i.DockerLayer.ProjectID,
			&i.DockerLayer.ScanID,
			&i.DockerLayer.LayerHash,
			&i.DockerLayer.ScannedAt,
			&i.DockerResult.ID,
			&i.DockerResult.ProjectID,
			&i.DockerResult.LayerID,
			&i.DockerResult.Name,
			&i.DockerResult.Line,
			&i.DockerResult.LineNumber,
			&i.DockerResult.Match,
			&i.DockerResult.Probability,
			&i.DockerResult.Username,
			&i.DockerResult.Password,
			&i.DockerResult.Filename,
			&i.DockerResult.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerScannedLayersForProject = `-- name: GetDockerScannedLayersForProject :many
SELECT
    layer_hash
FROM
    docker_layers
WHERE
    project_id = $1
`

func (q *Queries) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getDockerScannedLayersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var layer_hash string
		if err := rows.Scan(&layer_hash); err != nil {
			return nil, err
		}
		items = append(items, layer_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDockerImage = `-- name: UpdateDockerImage :one
UPDATE
    docker_images
SET
    docker_image = $2,
    username = $3,
    PASSWORD = $4,
    min_probability = $5,
    probability_decrease_multiplier = $6,
    probability_increase_multiplier = $7,
    entropy_threshold = $8,
    logistic_growth_rate = $9
WHERE
    id = $1
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type UpdateDockerImageParams struct {
	ID                            int64           `json:"id"`
	DockerImage                   string          `json:"docker_image"`
	Username                      sql.NullString  `json:"username"`
	Password                      sql.NullString  `json:"password"`
	MinProbability                sql.NullFloat64 `json:"min_probability"`
	ProbabilityDecreaseMultiplier sql.NullFloat64 `json:"probability_decrease_multiplier"`
	ProbabilityIncreaseMultiplier sql.NullFloat64 `json:"probability_increase_multiplier"`
	EntropyThreshold              sql.NullFloat64 `json:"entropy_threshold"`
	LogisticGrowthRate            sql.NullFloat64 `json:"logistic_growth_rate"`
}

func (q *Queries) UpdateDockerImage(ctx context.Context, arg UpdateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, updateDockerImage,
		arg.ID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
		arg.MinProbability,
		arg.ProbabilityDecreaseMultiplier,
		arg.ProbabilityIncreaseMultiplier,
		arg.EntropyThreshold,
		arg.LogisticGrowthRate,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

const updateDockerLayerScanForProject = `-- name: UpdateDockerLayerScanForProject :one
UPDATE
    docker_scans
SET
    finished = $3,
    scanned_layers = $4
WHERE
    project_id = $1
    AND docker_image = $2
RETURNING
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
`

type UpdateDockerLayerScanForProjectParams struct {
	ProjectID     int64 `json:"project_id"`
	DockerImage   int64 `json:"docker_image"`
	Finished      bool  `json:"finished"`
	ScannedLayers int32 `json:"scanned_layers"`
}

func (q *Queries) UpdateDockerLayerScanForProject(ctx context.Context, arg UpdateDockerLayerScanForProjectParams) (*DockerScan, error) {
	row := q.db.QueryRow(ctx, updateDockerLayerScanForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Finished,
		arg.ScannedLayers,
	)
	var i DockerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}
