// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: docker.sql

package queries

import (
	"context"
	"database/sql"
)

const createDockerImageForProject = `-- name: CreateDockerImageForProject :one
INSERT INTO project_docker_images(project_id, docker_image, username, PASSWORD)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, docker_image, username, password, min_probability, use_default_words_reduce_probability, use_default_words_increase_probability, use_default_passwords_completely_ignore, use_default_usernames_completely_ignore, probaility_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageForProjectParams struct {
	ProjectID   int64
	DockerImage string
	Username    sql.NullString
	Password    sql.NullString
}

func (q *Queries) CreateDockerImageForProject(ctx context.Context, arg CreateDockerImageForProjectParams) (*ProjectDockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImageForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
	)
	var i ProjectDockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.UseDefaultWordsReduceProbability,
		&i.UseDefaultWordsIncreaseProbability,
		&i.UseDefaultPasswordsCompletelyIgnore,
		&i.UseDefaultUsernamesCompletelyIgnore,
		&i.ProbailityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

type CreateDockerLayerResultsForProjectParams struct {
	ProjectID   int64
	Layer       int64
	Name        string
	Line        string
	LineNumber  int32
	Match       string
	Probability float64
	Username    sql.NullString
	Password    sql.NullString
	Filename    string
}

const createDockerLayerScanForProject = `-- name: CreateDockerLayerScanForProject :one
INSERT INTO project_docker_layer_scans(project_id, docker_image, layers_to_scan)
    VALUES ($1, $2, $3)
RETURNING
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
`

type CreateDockerLayerScanForProjectParams struct {
	ProjectID    int64
	DockerImage  int64
	LayersToScan int32
}

func (q *Queries) CreateDockerLayerScanForProject(ctx context.Context, arg CreateDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error) {
	row := q.db.QueryRow(ctx, createDockerLayerScanForProject, arg.ProjectID, arg.DockerImage, arg.LayersToScan)
	var i ProjectDockerLayerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}

const createDockerScannedLayerForProject = `-- name: CreateDockerScannedLayerForProject :one
INSERT INTO project_docker_scanned_layers(project_id, layer_hash)
    VALUES ($1, $2)
RETURNING
    id, project_id, layer_hash, scanned_at
`

type CreateDockerScannedLayerForProjectParams struct {
	ProjectID int64
	LayerHash string
}

func (q *Queries) CreateDockerScannedLayerForProject(ctx context.Context, arg CreateDockerScannedLayerForProjectParams) (*ProjectDockerScannedLayer, error) {
	row := q.db.QueryRow(ctx, createDockerScannedLayerForProject, arg.ProjectID, arg.LayerHash)
	var i ProjectDockerScannedLayer
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.LayerHash,
		&i.ScannedAt,
	)
	return &i, err
}

const deleteDockerImageForProject = `-- name: DeleteDockerImageForProject :exec
DELETE FROM project_docker_images
WHERE project_id = $1
    AND docker_image = $2
`

type DeleteDockerImageForProjectParams struct {
	ProjectID   int64
	DockerImage string
}

func (q *Queries) DeleteDockerImageForProject(ctx context.Context, arg DeleteDockerImageForProjectParams) error {
	_, err := q.db.Exec(ctx, deleteDockerImageForProject, arg.ProjectID, arg.DockerImage)
	return err
}

const getDockerImagesForProject = `-- name: GetDockerImagesForProject :many
SELECT
    id, project_id, docker_image, username, password, min_probability, use_default_words_reduce_probability, use_default_words_increase_probability, use_default_passwords_completely_ignore, use_default_usernames_completely_ignore, probaility_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
FROM
    project_docker_images
WHERE
    project_id = $1
`

func (q *Queries) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*ProjectDockerImage, error) {
	rows, err := q.db.Query(ctx, getDockerImagesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ProjectDockerImage
	for rows.Next() {
		var i ProjectDockerImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DockerImage,
			&i.Username,
			&i.Password,
			&i.MinProbability,
			&i.UseDefaultWordsReduceProbability,
			&i.UseDefaultWordsIncreaseProbability,
			&i.UseDefaultPasswordsCompletelyIgnore,
			&i.UseDefaultUsernamesCompletelyIgnore,
			&i.ProbailityDecreaseMultiplier,
			&i.ProbabilityIncreaseMultiplier,
			&i.EntropyThreshold,
			&i.LogisticGrowthRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerLayerScanForProject = `-- name: GetDockerLayerScanForProject :one
SELECT
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
FROM
    project_docker_layer_scans
WHERE
    project_id = $1
    AND docker_image = $2
`

type GetDockerLayerScanForProjectParams struct {
	ProjectID   int64
	DockerImage int64
}

func (q *Queries) GetDockerLayerScanForProject(ctx context.Context, arg GetDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error) {
	row := q.db.QueryRow(ctx, getDockerLayerScanForProject, arg.ProjectID, arg.DockerImage)
	var i ProjectDockerLayerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}

const getDockerScannedLayersForProject = `-- name: GetDockerScannedLayersForProject :many
SELECT
    layer_hash
FROM
    project_docker_scanned_layers
WHERE
    project_id = $1
`

func (q *Queries) GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getDockerScannedLayersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var layer_hash string
		if err := rows.Scan(&layer_hash); err != nil {
			return nil, err
		}
		items = append(items, layer_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDockerLayerScanForProject = `-- name: UpdateDockerLayerScanForProject :one
UPDATE
    project_docker_layer_scans
SET
    finished = $3,
    scanned_layers = $4
WHERE
    project_id = $1
    AND docker_image = $2
RETURNING
    id, project_id, docker_image, finished, scanned_layers, layers_to_scan, created_at
`

type UpdateDockerLayerScanForProjectParams struct {
	ProjectID     int64
	DockerImage   int64
	Finished      bool
	ScannedLayers int32
}

func (q *Queries) UpdateDockerLayerScanForProject(ctx context.Context, arg UpdateDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error) {
	row := q.db.QueryRow(ctx, updateDockerLayerScanForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Finished,
		arg.ScannedLayers,
	)
	var i ProjectDockerLayerScan
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Finished,
		&i.ScannedLayers,
		&i.LayersToScan,
		&i.CreatedAt,
	)
	return &i, err
}
