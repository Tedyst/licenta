// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: docker.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDockerImage = `-- name: CreateDockerImage :one
INSERT INTO docker_images(project_id, docker_image, username, PASSWORD, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageParams struct {
	ProjectID                     int64           `json:"project_id"`
	DockerImage                   string          `json:"docker_image"`
	Username                      sql.NullString  `json:"username"`
	Password                      sql.NullString  `json:"password"`
	MinProbability                sql.NullFloat64 `json:"min_probability"`
	ProbabilityDecreaseMultiplier sql.NullFloat64 `json:"probability_decrease_multiplier"`
	ProbabilityIncreaseMultiplier sql.NullFloat64 `json:"probability_increase_multiplier"`
	EntropyThreshold              sql.NullFloat64 `json:"entropy_threshold"`
	LogisticGrowthRate            sql.NullFloat64 `json:"logistic_growth_rate"`
}

func (q *Queries) CreateDockerImage(ctx context.Context, arg CreateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImage,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
		arg.MinProbability,
		arg.ProbabilityDecreaseMultiplier,
		arg.ProbabilityIncreaseMultiplier,
		arg.EntropyThreshold,
		arg.LogisticGrowthRate,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

const createDockerImageForProject = `-- name: CreateDockerImageForProject :one
INSERT INTO docker_images(project_id, docker_image, username, PASSWORD)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageForProjectParams struct {
	ProjectID   int64          `json:"project_id"`
	DockerImage string         `json:"docker_image"`
	Username    sql.NullString `json:"username"`
	Password    sql.NullString `json:"password"`
}

func (q *Queries) CreateDockerImageForProject(ctx context.Context, arg CreateDockerImageForProjectParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImageForProject,
		arg.ProjectID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

type CreateDockerLayerResultsForProjectParams struct {
	ProjectID     int64          `json:"project_id"`
	LayerID       int64          `json:"layer_id"`
	Name          string         `json:"name"`
	Line          string         `json:"line"`
	LineNumber    int32          `json:"line_number"`
	Match         string         `json:"match"`
	Probability   float64        `json:"probability"`
	Username      sql.NullString `json:"username"`
	Password      sql.NullString `json:"password"`
	Filename      string         `json:"filename"`
	PreviousLines string         `json:"previous_lines"`
}

const createDockerScannedLayerForProject = `-- name: CreateDockerScannedLayerForProject :one
INSERT INTO docker_layers(layer_hash, image_id)
    VALUES ($1, $2)
RETURNING
    id, image_id, layer_hash, scanned_at
`

type CreateDockerScannedLayerForProjectParams struct {
	LayerHash string `json:"layer_hash"`
	ImageID   int64  `json:"image_id"`
}

func (q *Queries) CreateDockerScannedLayerForProject(ctx context.Context, arg CreateDockerScannedLayerForProjectParams) (*DockerLayer, error) {
	row := q.db.QueryRow(ctx, createDockerScannedLayerForProject, arg.LayerHash, arg.ImageID)
	var i DockerLayer
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.LayerHash,
		&i.ScannedAt,
	)
	return &i, err
}

const deleteDockerImage = `-- name: DeleteDockerImage :exec
DELETE FROM docker_images
WHERE id = $1
`

func (q *Queries) DeleteDockerImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDockerImage, id)
	return err
}

const deleteDockerImageForProject = `-- name: DeleteDockerImageForProject :exec
DELETE FROM docker_images
WHERE project_id = $1
    AND docker_image = $2
`

type DeleteDockerImageForProjectParams struct {
	ProjectID   int64  `json:"project_id"`
	DockerImage string `json:"docker_image"`
}

func (q *Queries) DeleteDockerImageForProject(ctx context.Context, arg DeleteDockerImageForProjectParams) error {
	_, err := q.db.Exec(ctx, deleteDockerImageForProject, arg.ProjectID, arg.DockerImage)
	return err
}

const getDockerImage = `-- name: GetDockerImage :one
SELECT
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
FROM
    docker_images
WHERE
    id = $1
`

func (q *Queries) GetDockerImage(ctx context.Context, id int64) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, getDockerImage, id)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

const getDockerImagesForProject = `-- name: GetDockerImagesForProject :many
SELECT
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
FROM
    docker_images
WHERE
    project_id = $1
`

func (q *Queries) GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*DockerImage, error) {
	rows, err := q.db.Query(ctx, getDockerImagesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DockerImage
	for rows.Next() {
		var i DockerImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DockerImage,
			&i.Username,
			&i.Password,
			&i.MinProbability,
			&i.ProbabilityDecreaseMultiplier,
			&i.ProbabilityIncreaseMultiplier,
			&i.EntropyThreshold,
			&i.LogisticGrowthRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerLayersAndResultsForImage = `-- name: GetDockerLayersAndResultsForImage :many
SELECT
    lid, image_id, layer_hash, scanned_at, id, project_id, layer_id, name, line, line_number, previous_lines, match, probability, username, password, filename, created_at
FROM ((
        SELECT
            docker_layers.id AS lid,
            docker_layers.image_id,
            docker_layers.layer_hash,
            docker_layers.scanned_at,
            docker_results.id, docker_results.project_id, docker_results.layer_id, docker_results.name, docker_results.line, docker_results.line_number, docker_results.previous_lines, docker_results.match, docker_results.probability, docker_results.username, docker_results.password, docker_results.filename, docker_results.created_at
        FROM
            docker_layers
        LEFT JOIN docker_results ON docker_layers.id = docker_results.layer_id
    WHERE
        docker_layers.image_id = $1
        AND docker_layers.id IS NULL
    ORDER BY
        docker_layers.scanned_at DESC
    LIMIT 25)
UNION (
    SELECT
        docker_layers.id AS lid,
        docker_layers.image_id,
        docker_layers.layer_hash,
        docker_layers.scanned_at,
        docker_results.id, docker_results.project_id, docker_results.layer_id, docker_results.name, docker_results.line, docker_results.line_number, docker_results.previous_lines, docker_results.match, docker_results.probability, docker_results.username, docker_results.password, docker_results.filename, docker_results.created_at
    FROM
        docker_layers
    LEFT JOIN docker_results ON docker_layers.id = docker_results.layer_id
WHERE
    docker_layers.image_id = $1
    AND docker_layers.id IS NOT NULL)) AS asd
ORDER BY
    scanned_at DESC
`

type GetDockerLayersAndResultsForImageRow struct {
	Lid           int64              `json:"lid"`
	ImageID       int64              `json:"image_id"`
	LayerHash     string             `json:"layer_hash"`
	ScannedAt     pgtype.Timestamptz `json:"scanned_at"`
	ID            pgtype.Int8        `json:"id"`
	ProjectID     sql.NullInt64      `json:"project_id"`
	LayerID       sql.NullInt64      `json:"layer_id"`
	Name          sql.NullString     `json:"name"`
	Line          sql.NullString     `json:"line"`
	LineNumber    sql.NullInt32      `json:"line_number"`
	PreviousLines sql.NullString     `json:"previous_lines"`
	Match         sql.NullString     `json:"match"`
	Probability   sql.NullFloat64    `json:"probability"`
	Username      sql.NullString     `json:"username"`
	Password      sql.NullString     `json:"password"`
	Filename      sql.NullString     `json:"filename"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetDockerLayersAndResultsForImage(ctx context.Context, imageID int64) ([]*GetDockerLayersAndResultsForImageRow, error) {
	rows, err := q.db.Query(ctx, getDockerLayersAndResultsForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDockerLayersAndResultsForImageRow
	for rows.Next() {
		var i GetDockerLayersAndResultsForImageRow
		if err := rows.Scan(
			&i.Lid,
			&i.ImageID,
			&i.LayerHash,
			&i.ScannedAt,
			&i.ID,
			&i.ProjectID,
			&i.LayerID,
			&i.Name,
			&i.Line,
			&i.LineNumber,
			&i.PreviousLines,
			&i.Match,
			&i.Probability,
			&i.Username,
			&i.Password,
			&i.Filename,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerScannedLayersForImage = `-- name: GetDockerScannedLayersForImage :many
SELECT
    layer_hash
FROM
    docker_layers
WHERE
    image_id = $1
`

func (q *Queries) GetDockerScannedLayersForImage(ctx context.Context, imageID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getDockerScannedLayersForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var layer_hash string
		if err := rows.Scan(&layer_hash); err != nil {
			return nil, err
		}
		items = append(items, layer_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDockerImage = `-- name: UpdateDockerImage :one
UPDATE
    docker_images
SET
    docker_image = $2,
    username = $3,
    PASSWORD = $4,
    min_probability = $5,
    probability_decrease_multiplier = $6,
    probability_increase_multiplier = $7,
    entropy_threshold = $8,
    logistic_growth_rate = $9
WHERE
    id = $1
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type UpdateDockerImageParams struct {
	ID                            int64           `json:"id"`
	DockerImage                   string          `json:"docker_image"`
	Username                      sql.NullString  `json:"username"`
	Password                      sql.NullString  `json:"password"`
	MinProbability                sql.NullFloat64 `json:"min_probability"`
	ProbabilityDecreaseMultiplier sql.NullFloat64 `json:"probability_decrease_multiplier"`
	ProbabilityIncreaseMultiplier sql.NullFloat64 `json:"probability_increase_multiplier"`
	EntropyThreshold              sql.NullFloat64 `json:"entropy_threshold"`
	LogisticGrowthRate            sql.NullFloat64 `json:"logistic_growth_rate"`
}

func (q *Queries) UpdateDockerImage(ctx context.Context, arg UpdateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, updateDockerImage,
		arg.ID,
		arg.DockerImage,
		arg.Username,
		arg.Password,
		arg.MinProbability,
		arg.ProbabilityDecreaseMultiplier,
		arg.ProbabilityIncreaseMultiplier,
		arg.EntropyThreshold,
		arg.LogisticGrowthRate,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}
