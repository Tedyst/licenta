// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: docker.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDockerImage = `-- name: CreateDockerImage :one
INSERT INTO docker_images(project_id, docker_image, username, PASSWORD)
    VALUES ($1, $2, encrypt_data($1, $3, $4), encrypt_data($1, $3, $5))
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type CreateDockerImageParams struct {
	ProjectID   int64  `json:"project_id"`
	DockerImage string `json:"docker_image"`
	SaltKey     string `json:"salt_key"`
	Username    string `json:"username"`
	Password    string `json:"password"`
}

func (q *Queries) CreateDockerImage(ctx context.Context, arg CreateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, createDockerImage,
		arg.ProjectID,
		arg.DockerImage,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}

type CreateDockerLayerResultsForProjectParams struct {
	LayerID       int64          `json:"layer_id"`
	Name          string         `json:"name"`
	Line          string         `json:"line"`
	LineNumber    int32          `json:"line_number"`
	Match         string         `json:"match"`
	Probability   float64        `json:"probability"`
	Username      sql.NullString `json:"username"`
	Password      sql.NullString `json:"password"`
	Filename      string         `json:"filename"`
	PreviousLines string         `json:"previous_lines"`
}

const createDockerScan = `-- name: CreateDockerScan :one
INSERT INTO docker_scans(image_id, scan_id)
    VALUES ($1, $2)
RETURNING
    id, scan_id, image_id
`

type CreateDockerScanParams struct {
	ImageID int64 `json:"image_id"`
	ScanID  int64 `json:"scan_id"`
}

func (q *Queries) CreateDockerScan(ctx context.Context, arg CreateDockerScanParams) (*DockerScan, error) {
	row := q.db.QueryRow(ctx, createDockerScan, arg.ImageID, arg.ScanID)
	var i DockerScan
	err := row.Scan(&i.ID, &i.ScanID, &i.ImageID)
	return &i, err
}

const createDockerScannedLayerForProject = `-- name: CreateDockerScannedLayerForProject :one
INSERT INTO docker_layers(layer_hash, image_id)
    VALUES ($1, $2)
RETURNING
    id, image_id, layer_hash, scanned_at
`

type CreateDockerScannedLayerForProjectParams struct {
	LayerHash string `json:"layer_hash"`
	ImageID   int64  `json:"image_id"`
}

func (q *Queries) CreateDockerScannedLayerForProject(ctx context.Context, arg CreateDockerScannedLayerForProjectParams) (*DockerLayer, error) {
	row := q.db.QueryRow(ctx, createDockerScannedLayerForProject, arg.LayerHash, arg.ImageID)
	var i DockerLayer
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.LayerHash,
		&i.ScannedAt,
	)
	return &i, err
}

const deleteDockerImage = `-- name: DeleteDockerImage :exec
DELETE FROM docker_images
WHERE id = $1
`

func (q *Queries) DeleteDockerImage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDockerImage, id)
	return err
}

const getDockerImage = `-- name: GetDockerImage :one
SELECT
    id,
    project_id,
    docker_image,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD
FROM
    docker_images
WHERE
    id = $1
`

type GetDockerImageParams struct {
	ID      int64  `json:"id"`
	SaltKey string `json:"salt_key"`
}

type GetDockerImageRow struct {
	ID          int64  `json:"id"`
	ProjectID   int64  `json:"project_id"`
	DockerImage string `json:"docker_image"`
	Username    string `json:"username"`
	Password    string `json:"password"`
}

func (q *Queries) GetDockerImage(ctx context.Context, arg GetDockerImageParams) (*GetDockerImageRow, error) {
	row := q.db.QueryRow(ctx, getDockerImage, arg.ID, arg.SaltKey)
	var i GetDockerImageRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
	)
	return &i, err
}

const getDockerImagesForProject = `-- name: GetDockerImagesForProject :many
SELECT
    id,
    project_id,
    docker_image,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD
FROM
    docker_images
WHERE
    project_id = $1
`

type GetDockerImagesForProjectParams struct {
	ProjectID int64  `json:"project_id"`
	SaltKey   string `json:"salt_key"`
}

type GetDockerImagesForProjectRow struct {
	ID          int64  `json:"id"`
	ProjectID   int64  `json:"project_id"`
	DockerImage string `json:"docker_image"`
	Username    string `json:"username"`
	Password    string `json:"password"`
}

func (q *Queries) GetDockerImagesForProject(ctx context.Context, arg GetDockerImagesForProjectParams) ([]*GetDockerImagesForProjectRow, error) {
	rows, err := q.db.Query(ctx, getDockerImagesForProject, arg.ProjectID, arg.SaltKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDockerImagesForProjectRow
	for rows.Next() {
		var i GetDockerImagesForProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DockerImage,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerLayersAndResultsForImage = `-- name: GetDockerLayersAndResultsForImage :many
SELECT
    lid, image_id, layer_hash, scanned_at, id, layer_id, name, line, line_number, previous_lines, match, probability, username, password, filename, created_at
FROM ((
        SELECT
            docker_layers.id AS lid,
            docker_layers.image_id,
            docker_layers.layer_hash,
            docker_layers.scanned_at,
            docker_results.id, docker_results.layer_id, docker_results.name, docker_results.line, docker_results.line_number, docker_results.previous_lines, docker_results.match, docker_results.probability, docker_results.username, docker_results.password, docker_results.filename, docker_results.created_at
        FROM
            docker_layers
        LEFT JOIN docker_results ON docker_layers.id = docker_results.layer_id
    WHERE
        docker_layers.image_id = $1
        AND docker_layers.id IS NULL
    ORDER BY
        docker_layers.scanned_at DESC
    LIMIT 25)
UNION (
    SELECT
        docker_layers.id AS lid,
        docker_layers.image_id,
        docker_layers.layer_hash,
        docker_layers.scanned_at,
        docker_results.id, docker_results.layer_id, docker_results.name, docker_results.line, docker_results.line_number, docker_results.previous_lines, docker_results.match, docker_results.probability, docker_results.username, docker_results.password, docker_results.filename, docker_results.created_at
    FROM
        docker_layers
    LEFT JOIN docker_results ON docker_layers.id = docker_results.layer_id
WHERE
    docker_layers.image_id = $1
    AND docker_layers.id IS NOT NULL)) AS asd
ORDER BY
    scanned_at DESC
`

type GetDockerLayersAndResultsForImageRow struct {
	Lid           int64              `json:"lid"`
	ImageID       int64              `json:"image_id"`
	LayerHash     string             `json:"layer_hash"`
	ScannedAt     pgtype.Timestamptz `json:"scanned_at"`
	ID            pgtype.Int8        `json:"id"`
	LayerID       sql.NullInt64      `json:"layer_id"`
	Name          sql.NullString     `json:"name"`
	Line          sql.NullString     `json:"line"`
	LineNumber    sql.NullInt32      `json:"line_number"`
	PreviousLines sql.NullString     `json:"previous_lines"`
	Match         sql.NullString     `json:"match"`
	Probability   sql.NullFloat64    `json:"probability"`
	Username      sql.NullString     `json:"username"`
	Password      sql.NullString     `json:"password"`
	Filename      sql.NullString     `json:"filename"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetDockerLayersAndResultsForImage(ctx context.Context, imageID int64) ([]*GetDockerLayersAndResultsForImageRow, error) {
	rows, err := q.db.Query(ctx, getDockerLayersAndResultsForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDockerLayersAndResultsForImageRow
	for rows.Next() {
		var i GetDockerLayersAndResultsForImageRow
		if err := rows.Scan(
			&i.Lid,
			&i.ImageID,
			&i.LayerHash,
			&i.ScannedAt,
			&i.ID,
			&i.LayerID,
			&i.Name,
			&i.Line,
			&i.LineNumber,
			&i.PreviousLines,
			&i.Match,
			&i.Probability,
			&i.Username,
			&i.Password,
			&i.Filename,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDockerScanByScanAndRepo = `-- name: GetDockerScanByScanAndRepo :one
SELECT
    docker_scans.id, docker_scans.scan_id, docker_scans.image_id,
    scans.id, scans.scan_group_id, scans.scan_type, scans.status, scans.error, scans.worker_id, scans.created_at, scans.ended_at
FROM
    docker_scans
    INNER JOIN scans ON scans.id = docker_scans.scan_id
WHERE
    scans.scan_group_id = $1
    AND image_id = $2
`

type GetDockerScanByScanAndRepoParams struct {
	ScanGroupID int64 `json:"scan_group_id"`
	ImageID     int64 `json:"image_id"`
}

type GetDockerScanByScanAndRepoRow struct {
	DockerScan DockerScan `json:"docker_scan"`
	Scan       Scan       `json:"scan"`
}

func (q *Queries) GetDockerScanByScanAndRepo(ctx context.Context, arg GetDockerScanByScanAndRepoParams) (*GetDockerScanByScanAndRepoRow, error) {
	row := q.db.QueryRow(ctx, getDockerScanByScanAndRepo, arg.ScanGroupID, arg.ImageID)
	var i GetDockerScanByScanAndRepoRow
	err := row.Scan(
		&i.DockerScan.ID,
		&i.DockerScan.ScanID,
		&i.DockerScan.ImageID,
		&i.Scan.ID,
		&i.Scan.ScanGroupID,
		&i.Scan.ScanType,
		&i.Scan.Status,
		&i.Scan.Error,
		&i.Scan.WorkerID,
		&i.Scan.CreatedAt,
		&i.Scan.EndedAt,
	)
	return &i, err
}

const getDockerScannedLayersForImage = `-- name: GetDockerScannedLayersForImage :many
SELECT
    layer_hash
FROM
    docker_layers
WHERE
    image_id = $1
`

func (q *Queries) GetDockerScannedLayersForImage(ctx context.Context, imageID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getDockerScannedLayersForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var layer_hash string
		if err := rows.Scan(&layer_hash); err != nil {
			return nil, err
		}
		items = append(items, layer_hash)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDockerImage = `-- name: UpdateDockerImage :one
UPDATE
    docker_images
SET
    docker_image = $2,
    username = encrypt_data($3, $4, $5),
    PASSWORD = encrypt_data($3, $4, $6)
WHERE
    id = $1
RETURNING
    id, project_id, docker_image, username, password, min_probability, probability_decrease_multiplier, probability_increase_multiplier, entropy_threshold, logistic_growth_rate, created_at
`

type UpdateDockerImageParams struct {
	ID          int64  `json:"id"`
	DockerImage string `json:"docker_image"`
	ProjectID   int64  `json:"project_id"`
	SaltKey     string `json:"salt_key"`
	Username    string `json:"username"`
	Password    string `json:"password"`
}

func (q *Queries) UpdateDockerImage(ctx context.Context, arg UpdateDockerImageParams) (*DockerImage, error) {
	row := q.db.QueryRow(ctx, updateDockerImage,
		arg.ID,
		arg.DockerImage,
		arg.ProjectID,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	var i DockerImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DockerImage,
		&i.Username,
		&i.Password,
		&i.MinProbability,
		&i.ProbabilityDecreaseMultiplier,
		&i.ProbabilityIncreaseMultiplier,
		&i.EntropyThreshold,
		&i.LogisticGrowthRate,
		&i.CreatedAt,
	)
	return &i, err
}
