// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: resetpassword.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO reset_password_tokens(id, user_id)
    VALUES ($1, $2)
RETURNING
    id, user_id, valid, created_at
`

type CreateResetPasswordTokenParams struct {
	ID     uuid.UUID `json:"id"`
	UserID int64     `json:"user_id"`
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (*ResetPasswordToken, error) {
	row := q.db.QueryRow(ctx, createResetPasswordToken, arg.ID, arg.UserID)
	var i ResetPasswordToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Valid,
		&i.CreatedAt,
	)
	return &i, err
}

const getResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT
    id, user_id, valid, created_at
FROM
    reset_password_tokens
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*ResetPasswordToken, error) {
	row := q.db.QueryRow(ctx, getResetPasswordToken, id)
	var i ResetPasswordToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Valid,
		&i.CreatedAt,
	)
	return &i, err
}

const invalidateResetPasswordToken = `-- name: InvalidateResetPasswordToken :exec
UPDATE
    reset_password_tokens
SET
    valid = FALSE
WHERE
    id = $1
`

func (q *Queries) InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, invalidateResetPasswordToken, id)
	return err
}
