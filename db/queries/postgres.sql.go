// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: postgres.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostgresScan = `-- name: CreatePostgresScan :one
INSERT INTO postgres_scan(postgres_database_id, status)
    VALUES ($1, $2)
RETURNING
    id, postgres_database_id, status, error, created_at, ended_at
`

type CreatePostgresScanParams struct {
	PostgresDatabaseID int64
	Status             int32
}

func (q *Queries) CreatePostgresScan(ctx context.Context, arg CreatePostgresScanParams) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, createPostgresScan, arg.PostgresDatabaseID, arg.Status)
	var i PostgresScan
	err := row.Scan(
		&i.ID,
		&i.PostgresDatabaseID,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return &i, err
}

const createPostgresScanBruteforceResult = `-- name: CreatePostgresScanBruteforceResult :one
INSERT INTO postgres_scan_bruteforce_results(postgres_scan_id, username, PASSWORD, tried, total)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, postgres_scan_id, username, password, total, tried, created_at
`

type CreatePostgresScanBruteforceResultParams struct {
	PostgresScanID int64
	Username       string
	Password       sql.NullString
	Tried          int32
	Total          int32
}

func (q *Queries) CreatePostgresScanBruteforceResult(ctx context.Context, arg CreatePostgresScanBruteforceResultParams) (*PostgresScanBruteforceResult, error) {
	row := q.db.QueryRow(ctx, createPostgresScanBruteforceResult,
		arg.PostgresScanID,
		arg.Username,
		arg.Password,
		arg.Tried,
		arg.Total,
	)
	var i PostgresScanBruteforceResult
	err := row.Scan(
		&i.ID,
		&i.PostgresScanID,
		&i.Username,
		&i.Password,
		&i.Total,
		&i.Tried,
		&i.CreatedAt,
	)
	return &i, err
}

const createPostgresScanResult = `-- name: CreatePostgresScanResult :one
INSERT INTO postgres_scan_results(postgres_scan_id, severity, message)
    VALUES ($1, $2, $3)
RETURNING
    id, postgres_scan_id, severity, message, created_at
`

type CreatePostgresScanResultParams struct {
	PostgresScanID int64
	Severity       int32
	Message        string
}

func (q *Queries) CreatePostgresScanResult(ctx context.Context, arg CreatePostgresScanResultParams) (*PostgresScanResult, error) {
	row := q.db.QueryRow(ctx, createPostgresScanResult, arg.PostgresScanID, arg.Severity, arg.Message)
	var i PostgresScanResult
	err := row.Scan(
		&i.ID,
		&i.PostgresScanID,
		&i.Severity,
		&i.Message,
		&i.CreatedAt,
	)
	return &i, err
}

const getPostgresDatabase = `-- name: GetPostgresDatabase :one
SELECT
    id, project_id, host, port, database_name, username, password, created_at
FROM
    postgres_databases
WHERE
    id = $1
`

func (q *Queries) GetPostgresDatabase(ctx context.Context, id int64) (*PostgresDatabase, error) {
	row := q.db.QueryRow(ctx, getPostgresDatabase, id)
	var i PostgresDatabase
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Host,
		&i.Port,
		&i.DatabaseName,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const getPostgresScan = `-- name: GetPostgresScan :one
SELECT
    id, postgres_database_id, status, error, created_at, ended_at
FROM
    postgres_scan
WHERE
    id = $1
`

func (q *Queries) GetPostgresScan(ctx context.Context, id int64) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, getPostgresScan, id)
	var i PostgresScan
	err := row.Scan(
		&i.ID,
		&i.PostgresDatabaseID,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return &i, err
}

const getPostgresScanResults = `-- name: GetPostgresScanResults :many
SELECT
    id, postgres_scan_id, severity, message, created_at
FROM
    postgres_scan_results
WHERE
    postgres_scan_id = $1
`

func (q *Queries) GetPostgresScanResults(ctx context.Context, postgresScanID int64) ([]*PostgresScanResult, error) {
	rows, err := q.db.Query(ctx, getPostgresScanResults, postgresScanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PostgresScanResult
	for rows.Next() {
		var i PostgresScanResult
		if err := rows.Scan(
			&i.ID,
			&i.PostgresScanID,
			&i.Severity,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostgresScanBruteforceResult = `-- name: UpdatePostgresScanBruteforceResult :exec
UPDATE
    postgres_scan_bruteforce_results
SET
    PASSWORD = $2,
    tried = $3,
    total = $4
WHERE
    id = $1
`

type UpdatePostgresScanBruteforceResultParams struct {
	ID       int64
	Password sql.NullString
	Tried    int32
	Total    int32
}

func (q *Queries) UpdatePostgresScanBruteforceResult(ctx context.Context, arg UpdatePostgresScanBruteforceResultParams) error {
	_, err := q.db.Exec(ctx, updatePostgresScanBruteforceResult,
		arg.ID,
		arg.Password,
		arg.Tried,
		arg.Total,
	)
	return err
}

const updatePostgresScanStatus = `-- name: UpdatePostgresScanStatus :exec
UPDATE
    postgres_scan
SET
    status = $2,
    error = $3,
    ended_at = $4
WHERE
    id = $1
`

type UpdatePostgresScanStatusParams struct {
	ID      int64
	Status  int32
	Error   sql.NullString
	EndedAt pgtype.Timestamptz
}

func (q *Queries) UpdatePostgresScanStatus(ctx context.Context, arg UpdatePostgresScanStatusParams) error {
	_, err := q.db.Exec(ctx, updatePostgresScanStatus,
		arg.ID,
		arg.Status,
		arg.Error,
		arg.EndedAt,
	)
	return err
}
