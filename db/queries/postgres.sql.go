// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: postgres.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostgresDatabase = `-- name: CreatePostgresDatabase :one
INSERT INTO postgres_databases(project_id, database_name, host, port, username, PASSWORD, version)
    VALUES ($1, $2, $3, $4, encrypt_data($1, $6, $7), encrypt_data($1, $6, $8), $5)
RETURNING
    id, project_id, host, port, database_name, username, password, version, created_at
`

type CreatePostgresDatabaseParams struct {
	ProjectID    int64          `json:"project_id"`
	DatabaseName string         `json:"database_name"`
	Host         string         `json:"host"`
	Port         int32          `json:"port"`
	Version      sql.NullString `json:"version"`
	SaltKey      string         `json:"salt_key"`
	Username     string         `json:"username"`
	Password     string         `json:"password"`
}

func (q *Queries) CreatePostgresDatabase(ctx context.Context, arg CreatePostgresDatabaseParams) (*PostgresDatabase, error) {
	row := q.db.QueryRow(ctx, createPostgresDatabase,
		arg.ProjectID,
		arg.DatabaseName,
		arg.Host,
		arg.Port,
		arg.Version,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	var i PostgresDatabase
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Host,
		&i.Port,
		&i.DatabaseName,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.CreatedAt,
	)
	return &i, err
}

const createPostgresScan = `-- name: CreatePostgresScan :one
INSERT INTO postgres_scans(scan_id, database_id)
    VALUES ($1, $2)
RETURNING
    id, scan_id, database_id
`

type CreatePostgresScanParams struct {
	ScanID     int64 `json:"scan_id"`
	DatabaseID int64 `json:"database_id"`
}

func (q *Queries) CreatePostgresScan(ctx context.Context, arg CreatePostgresScanParams) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, createPostgresScan, arg.ScanID, arg.DatabaseID)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const deletePostgresDatabase = `-- name: DeletePostgresDatabase :exec
DELETE FROM postgres_databases
WHERE id = $1
`

func (q *Queries) DeletePostgresDatabase(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePostgresDatabase, id)
	return err
}

const getPostgresDatabase = `-- name: GetPostgresDatabase :one
SELECT
    id,
    project_id,
    host,
    port,
    database_name,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD,
    version,
    created_at,
(
        SELECT
            COUNT(*)
        FROM
            postgres_scans
        WHERE
            postgres_scans.database_id = postgres_databases.id) AS scan_count
FROM
    postgres_databases
WHERE
    postgres_databases.id = $1
`

type GetPostgresDatabaseParams struct {
	ID      int64  `json:"id"`
	SaltKey string `json:"salt_key"`
}

type GetPostgresDatabaseRow struct {
	ID           int64              `json:"id"`
	ProjectID    int64              `json:"project_id"`
	Host         string             `json:"host"`
	Port         int32              `json:"port"`
	DatabaseName string             `json:"database_name"`
	Username     string             `json:"username"`
	Password     string             `json:"password"`
	Version      sql.NullString     `json:"version"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	ScanCount    int64              `json:"scan_count"`
}

func (q *Queries) GetPostgresDatabase(ctx context.Context, arg GetPostgresDatabaseParams) (*GetPostgresDatabaseRow, error) {
	row := q.db.QueryRow(ctx, getPostgresDatabase, arg.ID, arg.SaltKey)
	var i GetPostgresDatabaseRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Host,
		&i.Port,
		&i.DatabaseName,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.CreatedAt,
		&i.ScanCount,
	)
	return &i, err
}

const getPostgresDatabasesForProject = `-- name: GetPostgresDatabasesForProject :many
SELECT
    id,
    project_id,
    host,
    port,
    database_name,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD,
    version,
    created_at
FROM
    postgres_databases
WHERE
    project_id = $1
`

type GetPostgresDatabasesForProjectParams struct {
	ProjectID int64  `json:"project_id"`
	SaltKey   string `json:"salt_key"`
}

type GetPostgresDatabasesForProjectRow struct {
	ID           int64              `json:"id"`
	ProjectID    int64              `json:"project_id"`
	Host         string             `json:"host"`
	Port         int32              `json:"port"`
	DatabaseName string             `json:"database_name"`
	Username     string             `json:"username"`
	Password     string             `json:"password"`
	Version      sql.NullString     `json:"version"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetPostgresDatabasesForProject(ctx context.Context, arg GetPostgresDatabasesForProjectParams) ([]*GetPostgresDatabasesForProjectRow, error) {
	rows, err := q.db.Query(ctx, getPostgresDatabasesForProject, arg.ProjectID, arg.SaltKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPostgresDatabasesForProjectRow
	for rows.Next() {
		var i GetPostgresDatabasesForProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Host,
			&i.Port,
			&i.DatabaseName,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostgresScan = `-- name: GetPostgresScan :one
SELECT
    id, scan_id, database_id
FROM
    postgres_scans
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetPostgresScan(ctx context.Context, id int64) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, getPostgresScan, id)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const getPostgresScanByScanID = `-- name: GetPostgresScanByScanID :one
SELECT
    id, scan_id, database_id
FROM
    postgres_scans
WHERE
    scan_id = $1
LIMIT 1
`

func (q *Queries) GetPostgresScanByScanID(ctx context.Context, scanID int64) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, getPostgresScanByScanID, scanID)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const getProjectInfoForPostgresScanByScanID = `-- name: GetProjectInfoForPostgresScanByScanID :one
SELECT
    projects.id, projects.name, projects.organization_id, projects.remote, projects.created_at,
    postgres_databases.id AS database_id,
    postgres_databases.project_id AS database_project_id,
    postgres_databases.host AS database_host,
    postgres_databases.port AS database_port,
    postgres_databases.database_name AS database_database_name,
    decrypt_data(postgres_databases.project_id, $2, postgres_databases.username) AS database_username,
    decrypt_data(postgres_databases.project_id, $2, postgres_databases.PASSWORD) AS database_PASSWORD,
    postgres_databases.version AS database_version,
    postgres_databases.created_at AS database_created_at,
    postgres_scans.id, postgres_scans.scan_id, postgres_scans.database_id
FROM
    projects
    JOIN postgres_databases ON postgres_databases.project_id = projects.id
    JOIN postgres_scans ON postgres_scans.database_id = postgres_databases.id
WHERE
    postgres_scans.scan_id = $1
`

type GetProjectInfoForPostgresScanByScanIDParams struct {
	ScanID  int64  `json:"scan_id"`
	SaltKey string `json:"salt_key"`
}

type GetProjectInfoForPostgresScanByScanIDRow struct {
	Project              Project            `json:"project"`
	DatabaseID           int64              `json:"database_id"`
	DatabaseProjectID    int64              `json:"database_project_id"`
	DatabaseHost         string             `json:"database_host"`
	DatabasePort         int32              `json:"database_port"`
	DatabaseDatabaseName string             `json:"database_database_name"`
	DatabaseUsername     string             `json:"database_username"`
	DatabasePassword     string             `json:"database_password"`
	DatabaseVersion      sql.NullString     `json:"database_version"`
	DatabaseCreatedAt    pgtype.Timestamptz `json:"database_created_at"`
	PostgresScan         PostgresScan       `json:"postgres_scan"`
}

func (q *Queries) GetProjectInfoForPostgresScanByScanID(ctx context.Context, arg GetProjectInfoForPostgresScanByScanIDParams) (*GetProjectInfoForPostgresScanByScanIDRow, error) {
	row := q.db.QueryRow(ctx, getProjectInfoForPostgresScanByScanID, arg.ScanID, arg.SaltKey)
	var i GetProjectInfoForPostgresScanByScanIDRow
	err := row.Scan(
		&i.Project.ID,
		&i.Project.Name,
		&i.Project.OrganizationID,
		&i.Project.Remote,
		&i.Project.CreatedAt,
		&i.DatabaseID,
		&i.DatabaseProjectID,
		&i.DatabaseHost,
		&i.DatabasePort,
		&i.DatabaseDatabaseName,
		&i.DatabaseUsername,
		&i.DatabasePassword,
		&i.DatabaseVersion,
		&i.DatabaseCreatedAt,
		&i.PostgresScan.ID,
		&i.PostgresScan.ScanID,
		&i.PostgresScan.DatabaseID,
	)
	return &i, err
}

const updatePostgresDatabase = `-- name: UpdatePostgresDatabase :exec
UPDATE
    postgres_databases
SET
    database_name = $2,
    host = $3,
    port = $4,
    username = encrypt_data($6, $7, $8),
    PASSWORD = encrypt_data($6, $7, $9),
    version = $5
WHERE
    id = $1
`

type UpdatePostgresDatabaseParams struct {
	ID           int64          `json:"id"`
	DatabaseName string         `json:"database_name"`
	Host         string         `json:"host"`
	Port         int32          `json:"port"`
	Version      sql.NullString `json:"version"`
	ProjectID    int64          `json:"project_id"`
	SaltKey      string         `json:"salt_key"`
	Username     string         `json:"username"`
	Password     string         `json:"password"`
}

func (q *Queries) UpdatePostgresDatabase(ctx context.Context, arg UpdatePostgresDatabaseParams) error {
	_, err := q.db.Exec(ctx, updatePostgresDatabase,
		arg.ID,
		arg.DatabaseName,
		arg.Host,
		arg.Port,
		arg.Version,
		arg.ProjectID,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	return err
}

const updatePostgresVersion = `-- name: UpdatePostgresVersion :exec
UPDATE
    postgres_databases
SET
    version = $2
WHERE
    id = $1
`

type UpdatePostgresVersionParams struct {
	ID      int64          `json:"id"`
	Version sql.NullString `json:"version"`
}

func (q *Queries) UpdatePostgresVersion(ctx context.Context, arg UpdatePostgresVersionParams) error {
	_, err := q.db.Exec(ctx, updatePostgresVersion, arg.ID, arg.Version)
	return err
}
