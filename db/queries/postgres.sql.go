// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: postgres.sql

package queries

import (
	"context"
	"database/sql"
)

const createPostgresScan = `-- name: CreatePostgresScan :one
INSERT INTO postgres_scans(scan_id, database_id)
    VALUES ($1, $2)
RETURNING
    id, scan_id, database_id
`

type CreatePostgresScanParams struct {
	ScanID     int64 `json:"scan_id"`
	DatabaseID int64 `json:"database_id"`
}

func (q *Queries) CreatePostgresScan(ctx context.Context, arg CreatePostgresScanParams) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, createPostgresScan, arg.ScanID, arg.DatabaseID)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const getPostgresDatabase = `-- name: GetPostgresDatabase :one
SELECT
    postgres_databases.id, postgres_databases.project_id, postgres_databases.host, postgres_databases.port, postgres_databases.database_name, postgres_databases.username, postgres_databases.password, postgres_databases.version, postgres_databases.created_at,
(
        SELECT
            COUNT(*)
        FROM
            postgres_scans
        WHERE
            postgres_scans.database_id = postgres_databases.id) AS scan_count
FROM
    postgres_databases
WHERE
    postgres_databases.id = $1
`

type GetPostgresDatabaseRow struct {
	PostgresDatabase PostgresDatabase `json:"postgres_database"`
	ScanCount        int64            `json:"scan_count"`
}

func (q *Queries) GetPostgresDatabase(ctx context.Context, id int64) (*GetPostgresDatabaseRow, error) {
	row := q.db.QueryRow(ctx, getPostgresDatabase, id)
	var i GetPostgresDatabaseRow
	err := row.Scan(
		&i.PostgresDatabase.ID,
		&i.PostgresDatabase.ProjectID,
		&i.PostgresDatabase.Host,
		&i.PostgresDatabase.Port,
		&i.PostgresDatabase.DatabaseName,
		&i.PostgresDatabase.Username,
		&i.PostgresDatabase.Password,
		&i.PostgresDatabase.Version,
		&i.PostgresDatabase.CreatedAt,
		&i.ScanCount,
	)
	return &i, err
}

const getPostgresDatabasesForProject = `-- name: GetPostgresDatabasesForProject :many
SELECT
    id, project_id, host, port, database_name, username, password, version, created_at
FROM
    postgres_databases
WHERE
    project_id = $1
`

func (q *Queries) GetPostgresDatabasesForProject(ctx context.Context, projectID int64) ([]*PostgresDatabase, error) {
	rows, err := q.db.Query(ctx, getPostgresDatabasesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PostgresDatabase
	for rows.Next() {
		var i PostgresDatabase
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Host,
			&i.Port,
			&i.DatabaseName,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostgresScan = `-- name: GetPostgresScan :one
SELECT
    id, scan_id, database_id
FROM
    postgres_scans
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetPostgresScan(ctx context.Context, id int64) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, getPostgresScan, id)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const getPostgresScanByScanID = `-- name: GetPostgresScanByScanID :one
SELECT
    id, scan_id, database_id
FROM
    postgres_scans
WHERE
    scan_id = $1
LIMIT 1
`

func (q *Queries) GetPostgresScanByScanID(ctx context.Context, scanID int64) (*PostgresScan, error) {
	row := q.db.QueryRow(ctx, getPostgresScanByScanID, scanID)
	var i PostgresScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const updatePostgresDatabase = `-- name: UpdatePostgresDatabase :exec
UPDATE
    postgres_databases
SET
    database_name = $2,
    host = $3,
    port = $4,
    username = $5,
    PASSWORD = $6,
    version = $7
WHERE
    id = $1
`

type UpdatePostgresDatabaseParams struct {
	ID           int64          `json:"id"`
	DatabaseName string         `json:"database_name"`
	Host         string         `json:"host"`
	Port         int32          `json:"port"`
	Username     string         `json:"username"`
	Password     string         `json:"password"`
	Version      sql.NullString `json:"version"`
}

func (q *Queries) UpdatePostgresDatabase(ctx context.Context, arg UpdatePostgresDatabaseParams) error {
	_, err := q.db.Exec(ctx, updatePostgresDatabase,
		arg.ID,
		arg.DatabaseName,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
		arg.Version,
	)
	return err
}

const updatePostgresVersion = `-- name: UpdatePostgresVersion :exec
UPDATE
    postgres_databases
SET
    version = $2
WHERE
    id = $1
`

type UpdatePostgresVersionParams struct {
	ID      int64          `json:"id"`
	Version sql.NullString `json:"version"`
}

func (q *Queries) UpdatePostgresVersion(ctx context.Context, arg UpdatePostgresVersionParams) error {
	_, err := q.db.Exec(ctx, updatePostgresVersion, arg.ID, arg.Version)
	return err
}
