// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: copyfrom.go

package queries

import (
	"context"
)

// iteratorForCreateDockerLayerResultsForProject implements pgx.CopyFromSource.
type iteratorForCreateDockerLayerResultsForProject struct {
	rows                 []CreateDockerLayerResultsForProjectParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateDockerLayerResultsForProject) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateDockerLayerResultsForProject) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ProjectID,
		r.rows[0].Layer,
		r.rows[0].Name,
		r.rows[0].Line,
		r.rows[0].LineNumber,
		r.rows[0].Match,
		r.rows[0].Probability,
		r.rows[0].Username,
		r.rows[0].Password,
		r.rows[0].Filename,
	}, nil
}

func (r iteratorForCreateDockerLayerResultsForProject) Err() error {
	return nil
}

func (q *Queries) CreateDockerLayerResultsForProject(ctx context.Context, arg []CreateDockerLayerResultsForProjectParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"project_docker_layer_results"}, []string{"project_id", "layer", "name", "line", "line_number", "match", "probability", "username", "password", "filename"}, &iteratorForCreateDockerLayerResultsForProject{rows: arg})
}
