// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: session.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(id, user_id)
  VALUES ($1, $2)
RETURNING
  id, user_id, created_at
`

type CreateSessionParams struct {
	ID     uuid.UUID
	UserID sql.NullInt64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return &i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUserID, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT
  id, user_id, created_at
FROM
  sessions
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (*Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return &i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE
  sessions
SET
  user_id = coalesce($2, user_id)
WHERE
  id = $1
`

type UpdateSessionParams struct {
	ID     uuid.UUID
	UserID sql.NullInt64
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession, arg.ID, arg.UserID)
	return err
}
