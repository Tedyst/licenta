// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bruteforce.sql

package queries

import (
	"context"
	"database/sql"
)

const getBruteforcePasswordsForProjectCount = `-- name: GetBruteforcePasswordsForProjectCount :one
SELECT
    SUM(count)
FROM (
    SELECT
        COUNT(*)
    FROM
        default_bruteforce_passwords
    UNION ALL
    SELECT
        COUNT(*)
    FROM
        project_docker_layer_results
    WHERE
        project_docker_layer_results.project_id = $1
    UNION ALL
    SELECT
        COUNT(*)
    FROM
        project_git_results
    WHERE
        project_git_results.project_id = $1) AS count
`

func (q *Queries) GetBruteforcePasswordsForProjectCount(ctx context.Context, projectID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getBruteforcePasswordsForProjectCount, projectID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getBruteforcePasswordsPaginated = `-- name: GetBruteforcePasswordsPaginated :many
SELECT
    id,
    PASSWORD
FROM
    default_bruteforce_passwords
WHERE
    id > $1
LIMIT $2
`

type GetBruteforcePasswordsPaginatedParams struct {
	LastID int64 `json:"last_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetBruteforcePasswordsPaginated(ctx context.Context, arg GetBruteforcePasswordsPaginatedParams) ([]*DefaultBruteforcePassword, error) {
	rows, err := q.db.Query(ctx, getBruteforcePasswordsPaginated, arg.LastID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DefaultBruteforcePassword
	for rows.Next() {
		var i DefaultBruteforcePassword
		if err := rows.Scan(&i.ID, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBruteforcePasswordsSpecificForProject = `-- name: GetBruteforcePasswordsSpecificForProject :many
SELECT
    PASSWORD
FROM
    project_docker_layer_results
WHERE
    project_docker_layer_results.project_id = $1
UNION ALL
SELECT
    PASSWORD
FROM
    project_git_results
WHERE
    project_git_results.project_id = $1
`

func (q *Queries) GetBruteforcePasswordsSpecificForProject(ctx context.Context, projectID int64) ([]sql.NullString, error) {
	rows, err := q.db.Query(ctx, getBruteforcePasswordsSpecificForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var password sql.NullString
		if err := rows.Scan(&password); err != nil {
			return nil, err
		}
		items = append(items, password)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBruteforcedPasswordByHashAndUsername = `-- name: GetBruteforcedPasswordByHashAndUsername :one
SELECT
    id, hash, username, password, last_bruteforce_id
FROM
    bruteforced_passwords
WHERE
    hash = $1
    AND username = $2
LIMIT 1
`

type GetBruteforcedPasswordByHashAndUsernameParams struct {
	Hash     string `json:"hash"`
	Username string `json:"username"`
}

func (q *Queries) GetBruteforcedPasswordByHashAndUsername(ctx context.Context, arg GetBruteforcedPasswordByHashAndUsernameParams) (*BruteforcedPassword, error) {
	row := q.db.QueryRow(ctx, getBruteforcedPasswordByHashAndUsername, arg.Hash, arg.Username)
	var i BruteforcedPassword
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Username,
		&i.Password,
		&i.LastBruteforceID,
	)
	return &i, err
}

const insertBruteforcePasswords = `-- name: InsertBruteforcePasswords :exec
INSERT INTO default_bruteforce_passwords(PASSWORD)
    VALUES (unnest($1::text[]))
ON CONFLICT
    DO NOTHING
`

func (q *Queries) InsertBruteforcePasswords(ctx context.Context, passwords []string) error {
	_, err := q.db.Exec(ctx, insertBruteforcePasswords, passwords)
	return err
}

const insertBruteforcedPassword = `-- name: InsertBruteforcedPassword :exec
INSERT INTO bruteforced_passwords(hash, username, PASSWORD, last_bruteforce_id)
    VALUES ($1, $2, $3, $4)
ON CONFLICT
    DO NOTHING
`

type InsertBruteforcedPasswordParams struct {
	Hash             string         `json:"hash"`
	Username         string         `json:"username"`
	Password         sql.NullString `json:"password"`
	LastBruteforceID sql.NullInt64  `json:"last_bruteforce_id"`
}

func (q *Queries) InsertBruteforcedPassword(ctx context.Context, arg InsertBruteforcedPasswordParams) error {
	_, err := q.db.Exec(ctx, insertBruteforcedPassword,
		arg.Hash,
		arg.Username,
		arg.Password,
		arg.LastBruteforceID,
	)
	return err
}
