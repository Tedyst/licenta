// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: project.sql

package queries

import (
	"context"
)

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, name, organization_id, created_at
FROM
    projects
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int64) (*Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectByOrganizationAndName = `-- name: GetProjectByOrganizationAndName :one
SELECT
    id, name, organization_id, created_at
FROM
    projects
WHERE
    organization_id = $1
    AND name = $2
LIMIT 1
`

type GetProjectByOrganizationAndNameParams struct {
	OrganizationID int64  `json:"organization_id"`
	Name           string `json:"name"`
}

func (q *Queries) GetProjectByOrganizationAndName(ctx context.Context, arg GetProjectByOrganizationAndNameParams) (*Project, error) {
	row := q.db.QueryRow(ctx, getProjectByOrganizationAndName, arg.OrganizationID, arg.Name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectMembers = `-- name: GetProjectMembers :many
SELECT
    id, project_id, user_id, role, created_at
FROM
    project_members
WHERE
    project_id = $1
`

func (q *Queries) GetProjectMembers(ctx context.Context, projectID int64) ([]*ProjectMember, error) {
	rows, err := q.db.Query(ctx, getProjectMembers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ProjectMember
	for rows.Next() {
		var i ProjectMember
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPermissionsForUser = `-- name: GetProjectPermissionsForUser :one
SELECT
    MIN(ROLE)::smallint AS role
FROM (
    SELECT
        project_members.role AS role
    FROM
        project_members
    WHERE
        project_members.project_id = $1
        AND project_members.user_id = $2
    UNION
    SELECT
        organization_members.role AS role
    FROM
        organization_members
    WHERE
        organization_id = $3
        AND user_id = $2) AS role
`

type GetProjectPermissionsForUserParams struct {
	ProjectID      int64 `json:"project_id"`
	UserID         int64 `json:"user_id"`
	OrganizationID int64 `json:"organization_id"`
}

func (q *Queries) GetProjectPermissionsForUser(ctx context.Context, arg GetProjectPermissionsForUserParams) (int16, error) {
	row := q.db.QueryRow(ctx, getProjectPermissionsForUser, arg.ProjectID, arg.UserID, arg.OrganizationID)
	var role int16
	err := row.Scan(&role)
	return role, err
}

const getProjectUser = `-- name: GetProjectUser :one
SELECT
    id, project_id, user_id, role, created_at
FROM
    project_members
WHERE
    project_id = $1
    AND user_id = $2
LIMIT 1
`

type GetProjectUserParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetProjectUser(ctx context.Context, arg GetProjectUserParams) (*ProjectMember, error) {
	row := q.db.QueryRow(ctx, getProjectUser, arg.ProjectID, arg.UserID)
	var i ProjectMember
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectsByOrganization = `-- name: GetProjectsByOrganization :many
SELECT
    id, name, organization_id, created_at
FROM
    projects
WHERE
    organization_id = $1
`

func (q *Queries) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*Project, error) {
	rows, err := q.db.Query(ctx, getProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrganizationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
