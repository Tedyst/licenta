// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: project.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects(organization_id, name, remote)
    VALUES ($1, $2, $3)
RETURNING
    id, name, organization_id, remote, created_at
`

type CreateProjectParams struct {
	OrganizationID int64  `json:"organization_id"`
	Name           string `json:"name"`
	Remote         bool   `json:"remote"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (*Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.OrganizationID, arg.Name, arg.Remote)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Remote,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE id = $1
RETURNING
    id, name, organization_id, remote, created_at
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) (*Project, error) {
	row := q.db.QueryRow(ctx, deleteProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Remote,
		&i.CreatedAt,
	)
	return &i, err
}

const getProject = `-- name: GetProject :one
SELECT
    id, name, organization_id, remote, created_at
FROM
    projects
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (*Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Remote,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectByOrganizationAndName = `-- name: GetProjectByOrganizationAndName :one
SELECT
    id, name, organization_id, remote, created_at
FROM
    projects
WHERE
    organization_id = $1
    AND name = $2
LIMIT 1
`

type GetProjectByOrganizationAndNameParams struct {
	OrganizationID int64  `json:"organization_id"`
	Name           string `json:"name"`
}

func (q *Queries) GetProjectByOrganizationAndName(ctx context.Context, arg GetProjectByOrganizationAndNameParams) (*Project, error) {
	row := q.db.QueryRow(ctx, getProjectByOrganizationAndName, arg.OrganizationID, arg.Name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Remote,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectMembers = `-- name: GetProjectMembers :many
SELECT
    id, project_id, user_id, role, created_at
FROM
    project_members
WHERE
    project_id = $1
`

func (q *Queries) GetProjectMembers(ctx context.Context, projectID int64) ([]*ProjectMember, error) {
	rows, err := q.db.Query(ctx, getProjectMembers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ProjectMember
	for rows.Next() {
		var i ProjectMember
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPermissionForUser = `-- name: GetProjectPermissionForUser :one
SELECT
    ROLE
FROM
    project_members
WHERE
    project_id = $1
    AND user_id = $2
`

type GetProjectPermissionForUserParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetProjectPermissionForUser(ctx context.Context, arg GetProjectPermissionForUserParams) (int16, error) {
	row := q.db.QueryRow(ctx, getProjectPermissionForUser, arg.ProjectID, arg.UserID)
	var role int16
	err := row.Scan(&role)
	return role, err
}

const getProjectUser = `-- name: GetProjectUser :one
SELECT
    id, project_id, user_id, role, created_at
FROM
    project_members
WHERE
    project_id = $1
    AND user_id = $2
LIMIT 1
`

type GetProjectUserParams struct {
	ProjectID int64 `json:"project_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetProjectUser(ctx context.Context, arg GetProjectUserParams) (*ProjectMember, error) {
	row := q.db.QueryRow(ctx, getProjectUser, arg.ProjectID, arg.UserID)
	var i ProjectMember
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const getProjectWithStats = `-- name: GetProjectWithStats :one
SELECT
    id, name, organization_id, remote, created_at,
(
        SELECT
            COUNT(*)
        FROM
            scans
            INNER JOIN scan_groups ON scans.scan_group_id = scan_groups.id
        WHERE
            scan_groups.project_id = projects.id) AS scans
FROM
    projects
WHERE
    projects.id = $1
`

type GetProjectWithStatsRow struct {
	ID             int64              `json:"id"`
	Name           string             `json:"name"`
	OrganizationID int64              `json:"organization_id"`
	Remote         bool               `json:"remote"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	Scans          int64              `json:"scans"`
}

func (q *Queries) GetProjectWithStats(ctx context.Context, id int64) (*GetProjectWithStatsRow, error) {
	row := q.db.QueryRow(ctx, getProjectWithStats, id)
	var i GetProjectWithStatsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OrganizationID,
		&i.Remote,
		&i.CreatedAt,
		&i.Scans,
	)
	return &i, err
}

const getProjectsByOrganization = `-- name: GetProjectsByOrganization :many
SELECT
    id, name, organization_id, remote, created_at
FROM
    projects
WHERE
    organization_id = $1
`

func (q *Queries) GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*Project, error) {
	rows, err := q.db.Query(ctx, getProjectsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OrganizationID,
			&i.Remote,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
