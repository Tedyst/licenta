// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: nvd.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNvdCPE = `-- name: CreateNvdCPE :one
INSERT INTO nvd_cpes(cpe, database_type, version, last_modified)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, cpe, database_type, version, last_modified, created_at
`

type CreateNvdCPEParams struct {
	Cpe          string
	DatabaseType int32
	Version      string
	LastModified pgtype.Timestamptz
}

func (q *Queries) CreateNvdCPE(ctx context.Context, arg CreateNvdCPEParams) (*NvdCpe, error) {
	row := q.db.QueryRow(ctx, createNvdCPE,
		arg.Cpe,
		arg.DatabaseType,
		arg.Version,
		arg.LastModified,
	)
	var i NvdCpe
	err := row.Scan(
		&i.ID,
		&i.Cpe,
		&i.DatabaseType,
		&i.Version,
		&i.LastModified,
		&i.CreatedAt,
	)
	return &i, err
}

const createNvdCve = `-- name: CreateNvdCve :one
INSERT INTO nvd_cves(cve_id, description, published, last_modified, score)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, cve_id, description, published, last_modified, score, created_at
`

type CreateNvdCveParams struct {
	CveID        string
	Description  string
	Published    pgtype.Timestamptz
	LastModified pgtype.Timestamptz
	Score        float64
}

func (q *Queries) CreateNvdCve(ctx context.Context, arg CreateNvdCveParams) (*NvdCfe, error) {
	row := q.db.QueryRow(ctx, createNvdCve,
		arg.CveID,
		arg.Description,
		arg.Published,
		arg.LastModified,
		arg.Score,
	)
	var i NvdCfe
	err := row.Scan(
		&i.ID,
		&i.CveID,
		&i.Description,
		&i.Published,
		&i.LastModified,
		&i.Score,
		&i.CreatedAt,
	)
	return &i, err
}

const createNvdCveCPE = `-- name: CreateNvdCveCPE :one
INSERT INTO nvd_cve_cpes(cve_id, cpe_id)
    VALUES ($1, $2)
RETURNING
    id, cve_id, cpe_id
`

type CreateNvdCveCPEParams struct {
	CveID int64
	CpeID int64
}

func (q *Queries) CreateNvdCveCPE(ctx context.Context, arg CreateNvdCveCPEParams) (*NvdCveCpe, error) {
	row := q.db.QueryRow(ctx, createNvdCveCPE, arg.CveID, arg.CpeID)
	var i NvdCveCpe
	err := row.Scan(&i.ID, &i.CveID, &i.CpeID)
	return &i, err
}

const getCPEByProductAndVersion = `-- name: GetCPEByProductAndVersion :one
SELECT
    id, cpe, database_type, version, last_modified, created_at
FROM
    nvd_cpes
WHERE
    database_type = $1
    AND version = $2
LIMIT 1
`

type GetCPEByProductAndVersionParams struct {
	DatabaseType int32
	Version      string
}

func (q *Queries) GetCPEByProductAndVersion(ctx context.Context, arg GetCPEByProductAndVersionParams) (*NvdCpe, error) {
	row := q.db.QueryRow(ctx, getCPEByProductAndVersion, arg.DatabaseType, arg.Version)
	var i NvdCpe
	err := row.Scan(
		&i.ID,
		&i.Cpe,
		&i.DatabaseType,
		&i.Version,
		&i.LastModified,
		&i.CreatedAt,
	)
	return &i, err
}

const getCveByCveID = `-- name: GetCveByCveID :one
SELECT
    id, cve_id, description, published, last_modified, score, created_at
FROM
    nvd_cves
WHERE
    cve_id = $1
`

func (q *Queries) GetCveByCveID(ctx context.Context, cveID string) (*NvdCfe, error) {
	row := q.db.QueryRow(ctx, getCveByCveID, cveID)
	var i NvdCfe
	err := row.Scan(
		&i.ID,
		&i.CveID,
		&i.Description,
		&i.Published,
		&i.LastModified,
		&i.Score,
		&i.CreatedAt,
	)
	return &i, err
}

const getCveCpeByCveAndCpe = `-- name: GetCveCpeByCveAndCpe :one
SELECT
    id, cve_id, cpe_id
FROM
    nvd_cve_cpes
WHERE
    cve_id = $1
    AND cpe_id = $2
`

type GetCveCpeByCveAndCpeParams struct {
	CveID int64
	CpeID int64
}

func (q *Queries) GetCveCpeByCveAndCpe(ctx context.Context, arg GetCveCpeByCveAndCpeParams) (*NvdCveCpe, error) {
	row := q.db.QueryRow(ctx, getCveCpeByCveAndCpe, arg.CveID, arg.CpeID)
	var i NvdCveCpe
	err := row.Scan(&i.ID, &i.CveID, &i.CpeID)
	return &i, err
}

const getCvesByProductAndVersion = `-- name: GetCvesByProductAndVersion :many
SELECT
    nvd_cves.id, nvd_cves.cve_id, nvd_cves.description, nvd_cves.published, nvd_cves.last_modified, nvd_cves.score, nvd_cves.created_at
FROM
    nvd_cves
    INNER JOIN nvd_cve_cpes ON nvd_cve_cpes.cve_id = nvd_cves.id
    INNER JOIN nvd_cpes ON nvd_cve_cpes.cpe_id = nvd_cpes.id
WHERE
    nvd_cpes.database_type = $1
    AND nvd_cpes.version = $2
`

type GetCvesByProductAndVersionParams struct {
	DatabaseType int32
	Version      string
}

type GetCvesByProductAndVersionRow struct {
	NvdCfe NvdCfe
}

func (q *Queries) GetCvesByProductAndVersion(ctx context.Context, arg GetCvesByProductAndVersionParams) ([]*GetCvesByProductAndVersionRow, error) {
	rows, err := q.db.Query(ctx, getCvesByProductAndVersion, arg.DatabaseType, arg.Version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetCvesByProductAndVersionRow
	for rows.Next() {
		var i GetCvesByProductAndVersionRow
		if err := rows.Scan(
			&i.NvdCfe.ID,
			&i.NvdCfe.CveID,
			&i.NvdCfe.Description,
			&i.NvdCfe.Published,
			&i.NvdCfe.LastModified,
			&i.NvdCfe.Score,
			&i.NvdCfe.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNvdCPEsByDBType = `-- name: GetNvdCPEsByDBType :many
SELECT
    id, cpe, database_type, version, last_modified, created_at
FROM
    nvd_cpes
WHERE
    database_type = $1
`

func (q *Queries) GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*NvdCpe, error) {
	rows, err := q.db.Query(ctx, getNvdCPEsByDBType, databaseType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*NvdCpe
	for rows.Next() {
		var i NvdCpe
		if err := rows.Scan(
			&i.ID,
			&i.Cpe,
			&i.DatabaseType,
			&i.Version,
			&i.LastModified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNvdCveByCveID = `-- name: GetNvdCveByCveID :one
SELECT
    id, cve_id, description, published, last_modified, score, created_at
FROM
    nvd_cves
WHERE
    cve_id = $1
`

func (q *Queries) GetNvdCveByCveID(ctx context.Context, cveID string) (*NvdCfe, error) {
	row := q.db.QueryRow(ctx, getNvdCveByCveID, cveID)
	var i NvdCfe
	err := row.Scan(
		&i.ID,
		&i.CveID,
		&i.Description,
		&i.Published,
		&i.LastModified,
		&i.Score,
		&i.CreatedAt,
	)
	return &i, err
}

const updateNvdCPE = `-- name: UpdateNvdCPE :exec
UPDATE
    nvd_cpes
SET
    version = coalesce($2, version),
    last_modified = coalesce($3, last_modified)
WHERE
    id = $1
`

type UpdateNvdCPEParams struct {
	ID           int64
	Version      sql.NullString
	LastModified pgtype.Timestamptz
}

func (q *Queries) UpdateNvdCPE(ctx context.Context, arg UpdateNvdCPEParams) error {
	_, err := q.db.Exec(ctx, updateNvdCPE, arg.ID, arg.Version, arg.LastModified)
	return err
}
