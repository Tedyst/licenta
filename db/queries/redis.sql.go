// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: redis.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRedisDatabase = `-- name: CreateRedisDatabase :one
INSERT INTO redis_databases(project_id, host, port, username, PASSWORD, version)
    VALUES ($1, $2, $3, encrypt_data($1, $5, $6), encrypt_data($1, $5, $7), $4)
RETURNING
    id, project_id, host, port, username, password, version, created_at
`

type CreateRedisDatabaseParams struct {
	ProjectID int64          `json:"project_id"`
	Host      string         `json:"host"`
	Port      int32          `json:"port"`
	Version   sql.NullString `json:"version"`
	SaltKey   string         `json:"salt_key"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
}

func (q *Queries) CreateRedisDatabase(ctx context.Context, arg CreateRedisDatabaseParams) (*RedisDatabase, error) {
	row := q.db.QueryRow(ctx, createRedisDatabase,
		arg.ProjectID,
		arg.Host,
		arg.Port,
		arg.Version,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	var i RedisDatabase
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.CreatedAt,
	)
	return &i, err
}

const createRedisScan = `-- name: CreateRedisScan :one
INSERT INTO redis_scans(scan_id, database_id)
    VALUES ($1, $2)
RETURNING
    id, scan_id, database_id
`

type CreateRedisScanParams struct {
	ScanID     int64 `json:"scan_id"`
	DatabaseID int64 `json:"database_id"`
}

func (q *Queries) CreateRedisScan(ctx context.Context, arg CreateRedisScanParams) (*RedisScan, error) {
	row := q.db.QueryRow(ctx, createRedisScan, arg.ScanID, arg.DatabaseID)
	var i RedisScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const deleteRedisDatabase = `-- name: DeleteRedisDatabase :exec
DELETE FROM redis_databases
WHERE id = $1
`

func (q *Queries) DeleteRedisDatabase(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRedisDatabase, id)
	return err
}

const getProjectInfoForRedisScanByScanID = `-- name: GetProjectInfoForRedisScanByScanID :one
SELECT
    projects.id, projects.name, projects.organization_id, projects.remote, projects.created_at,
    redis_databases.id AS database_id,
    redis_databases.project_id AS database_project_id,
    redis_databases.host AS database_host,
    redis_databases.port AS database_port,
    decrypt_data(redis_databases.project_id, $2, redis_databases.username) AS database_username,
    decrypt_data(redis_databases.project_id, $2, redis_databases.PASSWORD) AS database_PASSWORD,
    redis_databases.version AS database_version,
    redis_databases.created_at AS database_created_at,
    redis_scans.id, redis_scans.scan_id, redis_scans.database_id
FROM
    projects
    JOIN redis_databases ON redis_databases.project_id = projects.id
    JOIN redis_scans ON redis_scans.database_id = redis_databases.id
WHERE
    redis_scans.scan_id = $1
`

type GetProjectInfoForRedisScanByScanIDParams struct {
	ScanID  int64  `json:"scan_id"`
	SaltKey string `json:"salt_key"`
}

type GetProjectInfoForRedisScanByScanIDRow struct {
	Project           Project            `json:"project"`
	DatabaseID        int64              `json:"database_id"`
	DatabaseProjectID int64              `json:"database_project_id"`
	DatabaseHost      string             `json:"database_host"`
	DatabasePort      int32              `json:"database_port"`
	DatabaseUsername  string             `json:"database_username"`
	DatabasePassword  string             `json:"database_password"`
	DatabaseVersion   sql.NullString     `json:"database_version"`
	DatabaseCreatedAt pgtype.Timestamptz `json:"database_created_at"`
	RedisScan         RedisScan          `json:"redis_scan"`
}

func (q *Queries) GetProjectInfoForRedisScanByScanID(ctx context.Context, arg GetProjectInfoForRedisScanByScanIDParams) (*GetProjectInfoForRedisScanByScanIDRow, error) {
	row := q.db.QueryRow(ctx, getProjectInfoForRedisScanByScanID, arg.ScanID, arg.SaltKey)
	var i GetProjectInfoForRedisScanByScanIDRow
	err := row.Scan(
		&i.Project.ID,
		&i.Project.Name,
		&i.Project.OrganizationID,
		&i.Project.Remote,
		&i.Project.CreatedAt,
		&i.DatabaseID,
		&i.DatabaseProjectID,
		&i.DatabaseHost,
		&i.DatabasePort,
		&i.DatabaseUsername,
		&i.DatabasePassword,
		&i.DatabaseVersion,
		&i.DatabaseCreatedAt,
		&i.RedisScan.ID,
		&i.RedisScan.ScanID,
		&i.RedisScan.DatabaseID,
	)
	return &i, err
}

const getRedisDatabase = `-- name: GetRedisDatabase :one
SELECT
    id,
    project_id,
    host,
    port,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD,
    version,
    created_at,
(
        SELECT
            COUNT(*)
        FROM
            redis_scans
        WHERE
            redis_scans.database_id = redis_databases.id) AS scan_count
FROM
    redis_databases
WHERE
    redis_databases.id = $1
`

type GetRedisDatabaseParams struct {
	ID      int64  `json:"id"`
	SaltKey string `json:"salt_key"`
}

type GetRedisDatabaseRow struct {
	ID        int64              `json:"id"`
	ProjectID int64              `json:"project_id"`
	Host      string             `json:"host"`
	Port      int32              `json:"port"`
	Username  string             `json:"username"`
	Password  string             `json:"password"`
	Version   sql.NullString     `json:"version"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	ScanCount int64              `json:"scan_count"`
}

func (q *Queries) GetRedisDatabase(ctx context.Context, arg GetRedisDatabaseParams) (*GetRedisDatabaseRow, error) {
	row := q.db.QueryRow(ctx, getRedisDatabase, arg.ID, arg.SaltKey)
	var i GetRedisDatabaseRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Password,
		&i.Version,
		&i.CreatedAt,
		&i.ScanCount,
	)
	return &i, err
}

const getRedisDatabasesForProject = `-- name: GetRedisDatabasesForProject :many
SELECT
    id,
    project_id,
    host,
    port,
    decrypt_data(project_id, $2, username) AS username,
    decrypt_data(project_id, $2, PASSWORD) AS PASSWORD,
    version,
    created_at
FROM
    redis_databases
WHERE
    project_id = $1
`

type GetRedisDatabasesForProjectParams struct {
	ProjectID int64  `json:"project_id"`
	SaltKey   string `json:"salt_key"`
}

type GetRedisDatabasesForProjectRow struct {
	ID        int64              `json:"id"`
	ProjectID int64              `json:"project_id"`
	Host      string             `json:"host"`
	Port      int32              `json:"port"`
	Username  string             `json:"username"`
	Password  string             `json:"password"`
	Version   sql.NullString     `json:"version"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetRedisDatabasesForProject(ctx context.Context, arg GetRedisDatabasesForProjectParams) ([]*GetRedisDatabasesForProjectRow, error) {
	rows, err := q.db.Query(ctx, getRedisDatabasesForProject, arg.ProjectID, arg.SaltKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetRedisDatabasesForProjectRow
	for rows.Next() {
		var i GetRedisDatabasesForProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Password,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRedisScan = `-- name: GetRedisScan :one
SELECT
    id, scan_id, database_id
FROM
    redis_scans
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetRedisScan(ctx context.Context, id int64) (*RedisScan, error) {
	row := q.db.QueryRow(ctx, getRedisScan, id)
	var i RedisScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const getRedisScanByScanID = `-- name: GetRedisScanByScanID :one
SELECT
    id, scan_id, database_id
FROM
    redis_scans
WHERE
    scan_id = $1
LIMIT 1
`

func (q *Queries) GetRedisScanByScanID(ctx context.Context, scanID int64) (*RedisScan, error) {
	row := q.db.QueryRow(ctx, getRedisScanByScanID, scanID)
	var i RedisScan
	err := row.Scan(&i.ID, &i.ScanID, &i.DatabaseID)
	return &i, err
}

const updateRedisDatabase = `-- name: UpdateRedisDatabase :exec
UPDATE
    redis_databases
SET
    host = $2,
    port = $3,
    username = encrypt_data($5, $6, $7),
    PASSWORD = encrypt_data($5, $6, $8),
    version = $4
WHERE
    id = $1
`

type UpdateRedisDatabaseParams struct {
	ID        int64          `json:"id"`
	Host      string         `json:"host"`
	Port      int32          `json:"port"`
	Version   sql.NullString `json:"version"`
	ProjectID int64          `json:"project_id"`
	SaltKey   string         `json:"salt_key"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
}

func (q *Queries) UpdateRedisDatabase(ctx context.Context, arg UpdateRedisDatabaseParams) error {
	_, err := q.db.Exec(ctx, updateRedisDatabase,
		arg.ID,
		arg.Host,
		arg.Port,
		arg.Version,
		arg.ProjectID,
		arg.SaltKey,
		arg.Username,
		arg.Password,
	)
	return err
}

const updateRedisVersion = `-- name: UpdateRedisVersion :exec
UPDATE
    redis_databases
SET
    version = $2
WHERE
    id = $1
`

type UpdateRedisVersionParams struct {
	ID      int64          `json:"id"`
	Version sql.NullString `json:"version"`
}

func (q *Queries) UpdateRedisVersion(ctx context.Context, arg UpdateRedisVersionParams) error {
	_, err := q.db.Exec(ctx, updateRedisVersion, arg.ID, arg.Version)
	return err
}
