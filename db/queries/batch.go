// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: batch.go

package queries

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const getBruteforcePasswords = `-- name: GetBruteforcePasswords :batchmany
SELECT
    id, password
FROM
    default_bruteforce_passwords
WHERE
    id >= $1
`

type GetBruteforcePasswordsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) GetBruteforcePasswords(ctx context.Context, startID []int64) *GetBruteforcePasswordsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range startID {
		vals := []interface{}{
			a,
		}
		batch.Queue(getBruteforcePasswords, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &GetBruteforcePasswordsBatchResults{br, len(startID), false}
}

func (b *GetBruteforcePasswordsBatchResults) Query(f func(int, []*DefaultBruteforcePassword, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []*DefaultBruteforcePassword
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i DefaultBruteforcePassword
				if err := rows.Scan(&i.ID, &i.Password); err != nil {
					return err
				}
				items = append(items, &i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *GetBruteforcePasswordsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
