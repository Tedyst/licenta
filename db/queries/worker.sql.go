// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: worker.sql

package queries

import (
	"context"
	"database/sql"
)

const bindScanToWorker = `-- name: BindScanToWorker :exec
UPDATE
    scans
SET
    worker_id = $2
WHERE
    id = $1
`

type BindScanToWorkerParams struct {
	ID       int64         `json:"id"`
	WorkerID sql.NullInt64 `json:"worker_id"`
}

func (q *Queries) BindScanToWorker(ctx context.Context, arg BindScanToWorkerParams) error {
	_, err := q.db.Exec(ctx, bindScanToWorker, arg.ID, arg.WorkerID)
	return err
}

const getWorkerByToken = `-- name: GetWorkerByToken :one
SELECT
    id, token, created_at
FROM
    workers
WHERE
    workers.token = $1
`

func (q *Queries) GetWorkerByToken(ctx context.Context, token string) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorkerByToken, token)
	var i Worker
	err := row.Scan(&i.ID, &i.Token, &i.CreatedAt)
	return &i, err
}

const getWorkerForScan = `-- name: GetWorkerForScan :one
SELECT
    workers.id, workers.token, workers.created_at
FROM
    workers
    INNER JOIN scans ON workers.id = scans.worker_id
WHERE
    scans.id = $1
`

func (q *Queries) GetWorkerForScan(ctx context.Context, id int64) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorkerForScan, id)
	var i Worker
	err := row.Scan(&i.ID, &i.Token, &i.CreatedAt)
	return &i, err
}

const getWorkersForProject = `-- name: GetWorkersForProject :many
SELECT
    workers.id, workers.token, workers.created_at
FROM
    workers
    INNER JOIN worker_projects ON workers.id = worker_projects.worker_id
WHERE
    worker_projects.project_id = $1
`

func (q *Queries) GetWorkersForProject(ctx context.Context, projectID int64) ([]*Worker, error) {
	rows, err := q.db.Query(ctx, getWorkersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(&i.ID, &i.Token, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
