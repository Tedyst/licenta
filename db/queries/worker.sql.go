// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: worker.sql

package queries

import (
	"context"
)

const getWorkersForProject = `-- name: GetWorkersForProject :many
SELECT
    workers.id, workers.token, workers.created_at
FROM
    workers
    INNER JOIN worker_projects ON workers.id = worker_projects.worker_id
WHERE
    worker_projects.project_id = $1
`

type GetWorkersForProjectRow struct {
	Worker Worker `json:"worker"`
}

func (q *Queries) GetWorkersForProject(ctx context.Context, projectID int64) ([]*GetWorkersForProjectRow, error) {
	rows, err := q.db.Query(ctx, getWorkersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetWorkersForProjectRow
	for rows.Next() {
		var i GetWorkersForProjectRow
		if err := rows.Scan(&i.Worker.ID, &i.Worker.Token, &i.Worker.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
