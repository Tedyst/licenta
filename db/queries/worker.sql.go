// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: worker.sql

package queries

import (
	"context"
	"database/sql"
)

const bindScanToWorker = `-- name: BindScanToWorker :one
UPDATE
    scans
SET
    worker_id = $2
WHERE
    id = $1
    AND worker_id IS NULL
RETURNING
    id, scan_group_id, scan_type, status, error, worker_id, created_at, ended_at
`

type BindScanToWorkerParams struct {
	ID       int64         `json:"id"`
	WorkerID sql.NullInt64 `json:"worker_id"`
}

func (q *Queries) BindScanToWorker(ctx context.Context, arg BindScanToWorkerParams) (*Scan, error) {
	row := q.db.QueryRow(ctx, bindScanToWorker, arg.ID, arg.WorkerID)
	var i Scan
	err := row.Scan(
		&i.ID,
		&i.ScanGroupID,
		&i.ScanType,
		&i.Status,
		&i.Error,
		&i.WorkerID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return &i, err
}

const createWorker = `-- name: CreateWorker :one
INSERT INTO workers(organization, name, token)
    VALUES ($1, $2, $3)
RETURNING
    id, token, name, organization, created_at
`

type CreateWorkerParams struct {
	Organization int64  `json:"organization"`
	Name         string `json:"name"`
	Token        string `json:"token"`
}

func (q *Queries) CreateWorker(ctx context.Context, arg CreateWorkerParams) (*Worker, error) {
	row := q.db.QueryRow(ctx, createWorker, arg.Organization, arg.Name, arg.Token)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteWorker = `-- name: DeleteWorker :one
DELETE FROM workers
WHERE id = $1
RETURNING
    id, token, name, organization, created_at
`

func (q *Queries) DeleteWorker(ctx context.Context, id int64) (*Worker, error) {
	row := q.db.QueryRow(ctx, deleteWorker, id)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const getWorker = `-- name: GetWorker :one
SELECT
    id, token, name, organization, created_at
FROM
    workers
WHERE
    id = $1
`

func (q *Queries) GetWorker(ctx context.Context, id int64) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorker, id)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const getWorkerByToken = `-- name: GetWorkerByToken :one
SELECT
    id, token, name, organization, created_at
FROM
    workers
WHERE
    workers.token = $1
`

func (q *Queries) GetWorkerByToken(ctx context.Context, token string) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorkerByToken, token)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const getWorkerForProject = `-- name: GetWorkerForProject :one
SELECT
    workers.id, workers.token, workers.name, workers.organization, workers.created_at
FROM
    workers
    INNER JOIN organizations ON workers.organization = organizations.id
    INNER JOIN projects ON organizations.id = projects.organization_id
WHERE
    projects.id = $2
    AND workers.token = $1
`

type GetWorkerForProjectParams struct {
	Token     string `json:"token"`
	ProjectID int64  `json:"project_id"`
}

func (q *Queries) GetWorkerForProject(ctx context.Context, arg GetWorkerForProjectParams) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorkerForProject, arg.Token, arg.ProjectID)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const getWorkerForScan = `-- name: GetWorkerForScan :one
SELECT
    workers.id, workers.token, workers.name, workers.organization, workers.created_at
FROM
    workers
    INNER JOIN scans ON workers.id = scans.worker_id
WHERE
    scans.id = $1
`

func (q *Queries) GetWorkerForScan(ctx context.Context, id int64) (*Worker, error) {
	row := q.db.QueryRow(ctx, getWorkerForScan, id)
	var i Worker
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Name,
		&i.Organization,
		&i.CreatedAt,
	)
	return &i, err
}

const getWorkersByProject = `-- name: GetWorkersByProject :many
SELECT
    workers.id, workers.token, workers.name, workers.organization, workers.created_at
FROM
    workers
    INNER JOIN organizations ON workers.organization = organizations.id
    INNER JOIN projects ON organizations.id = projects.organization_id
WHERE
    projects.id = $1
`

func (q *Queries) GetWorkersByProject(ctx context.Context, projectID int64) ([]*Worker, error) {
	rows, err := q.db.Query(ctx, getWorkersByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Name,
			&i.Organization,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkersForProject = `-- name: GetWorkersForProject :many
SELECT
    workers.id, workers.token, workers.name, workers.organization, workers.created_at
FROM
    workers
    INNER JOIN organizations ON workers.organization_id = organizations.id
    INNER JOIN projects ON organizations.id = projects.organization_id
WHERE
    projects.id = $1
`

func (q *Queries) GetWorkersForProject(ctx context.Context, projectID int64) ([]*Worker, error) {
	rows, err := q.db.Query(ctx, getWorkersForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Name,
			&i.Organization,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
