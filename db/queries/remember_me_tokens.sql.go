// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: remember_me_tokens.sql

package queries

import (
	"context"
)

const createRememberMeToken = `-- name: CreateRememberMeToken :one
INSERT INTO remember_me_tokens(user_id, token)
    VALUES ($1, $2)
RETURNING
    id, user_id, token, created_at
`

type CreateRememberMeTokenParams struct {
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) CreateRememberMeToken(ctx context.Context, arg CreateRememberMeTokenParams) (*RememberMeToken, error) {
	row := q.db.QueryRow(ctx, createRememberMeToken, arg.UserID, arg.Token)
	var i RememberMeToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteRememberMeTokenByUserAndToken = `-- name: DeleteRememberMeTokenByUserAndToken :exec
DELETE FROM remember_me_tokens
WHERE user_id = $1
    AND token = $2
`

type DeleteRememberMeTokenByUserAndTokenParams struct {
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) DeleteRememberMeTokenByUserAndToken(ctx context.Context, arg DeleteRememberMeTokenByUserAndTokenParams) error {
	_, err := q.db.Exec(ctx, deleteRememberMeTokenByUserAndToken, arg.UserID, arg.Token)
	return err
}

const deleteRememberMeTokensForUser = `-- name: DeleteRememberMeTokensForUser :exec
DELETE FROM remember_me_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteRememberMeTokensForUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteRememberMeTokensForUser, userID)
	return err
}
