// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	CountUsers(ctx context.Context) (int64, error)
	CreateDockerImageForProject(ctx context.Context, arg CreateDockerImageForProjectParams) (*ProjectDockerImage, error)
	CreateDockerLayerResultsForProject(ctx context.Context, arg []CreateDockerLayerResultsForProjectParams) (int64, error)
	CreateDockerLayerScanForProject(ctx context.Context, arg CreateDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error)
	CreateDockerScannedLayerForProject(ctx context.Context, arg CreateDockerScannedLayerForProjectParams) (*ProjectDockerScannedLayer, error)
	CreateGitCommitForProject(ctx context.Context, arg CreateGitCommitForProjectParams) (*ProjectGitScannedCommit, error)
	CreateGitRepositoryForProject(ctx context.Context, arg CreateGitRepositoryForProjectParams) (*ProjectGitRepository, error)
	CreateGitResultForCommit(ctx context.Context, arg []CreateGitResultForCommitParams) (int64, error)
	CreateNvdCPE(ctx context.Context, arg CreateNvdCPEParams) (*NvdCpe, error)
	CreateNvdCve(ctx context.Context, arg CreateNvdCveParams) (*NvdCfe, error)
	CreateNvdCveCPE(ctx context.Context, arg CreateNvdCveCPEParams) (*NvdCveCpe, error)
	CreatePostgresScan(ctx context.Context, postgresDatabaseID int64) (*PostgresScan, error)
	CreatePostgresScanBruteforceResult(ctx context.Context, arg CreatePostgresScanBruteforceResultParams) (*PostgresScanBruteforceResult, error)
	CreatePostgresScanResult(ctx context.Context, arg CreatePostgresScanResultParams) (*PostgresScanResult, error)
	CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (*ResetPasswordToken, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error)
	CreateTOTPSecretForUser(ctx context.Context, arg CreateTOTPSecretForUserParams) (*TotpSecretToken, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	DeleteDockerImageForProject(ctx context.Context, arg DeleteDockerImageForProjectParams) error
	DeleteGitRepositoryForProject(ctx context.Context, arg DeleteGitRepositoryForProjectParams) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	DeleteSessionsByUserID(ctx context.Context, userID sql.NullInt64) error
	DeleteUser(ctx context.Context, id int64) error
	GetCPEByProductAndVersion(ctx context.Context, arg GetCPEByProductAndVersionParams) (*NvdCpe, error)
	GetCveByCveID(ctx context.Context, cveID string) (*NvdCfe, error)
	GetCveCpeByCveAndCpe(ctx context.Context, arg GetCveCpeByCveAndCpeParams) (*NvdCveCpe, error)
	GetDockerImagesForProject(ctx context.Context, projectID int64) ([]*ProjectDockerImage, error)
	GetDockerLayerScanForProject(ctx context.Context, arg GetDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error)
	GetDockerScannedLayersForProject(ctx context.Context, projectID int64) ([]string, error)
	GetGitRepositoriesForProject(ctx context.Context, projectID int64) ([]*ProjectGitRepository, error)
	GetGitScannedCommitsForProject(ctx context.Context, projectID int64) ([]string, error)
	GetGitScannedCommitsForProjectBatch(ctx context.Context, arg GetGitScannedCommitsForProjectBatchParams) ([]string, error)
	GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*TotpSecretToken, error)
	GetNvdCPEsByDBType(ctx context.Context, databaseType int32) ([]*NvdCpe, error)
	GetNvdCveByCveID(ctx context.Context, cveID string) (*NvdCfe, error)
	GetOrganizationByName(ctx context.Context, name string) (*Organization, error)
	GetOrganizationMembers(ctx context.Context, organizationID int64) ([]*OrganizationMember, error)
	GetOrganizationPermissionsForUser(ctx context.Context, arg GetOrganizationPermissionsForUserParams) (int16, error)
	GetOrganizationUser(ctx context.Context, arg GetOrganizationUserParams) (*OrganizationMember, error)
	GetOrganizationsByUser(ctx context.Context, userID int64) ([]*Organization, error)
	GetPostgresDatabase(ctx context.Context, id int64) (*PostgresDatabase, error)
	GetPostgresScan(ctx context.Context, id int64) (*PostgresScan, error)
	GetPostgresScanResults(ctx context.Context, postgresScanID int64) ([]*PostgresScanResult, error)
	GetProjectByOrganizationAndName(ctx context.Context, arg GetProjectByOrganizationAndNameParams) (*Project, error)
	GetProjectMembers(ctx context.Context, projectID int64) ([]*ProjectMember, error)
	GetProjectPermissionsForUser(ctx context.Context, arg GetProjectPermissionsForUserParams) (int16, error)
	GetProjectUser(ctx context.Context, arg GetProjectUserParams) (*ProjectMember, error)
	GetProjectsByOrganization(ctx context.Context, organizationID int64) ([]*Project, error)
	GetResetPasswordToken(ctx context.Context, id uuid.UUID) (*ResetPasswordToken, error)
	GetSession(ctx context.Context, id uuid.UUID) (*Session, error)
	GetTOTPSecretForUser(ctx context.Context, userID int64) (*TotpSecretToken, error)
	GetUser(ctx context.Context, id int64) (*User, error)
	GetUserByUsernameOrEmail(ctx context.Context, username string) (*User, error)
	InsertBruteforcePasswords(ctx context.Context, passwords []string) error
	InvalidateResetPasswordToken(ctx context.Context, id uuid.UUID) error
	InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error
	ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error)
	ListUsersPaginated(ctx context.Context, arg ListUsersPaginatedParams) ([]*User, error)
	UpdateDockerLayerScanForProject(ctx context.Context, arg UpdateDockerLayerScanForProjectParams) (*ProjectDockerLayerScan, error)
	UpdateNvdCPE(ctx context.Context, arg UpdateNvdCPEParams) error
	UpdatePostgresScanBruteforceResult(ctx context.Context, arg UpdatePostgresScanBruteforceResultParams) error
	UpdatePostgresScanStatus(ctx context.Context, arg UpdatePostgresScanStatusParams) error
	UpdateSession(ctx context.Context, arg UpdateSessionParams) error
	UpdateUser(ctx context.Context, arg UpdateUserParams) error
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	ValidateTOTPSecretForUser(ctx context.Context, userID int64) error
}

var _ Querier = (*Queries)(nil)
