// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: totp.sql

package queries

import (
	"context"
)

const createTOTPSecretForUser = `-- name: CreateTOTPSecretForUser :one
INSERT INTO totp_secret_tokens(user_id, totp_secret, valid)
    VALUES ($1, $2, $3)
RETURNING
    id, user_id, valid, totp_secret, created_at
`

type CreateTOTPSecretForUserParams struct {
	UserID     int64
	TotpSecret string
	Valid      bool
}

func (q *Queries) CreateTOTPSecretForUser(ctx context.Context, arg CreateTOTPSecretForUserParams) (*TotpSecretToken, error) {
	row := q.db.QueryRow(ctx, createTOTPSecretForUser, arg.UserID, arg.TotpSecret, arg.Valid)
	var i TotpSecretToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Valid,
		&i.TotpSecret,
		&i.CreatedAt,
	)
	return &i, err
}

const getInvalidTOTPSecretForUser = `-- name: GetInvalidTOTPSecretForUser :one
SELECT
    id, user_id, valid, totp_secret, created_at
FROM
    totp_secret_tokens
WHERE
    user_id = $1
    AND valid = FALSE
LIMIT 1
`

func (q *Queries) GetInvalidTOTPSecretForUser(ctx context.Context, userID int64) (*TotpSecretToken, error) {
	row := q.db.QueryRow(ctx, getInvalidTOTPSecretForUser, userID)
	var i TotpSecretToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Valid,
		&i.TotpSecret,
		&i.CreatedAt,
	)
	return &i, err
}

const getTOTPSecretForUser = `-- name: GetTOTPSecretForUser :one
SELECT
    id, user_id, valid, totp_secret, created_at
FROM
    totp_secret_tokens
WHERE
    user_id = $1
    AND valid = TRUE
LIMIT 1
`

func (q *Queries) GetTOTPSecretForUser(ctx context.Context, userID int64) (*TotpSecretToken, error) {
	row := q.db.QueryRow(ctx, getTOTPSecretForUser, userID)
	var i TotpSecretToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Valid,
		&i.TotpSecret,
		&i.CreatedAt,
	)
	return &i, err
}

const invalidateTOTPSecretForUser = `-- name: InvalidateTOTPSecretForUser :exec
UPDATE
    totp_secret_tokens
SET
    valid = FALSE
WHERE
    user_id = $1
    AND valid = TRUE
`

func (q *Queries) InvalidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, invalidateTOTPSecretForUser, userID)
	return err
}

const validateTOTPSecretForUser = `-- name: ValidateTOTPSecretForUser :exec
UPDATE
    totp_secret_tokens
SET
    valid = TRUE
WHERE
    user_id = $1
    AND valid = FALSE
`

func (q *Queries) ValidateTOTPSecretForUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, validateTOTPSecretForUser, userID)
	return err
}
