// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT
  COUNT(*)
FROM
  users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(username, PASSWORD, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, LOCKED, confirm_selector, confirm_verifier, confirmed)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
`

type CreateUserParams struct {
	Username          string             `json:"username"`
	Password          string             `json:"password"`
	Email             string             `json:"email"`
	RecoveryCodes     sql.NullString     `json:"recovery_codes"`
	TotpSecret        sql.NullString     `json:"totp_secret"`
	RecoverSelector   sql.NullString     `json:"recover_selector"`
	RecoverVerifier   sql.NullString     `json:"recover_verifier"`
	RecoverExpiry     pgtype.Timestamptz `json:"recover_expiry"`
	LoginAttemptCount int32              `json:"login_attempt_count"`
	LoginLastAttempt  pgtype.Timestamptz `json:"login_last_attempt"`
	Locked            pgtype.Timestamptz `json:"locked"`
	ConfirmSelector   sql.NullString     `json:"confirm_selector"`
	ConfirmVerifier   sql.NullString     `json:"confirm_verifier"`
	Confirmed         bool               `json:"confirmed"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RecoveryCodes,
		arg.TotpSecret,
		arg.RecoverSelector,
		arg.RecoverVerifier,
		arg.RecoverExpiry,
		arg.LoginAttemptCount,
		arg.LoginLastAttempt,
		arg.Locked,
		arg.ConfirmSelector,
		arg.ConfirmVerifier,
		arg.Confirmed,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RecoveryCodes,
		&i.TotpSecret,
		&i.RecoverSelector,
		&i.RecoverVerifier,
		&i.RecoverExpiry,
		&i.LoginAttemptCount,
		&i.LoginLastAttempt,
		&i.Locked,
		&i.ConfirmSelector,
		&i.ConfirmVerifier,
		&i.Confirmed,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
FROM
  users
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RecoveryCodes,
		&i.TotpSecret,
		&i.RecoverSelector,
		&i.RecoverVerifier,
		&i.RecoverExpiry,
		&i.LoginAttemptCount,
		&i.LoginLastAttempt,
		&i.Locked,
		&i.ConfirmSelector,
		&i.ConfirmVerifier,
		&i.Confirmed,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserByConfirmSelector = `-- name: GetUserByConfirmSelector :one
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
FROM
  users
WHERE
  confirm_selector = $1
LIMIT 1
`

func (q *Queries) GetUserByConfirmSelector(ctx context.Context, confirmSelector sql.NullString) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByConfirmSelector, confirmSelector)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RecoveryCodes,
		&i.TotpSecret,
		&i.RecoverSelector,
		&i.RecoverVerifier,
		&i.RecoverExpiry,
		&i.LoginAttemptCount,
		&i.LoginLastAttempt,
		&i.Locked,
		&i.ConfirmSelector,
		&i.ConfirmVerifier,
		&i.Confirmed,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserByRecoverSelector = `-- name: GetUserByRecoverSelector :one
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
FROM
  users
WHERE
  recover_selector = $1
LIMIT 1
`

func (q *Queries) GetUserByRecoverSelector(ctx context.Context, recoverSelector sql.NullString) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByRecoverSelector, recoverSelector)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RecoveryCodes,
		&i.TotpSecret,
		&i.RecoverSelector,
		&i.RecoverVerifier,
		&i.RecoverExpiry,
		&i.LoginAttemptCount,
		&i.LoginLastAttempt,
		&i.Locked,
		&i.ConfirmSelector,
		&i.ConfirmVerifier,
		&i.Confirmed,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
FROM
  users
WHERE
  username = $1
  OR email = $2
LIMIT 1
`

type GetUserByUsernameOrEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, arg GetUserByUsernameOrEmailParams) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameOrEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RecoveryCodes,
		&i.TotpSecret,
		&i.RecoverSelector,
		&i.RecoverVerifier,
		&i.RecoverExpiry,
		&i.LoginAttemptCount,
		&i.LoginLastAttempt,
		&i.Locked,
		&i.ConfirmSelector,
		&i.ConfirmVerifier,
		&i.Confirmed,
		&i.CreatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at
FROM
  users
ORDER BY
  id
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.RecoveryCodes,
			&i.TotpSecret,
			&i.RecoverSelector,
			&i.RecoverVerifier,
			&i.RecoverExpiry,
			&i.LoginAttemptCount,
			&i.LoginLastAttempt,
			&i.Locked,
			&i.ConfirmSelector,
			&i.ConfirmVerifier,
			&i.Confirmed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPaginated = `-- name: ListUsersPaginated :many
SELECT
  id, username, password, email, recovery_codes, totp_secret, recover_selector, recover_verifier, recover_expiry, login_attempt_count, login_last_attempt, locked, confirm_selector, confirm_verifier, confirmed, created_at,
(
    SELECT
      users.id
    FROM
      users
    WHERE
      users.id > $1
    ORDER BY
      users.ID ASC offset $2
    LIMIT 1) AS next_page_id,
(
  SELECT
    users.id
  FROM
    users
  WHERE
    users.id <= $1
  ORDER BY
    users.ID DESC offset $2
  LIMIT 1) AS previous_page_id,
(
  SELECT
    users.id
  FROM
    users
  ORDER BY
    users.ID DESC offset 50
  LIMIT 1) AS last_page_id
FROM
  users
WHERE
  id > $1
ORDER BY
  id ASC
LIMIT $2
`

type ListUsersPaginatedParams struct {
	ID     int64 `json:"id"`
	Offset int32 `json:"offset"`
}

type ListUsersPaginatedRow struct {
	ID                int64              `json:"id"`
	Username          string             `json:"username"`
	Password          string             `json:"password"`
	Email             string             `json:"email"`
	RecoveryCodes     sql.NullString     `json:"recovery_codes"`
	TotpSecret        sql.NullString     `json:"totp_secret"`
	RecoverSelector   sql.NullString     `json:"recover_selector"`
	RecoverVerifier   sql.NullString     `json:"recover_verifier"`
	RecoverExpiry     pgtype.Timestamptz `json:"recover_expiry"`
	LoginAttemptCount int32              `json:"login_attempt_count"`
	LoginLastAttempt  pgtype.Timestamptz `json:"login_last_attempt"`
	Locked            pgtype.Timestamptz `json:"locked"`
	ConfirmSelector   sql.NullString     `json:"confirm_selector"`
	ConfirmVerifier   sql.NullString     `json:"confirm_verifier"`
	Confirmed         bool               `json:"confirmed"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	NextPageID        int64              `json:"next_page_id"`
	PreviousPageID    int64              `json:"previous_page_id"`
	LastPageID        int64              `json:"last_page_id"`
}

func (q *Queries) ListUsersPaginated(ctx context.Context, arg ListUsersPaginatedParams) ([]*ListUsersPaginatedRow, error) {
	rows, err := q.db.Query(ctx, listUsersPaginated, arg.ID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListUsersPaginatedRow
	for rows.Next() {
		var i ListUsersPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.RecoveryCodes,
			&i.TotpSecret,
			&i.RecoverSelector,
			&i.RecoverVerifier,
			&i.RecoverExpiry,
			&i.LoginAttemptCount,
			&i.LoginLastAttempt,
			&i.Locked,
			&i.ConfirmSelector,
			&i.ConfirmVerifier,
			&i.Confirmed,
			&i.CreatedAt,
			&i.NextPageID,
			&i.PreviousPageID,
			&i.LastPageID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
  users
SET
  username = $2,
  PASSWORD = $3,
  email = $4,
  recovery_codes = $5,
  totp_secret = $6,
  recover_selector = $7,
  recover_verifier = $8,
  recover_expiry = $9,
  login_attempt_count = $10,
  login_last_attempt = $11,
  LOCKED = $12,
  confirm_selector = $13,
  confirm_verifier = $14,
  confirmed = $15
WHERE
  id = $1
`

type UpdateUserParams struct {
	ID                int64              `json:"id"`
	Username          string             `json:"username"`
	Password          string             `json:"password"`
	Email             string             `json:"email"`
	RecoveryCodes     sql.NullString     `json:"recovery_codes"`
	TotpSecret        sql.NullString     `json:"totp_secret"`
	RecoverSelector   sql.NullString     `json:"recover_selector"`
	RecoverVerifier   sql.NullString     `json:"recover_verifier"`
	RecoverExpiry     pgtype.Timestamptz `json:"recover_expiry"`
	LoginAttemptCount int32              `json:"login_attempt_count"`
	LoginLastAttempt  pgtype.Timestamptz `json:"login_last_attempt"`
	Locked            pgtype.Timestamptz `json:"locked"`
	ConfirmSelector   sql.NullString     `json:"confirm_selector"`
	ConfirmVerifier   sql.NullString     `json:"confirm_verifier"`
	Confirmed         bool               `json:"confirmed"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RecoveryCodes,
		arg.TotpSecret,
		arg.RecoverSelector,
		arg.RecoverVerifier,
		arg.RecoverExpiry,
		arg.LoginAttemptCount,
		arg.LoginLastAttempt,
		arg.Locked,
		arg.ConfirmSelector,
		arg.ConfirmVerifier,
		arg.Confirmed,
	)
	return err
}
