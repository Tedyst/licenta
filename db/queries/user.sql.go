// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"
)

const countUsers = `-- name: CountUsers :one
SELECT
  COUNT(*)
FROM
  users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(username, PASSWORD, email)
  VALUES ($1, $2, $3)
RETURNING
  id, username, password, email
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, username, password, email
FROM
  users
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return &i, err
}

const getUserByUsernameOrEmail = `-- name: GetUserByUsernameOrEmail :one
SELECT
  id, username, password, email
FROM
  users
WHERE
  username = $1
  OR email = $1
LIMIT 1
`

func (q *Queries) GetUserByUsernameOrEmail(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameOrEmail, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, username, password, email
FROM
  users
WHERE
  CASE WHEN $1::text = '' THEN
    TRUE
  ELSE
    username = $1::text
  END
  AND CASE WHEN $2::text = '' THEN
    TRUE
  ELSE
    email = $2::text
  END
  AND CASE WHEN $3::text = '' THEN
    TRUE
  ELSE
    admin = $3::boolean
  END
ORDER BY
  id
`

type ListUsersParams struct {
	Username string
	Email    string
	Admin    string
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Username, arg.Email, arg.Admin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPaginated = `-- name: ListUsersPaginated :many
SELECT
  id, username, password, email
FROM
  users
ORDER BY
  id
LIMIT $1 OFFSET $2
`

type ListUsersPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsersPaginated(ctx context.Context, arg ListUsersPaginatedParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsersPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
  users
SET
  username = coalesce($1, username),
  PASSWORD = coalesce($2, PASSWORD),
  email = coalesce($3, email)
WHERE
  id = $4
`

type UpdateUserParams struct {
	Username sql.NullString
	Password sql.NullString
	Email    sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE
  users
SET
  PASSWORD = $2
WHERE
  id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}
