basePath: /
definitions:
  v1.enableTotpAPIRequest:
    properties:
      totp:
        type: string
    type: object
  v1.loginAPIRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  v1.loginAPIResponse:
    properties:
      status:
        type: string
    type: object
  v1.publicUserAPIResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  v1.setupTOTPResponse:
    properties:
      totp_secret:
        type: string
    type: object
  v1.totpAPIRequest:
    properties:
      totp:
        type: string
    type: object
  v1.userCreateAPIRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Proiect Licenta
  version: "1.0"
paths:
  /api/v1/enable_totp:
    post:
      consumes:
      - application/json
      description: Enable TOTP
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.enableTotpAPIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.loginAPIResponse'
      summary: Enable TOTP
      tags:
      - auth
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.loginAPIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.loginAPIResponse'
      summary: Login
      tags:
      - auth
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.loginAPIResponse'
      summary: Logout
      tags:
      - auth
  /api/v1/totp:
    post:
      consumes:
      - application/json
      description: Verify TOTP
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.totpAPIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.loginAPIResponse'
      summary: Verify TOTP
      tags:
      - auth
  /api/v1/totp/setup:
    post:
      consumes:
      - application/json
      description: Generate TOTP
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.setupTOTPResponse'
      summary: Generate TOTP
      tags:
      - auth
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.publicUserAPIResponse'
            type: array
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.userCreateAPIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.publicUserAPIResponse'
      summary: Create user
      tags:
      - users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v1.userCreateAPIRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.publicUserAPIResponse'
      summary: Get user
      tags:
      - users
swagger: "2.0"
