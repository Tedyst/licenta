/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/me/change-password": {
    /** Change password of current logged in user */
    post: {
      /** @description The user to login into. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChangePasswordLoggedIn"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Success"];
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** Get current logged in user */
    get: {
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              user: components["schemas"]["User"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    /** Get all users */
    get: {
      parameters: {
        query?: {
          /** @description The number of items to return */
          limit?: number;
          /** @description The offset of items to return */
          offset?: number;
          /** @description The username to filter */
          username?: string;
          /** @description The email to filter */
          email?: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedUsers"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get user by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the user to retrieve */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/worker/get-task": {
    /** Get a task for the worker */
    get: {
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan: components["schemas"]["Scan"];
              scan_group: components["schemas"]["ScanGroup"];
            };
          };
        };
        /** @description No task available */
        202: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/docker": {
    /** Get all docker images for a project */
    get: {
      parameters: {
        query: {
          /** @description The project to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              images: components["schemas"]["DockerImage"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new docker container */
    post: {
      /** @description The docker image object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateDockerImage"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              image: components["schemas"]["DockerImage"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/docker/{id}": {
    /** Get docker image by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the docker image */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              image: components["schemas"]["DockerImage"];
              layers: components["schemas"]["DockerLayer"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Docker image not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete docker image by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the docker image */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Docker image not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update docker image by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the docker image */
          id: number;
        };
      };
      /** @description The docker image object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchDockerImage"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              image: components["schemas"]["DockerImage"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Docker image not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/git": {
    /** Get all git repositories for a project */
    get: {
      parameters: {
        query: {
          /** @description The project to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              git_repositories: components["schemas"]["Git"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new git repository for a project */
    post: {
      /** @description The git object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateGit"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              git: components["schemas"]["Git"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/git/{id}": {
    /** Get git repository by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the git repository */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              git: components["schemas"]["Git"];
              commits: components["schemas"]["GitCommit"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Git repository not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete git repository by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the git repository */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Git repository not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a git repository by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the git repository */
          id: number;
        };
      };
      /** @description The git object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchGit"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              git: components["schemas"]["Git"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Git repository not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects": {
    /** Create a new project */
    post: {
      /** @description The project object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateProject"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              project: components["schemas"]["Project"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/{id}/bruteforce-passwords": {
    /** Get all bruteforce passwords associated with a project */
    get: {
      parameters: {
        query?: {
          /** @description The last ID of the item to return */
          last_password_id?: number;
          /** @description The password to filter */
          password?: string;
        };
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedBruteforcePasswords"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Specific password not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scan-groups": {
    /** Get all scan groups */
    get: {
      parameters: {
        query: {
          /** @description The project to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan_groups: components["schemas"]["ScanGroup"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scan/{id}": {
    /** Get a scan by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan: components["schemas"]["Scan"];
              results: components["schemas"]["ScanResult"][];
              bruteforce_results: components["schemas"]["BruteforceScanResult"][];
            };
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a scan by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          id: number;
        };
      };
      /** @description The scan object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchScan"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan?: components["schemas"]["Scan"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scan/{id}/result": {
    /** Create a new scan result */
    post: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          id: number;
        };
      };
      /** @description The scan result object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateScanResult"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan?: components["schemas"]["ScanResult"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scan/{id}/bruteforceresults": {
    /** Create a new bruteforce scan result */
    post: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          id: number;
        };
      };
      /** @description The scan result object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateBruteforceScanResult"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              bruteforcescanresult?: components["schemas"]["BruteforceScanResult"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/postgres-scans": {
    /** Get all postgres scans */
    get: {
      parameters: {
        query: {
          /** @description The scan ID to filter for */
          scan: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scans: components["schemas"]["PostgresScan"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mongo-scans": {
    /** Get all mongo scans */
    get: {
      parameters: {
        query: {
          /** @description The scan ID to filter for */
          scan: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scans: components["schemas"]["MongoScan"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/redis-scans": {
    /** Get all redis scans */
    get: {
      parameters: {
        query: {
          /** @description The scan ID to filter for */
          scan: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scans: components["schemas"]["RedisScan"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mysql-scans": {
    /** Get all postgres scans */
    get: {
      parameters: {
        query: {
          /** @description The scan ID to filter for */
          scan: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scans: components["schemas"]["MysqlScan"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/bruteforceresults/{id}": {
    /** Update a bruteforce scan result by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the bruteforce result */
          id: number;
        };
      };
      /** @description The scan result object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchBruteforceScanResult"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              bruteforcescanresult?: components["schemas"]["BruteforceScanResult"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/cves/{dbType}/{version}": {
    /** Get all CVEs for a database type and version */
    get: {
      parameters: {
        path: {
          /** @description The database type */
          dbType: string;
          /** @description The database version */
          version: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              cves: components["schemas"]["CVE"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Database type or version not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/{id}/run": {
    /** Run all extractors and scanners for a project */
    post: {
      parameters: {
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan_group?: components["schemas"]["ScanGroup"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Project not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/{id}": {
    /** Get project by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              project: components["schemas"]["Project"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Project not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete project by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Project not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/projects/{id}/bruteforced-password": {
    /** Get bruteforced password for a project */
    get: {
      parameters: {
        query: {
          /** @description The hash to filter */
          hash: string;
          /** @description The username to filter */
          username: string;
        };
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              bruteforced_password: components["schemas"]["BruteforcedPassword"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a bruteforced password for a project */
    post: {
      parameters: {
        path: {
          /** @description The ID of the project */
          id: number;
        };
      };
      /** @description The bruteforced password object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateBruteforcedPassword"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              bruteforced_password?: components["schemas"]["BruteforcedPassword"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/bruteforced-passwords/{id}": {
    /** Update a bruteforced password by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the bruteforced password */
          id: number;
        };
      };
      /** @description The bruteforced password object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateBruteforcedPassword"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              bruteforced_password?: components["schemas"]["BruteforcedPassword"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/postgres": {
    /** Get all postgres databases for a project */
    get: {
      parameters: {
        query: {
          /** @description The projects to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              postgres_databases: components["schemas"]["PostgresDatabase"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new postgres database */
    post: {
      /** @description The postgres database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatePostgresDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              postgres_database: components["schemas"]["PostgresDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/postgres/{id}": {
    /** Get postgres database by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              postgres_database: components["schemas"]["PostgresDatabase"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete postgres database by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update postgres database by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          id: number;
        };
      };
      /** @description The postgres database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchPostgresDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              postgres_database: components["schemas"]["PostgresDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mongo": {
    /** Get all mongo databases for a project */
    get: {
      parameters: {
        query: {
          /** @description The projects to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mongo_databases: components["schemas"]["MongoDatabase"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new mongo database */
    post: {
      /** @description The mongo database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateMongoDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              mongo_database: components["schemas"]["MongoDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mongo/{id}": {
    /** Get mongo database by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the mongo database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mongo_database: components["schemas"]["MongoDatabase"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete mongo database by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update mongo database by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the mongo database */
          id: number;
        };
      };
      /** @description The mongo database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchMongoDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mongo_database: components["schemas"]["MongoDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/redis": {
    /** Get all redis databases for a project */
    get: {
      parameters: {
        query: {
          /** @description The projects to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              redis_databases: components["schemas"]["RedisDatabase"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new redis database */
    post: {
      /** @description The redis database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateRedisDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              redis_database: components["schemas"]["RedisDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/redis/{id}": {
    /** Get redis database by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the redis database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              redis_database: components["schemas"]["RedisDatabase"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete redis database by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the redis database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update redis database by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the redis database */
          id: number;
        };
      };
      /** @description The redis database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchRedisDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              redis_database: components["schemas"]["RedisDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mysql": {
    /** Get all mysql databases for a project */
    get: {
      parameters: {
        query: {
          /** @description The projects to filter for */
          project: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mysql_databases: components["schemas"]["MysqlDatabase"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new mysql database */
    post: {
      /** @description The mysql database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateMysqlDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              mysql_database: components["schemas"]["MysqlDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/mysql/{id}": {
    /** Get mysql database by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the mysql database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mysql_database: components["schemas"]["MysqlDatabase"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete mysql database by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the mysql database */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update mysql database by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the mysql database */
          id: number;
        };
      };
      /** @description The mysql database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchMysqlDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              mysql_database: components["schemas"]["MysqlDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Postgres database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/organizations": {
    /** Get all organizations that the user can see */
    get: {
      parameters: {
        query?: {
          /** @description The organization name to filter for */
          name?: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              organizations: components["schemas"]["Organization"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new organization */
    post: {
      /** @description The organization object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateOrganization"];
        };
      };
      responses: {
        /** @description Successful operation */
        201: {
          content: {
            "application/json": {
              success: boolean;
              organization: components["schemas"]["Organization"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Invalid body */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/organizations/{id}": {
    /** Get organization by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the organization */
          id: number;
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              organization: components["schemas"]["Organization"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Organization not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete organization by ID */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the organization */
          id: number;
        };
      };
      responses: {
        /** @description successful operation */
        204: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Organization not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/organizations/{id}/add-user": {
    /** Add a user to an organization */
    post: {
      parameters: {
        path: {
          /** @description The ID of the organization */
          id: number;
        };
      };
      /** @description The user object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AddUserToOrganization"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Organization not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/organizations/{id}/edit-user": {
    /** Edit a user's role in an organization */
    post: {
      parameters: {
        path: {
          /** @description The ID of the organization */
          id: number;
        };
      };
      /** @description The user object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["EditUserRoleInOrganization"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Organization not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/organizations/{id}/delete-user": {
    /** Delete a user from an organization */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the organization */
          id: number;
        };
      };
      /** @description The user object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RemoveUserFromOrganization"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Organization not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EditUserRoleInOrganization: {
      id: number;
      role: string;
    };
    AddUserToOrganization: {
      email: string;
    };
    RemoveUserFromOrganization: {
      id: number;
    };
    CreateProject: {
      name: string;
      organization_id: number;
    };
    Project: {
      /**
       * Format: int64
       * @description The internal ID of the project
       * @example 1
       */
      id: number;
      /**
       * @description The name of the project
       * @example My Project
       */
      name: string;
      /**
       * Format: int64
       * @description The internal ID of the organization
       * @example 1
       */
      organization_id: number;
      /**
       * @description The date the project was created
       * @example "2019-01-23T16:00:00.000Z"
       */
      created_at: string;
      /**
       * @description Whether to use the workers associated with the project instead of the default ones
       * @example false
       */
      remote: boolean;
      /**
       * @description The number of scans that have been run on the project
       * @example 0
       */
      scans: number;
    };
    CVE: {
      /**
       * Format: int64
       * @description The internal ID of the CVE
       * @example 1
       */
      id: number;
      /**
       * @description The CVE ID
       * @example CVE-2019-0001
       */
      cve_id: string;
      /**
       * @description The CVE description
       * @example A vulnerability in the web-based management interface of Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN Routers could allow an unauthenticated, remote attacker to retrieve sensitive information. The vulnerability is due to improper access controls for URLs. An attacker could exploit this vulnerability by connecting to an affected device via HTTP or HTTPS and requesting specific URLs. A successful exploit could allow the attacker to download the router configuration or detailed diagnostic information.
       */
      description: string;
      /**
       * @description The date the CVE was published
       * @example "2019-01-23T16:00:00.000Z"
       */
      published_at: string;
      /**
       * @description The date the CVE was last modified
       * @example "2019-01-23T16:00:00.000Z"
       */
      last_modified: string;
    };
    PatchPostgresDatabase: {
      host?: string;
      port?: number;
      database_name?: string;
      username?: string;
      password?: string;
      version?: string;
    };
    PatchMysqlDatabase: {
      host?: string;
      port?: number;
      database_name?: string;
      username?: string;
      password?: string;
      version?: string;
    };
    PatchMongoDatabase: {
      host?: string;
      port?: number;
      database_name?: string;
      username?: string;
      password?: string;
      version?: string;
    };
    PatchRedisDatabase: {
      host?: string;
      port?: number;
      username?: string;
      password?: string;
      version?: string;
    };
    CreatePostgresDatabase: {
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
    };
    PostgresDatabase: {
      id: number;
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
      created_at: string;
      version: string;
    };
    MongoDatabase: {
      id: number;
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
      created_at: string;
      version: string;
    };
    RedisDatabase: {
      id: number;
      project_id: number;
      host: string;
      port: number;
      username: string;
      password: string;
      created_at: string;
      version: string;
    };
    CreateMysqlDatabase: {
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
    };
    CreateMongoDatabase: {
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
    };
    CreateRedisDatabase: {
      project_id: number;
      host: string;
      port: number;
      username: string;
      password: string;
    };
    MysqlDatabase: {
      id: number;
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
      created_at: string;
      version: string;
    };
    PatchScan: {
      status: number;
      error: string;
      ended_at: string;
    };
    CreateScanResult: {
      severity: number;
      message: string;
    };
    BruteforcedPassword: {
      id: number;
      hash: string;
      username: string;
      password: string;
      last_bruteforce_id: number;
      project_id: number;
    };
    CreateBruteforcedPassword: {
      hash: string;
      username: string;
      password: string;
      last_bruteforce_id: number;
    };
    UpdateBruteforcedPassword: {
      last_bruteforce_id: number;
      password: string;
    };
    BruteforceScanResult: {
      id: number;
      password: string;
      username: string;
      total: number;
      tried: number;
    };
    CreateBruteforceScanResult: {
      password: string;
      username: string;
      total: number;
      tried: number;
    };
    PatchBruteforceScanResult: {
      tried: number;
      total: number;
      password: string;
    };
    UpdatePostgresVersion: {
      version: string;
    };
    ScanResult: {
      id: number;
      severity: number;
      message: string;
      created_at: string;
      scan_source: number;
    };
    ScanGroup: {
      id: number;
      project_id: number;
      created_by?: components["schemas"]["User"];
      scans: components["schemas"]["Scan"][];
    };
    Scan: {
      id: number;
      status: number;
      error: string;
      created_at: string;
      ended_at: string;
      maximum_severity: number;
      scan_group_id: number;
      scan_type: number;
    };
    DockerImage: {
      id: number;
      project_id: number;
      docker_image: string;
      username?: string;
      password?: string;
      min_probability?: number;
      probability_increase_multiplier?: number;
      probability_decrease_multiplier?: number;
      entropy_threshold?: number;
      logistic_growth_rate?: number;
    };
    CreateDockerImage: {
      project_id: number;
      docker_image: string;
      username?: string;
      password?: string;
    };
    PatchDockerImage: {
      docker_image?: string;
      username?: string;
      password?: string;
      min_probability?: number;
      probability_increase_multiplier?: number;
      probability_decrease_multiplier?: number;
      entropy_threshold?: number;
      logistic_growth_rate?: number;
    };
    DockerScan: {
      id: number;
      project_id: number;
      image: string;
      finished: boolean;
      scanned_layers: number;
      layers_to_scan: number;
      created_at: string;
    };
    DockerLayer: {
      id: number;
      image_id: number;
      layer_hash: string;
      scanned_at: string;
      results: components["schemas"]["DockerLayerResult"][];
    };
    DockerLayerResult: {
      id: number;
      project_id: number;
      layer: number;
      name: string;
      line: string;
      line_number: number;
      previous_lines: string;
      match: string;
      probability: number;
      username: string;
      password: string;
      filename: string;
      created_at: string;
    };
    GitCommit: {
      id: number;
      repository_id: number;
      commit_hash: string;
      created_at: string;
      results: components["schemas"]["GitResult"][];
      author?: string;
      author_email?: string;
      commit_date?: string;
      description?: string;
    };
    GitResult: {
      id: number;
      commit: number;
      name: string;
      line: string;
      line_number: number;
      match: string;
      probability: number;
      username: string;
      password: string;
      filename: string;
    };
    Git: {
      id: number;
      project_id: number;
      git_repository: string;
      username: string;
      password: string;
      has_ssh: boolean;
    };
    PatchGit: {
      git_repository?: string;
      username?: string;
      password?: string;
      private_key?: string;
    };
    CreateGit: {
      project_id: number;
      git_repository: string;
      username?: string;
      password?: string;
      private_key?: string;
    };
    PostgresScan: {
      id: number;
      database_id: number;
    };
    MysqlScan: {
      id: number;
      database_id: number;
    };
    MongoScan: {
      id: number;
      database_id: number;
    };
    RedisScan: {
      id: number;
      database_id: number;
    };
    LoginUser: {
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The password for login in clear text
       * @example mypassword
       */
      password: string;
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp?: string;
    };
    RegisterUser: {
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The password for login in clear text
       * @example mypassword
       */
      password: string;
      /**
       * @description The email of the user
       * @example user@example.com
       */
      email: string;
    };
    User: {
      /**
       * Format: int64
       * @description The user ID
       * @example 1
       */
      id: number;
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The email of the user
       * @example null
       */
      email: string;
      /**
       * @description The phone number of the user
       * @example 1234567890
       */
      phone?: string;
    };
    CreateOrganization: {
      /**
       * @description The name of the organization
       * @example My Organization
       */
      name: string;
    };
    OrganizationStats: {
      users: number;
      projects: number;
      scans: number;
    };
    Organization: {
      /**
       * Format: int64
       * @description The internal ID of the organization
       * @example 1
       */
      id: number;
      /**
       * @description The name of the organization
       * @example My Organization
       */
      name: string;
      /**
       * @description The date the organization was created
       * @example "2019-01-23T16:00:00.000Z"
       */
      created_at: string;
      projects: components["schemas"]["Project"][];
      stats: components["schemas"]["OrganizationStats"];
      members: components["schemas"]["OrganizationUser"][];
    };
    OrganizationUser: {
      /**
       * Format: int64
       * @description The user ID
       * @example 1
       */
      id: number;
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The email of the user
       * @example null
       */
      email: string;
      /**
       * @description The role of the user
       * @example Owner
       */
      role: string;
    };
    ChangePasswordLoggedIn: {
      /**
       * @description The old password
       * @example mypassword
       */
      old_password: string;
      /**
       * @description The new password
       * @example mynewpassword
       */
      new_password: string;
    };
    TOTPLogin: {
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp_code: string;
    };
    TOTPFirstStep: {
      /**
       * @description The TOTP secret
       * @example ASDASDASDASD
       */
      totp_secret: string;
    };
    TOTPSecondStep: {
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp_code: string;
    };
    Success: {
      /**
       * @description The success status
       * @example true
       */
      success: boolean;
    };
    PaginatedResult: {
      /**
       * @description The success status
       * @example true
       */
      success: boolean;
      /** @example 1 */
      count: number;
      next?: string;
      results: unknown[];
    };
    PaginatedBruteforcePasswords: components["schemas"]["PaginatedResult"] & {
      results?: components["schemas"]["BruteforcePassword"][];
    };
    BruteforcePassword: {
      /**
       * Format: int64
       * @description The internal ID of the bruteforce password
       * @example 1
       */
      id: number;
      /**
       * @description The password
       * @example mypassword
       */
      password: string;
    };
    PaginatedUsers: components["schemas"]["PaginatedResult"] & {
      results?: components["schemas"]["User"][];
    };
    Error: {
      /**
       * @description The success status
       * @example false
       */
      success: boolean;
      /** @description Error message */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
