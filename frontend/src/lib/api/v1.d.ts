/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/me/change-password": {
    /** Change password of current logged in user */
    post: {
      /** @description The user to login into. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ChangePasswordLoggedIn"];
        };
      };
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Success"];
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** Get current logged in user */
    get: {
      responses: {
        /** @description successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              user: components["schemas"]["User"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    /** Get all users */
    get: {
      parameters: {
        query?: {
          /** @description The number of items to return */
          limit?: number;
          /** @description The offset of items to return */
          offset?: number;
          /** @description The username to filter */
          username?: string;
          /** @description The email to filter */
          email?: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedUsers"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get user by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the user to retrieve */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/worker/get-task": {
    /** Get a task for the worker */
    get: {
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              task: components["schemas"]["WorkerTask"];
            };
          };
        };
        /** @description No task available */
        202: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/project/{projectid}/bruteforce-passwords": {
    /** Get all bruteforce passwords associated with a project */
    get: {
      parameters: {
        query?: {
          /** @description The last ID of the item to return */
          last_id?: number;
        };
        path: {
          /** @description The ID of the project */
          projectid: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedBruteforcePasswords"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scanner/postgres/database/{postgresDatabaseId}": {
    /** Get all postgres scans associated with a database */
    get: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          postgresDatabaseId: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              /** @description The success status */
              success: boolean;
              /** @description The list of scans */
              scans: components["schemas"]["PostgresScan"][];
              database: components["schemas"]["PostgresDatabase"];
              /** @description The number of scans */
              scan_count: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a new postgres scan associated with a database */
    post: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          postgresDatabaseId: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan?: components["schemas"]["PostgresScan"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a postgres database by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the postgres database */
          postgresDatabaseId: number;
        };
      };
      /** @description The database object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchPostgresDatabase"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              database?: components["schemas"]["PostgresDatabase"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Database not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scanner/postgres/scan/{scanid}": {
    /** Get a postgres scan by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          scanid: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan: components["schemas"]["PostgresScan"];
              results: components["schemas"]["PostgresScanResult"][];
            };
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a postgres scan by ID */
    patch: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          scanid: number;
        };
      };
      /** @description The scan object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchPostgresScan"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan?: components["schemas"]["PostgresScan"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/scanner/postgres/scan/{scanid}/result": {
    /** Create a new postgres scan result */
    post: {
      parameters: {
        path: {
          /** @description The ID of the scan */
          scanid: number;
        };
      };
      /** @description The scan result object */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatePostgresScanResult"];
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              scan?: components["schemas"]["PostgresScanResult"];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Scan not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/cves/{databaseType}/{version}": {
    /** Get all CVEs for a database type and version */
    get: {
      parameters: {
        path: {
          /** @description The database type */
          databaseType: string;
          /** @description The database version */
          version: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              cves: components["schemas"]["CVE"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Database type or version not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/project/{projectid}/run": {
    /** Run all extractors and scanners for a project */
    post: {
      parameters: {
        path: {
          /** @description The ID of the project */
          projectid: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              postgres_scans: components["schemas"]["PostgresScan"][];
            };
          };
        };
        /** @description Invalid body */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Project not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/project/{projectid}": {
    /** Get project by ID */
    get: {
      parameters: {
        path: {
          /** @description The ID of the project */
          projectid: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              success: boolean;
              project: components["schemas"]["Project"];
              postgres_databases: components["schemas"]["PostgresDatabase"][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Project not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Project: {
      /**
       * Format: int64
       * @description The internal ID of the project
       * @example 1
       */
      id: number;
      /**
       * @description The name of the project
       * @example My Project
       */
      name: string;
      /**
       * Format: int64
       * @description The internal ID of the organization
       * @example 1
       */
      organization_id: number;
      /**
       * @description The date the project was created
       * @example "2019-01-23T16:00:00.000Z"
       */
      created_at: string;
    };
    CVE: {
      /**
       * Format: int64
       * @description The internal ID of the CVE
       * @example 1
       */
      id: number;
      /**
       * @description The CVE ID
       * @example CVE-2019-0001
       */
      cve_id: string;
      /**
       * @description The CVE description
       * @example A vulnerability in the web-based management interface of Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN Routers could allow an unauthenticated, remote attacker to retrieve sensitive information. The vulnerability is due to improper access controls for URLs. An attacker could exploit this vulnerability by connecting to an affected device via HTTP or HTTPS and requesting specific URLs. A successful exploit could allow the attacker to download the router configuration or detailed diagnostic information.
       */
      description: string;
      /**
       * @description The date the CVE was published
       * @example "2019-01-23T16:00:00.000Z"
       */
      published_at: string;
      /**
       * @description The date the CVE was last modified
       * @example "2019-01-23T16:00:00.000Z"
       */
      last_modified: string;
    };
    PatchPostgresDatabase: {
      host?: string;
      port?: number;
      database_name?: string;
      username?: string;
      password?: string;
      remote?: boolean;
      version?: string;
    };
    PostgresDatabase: {
      id: number;
      project_id: number;
      host: string;
      port: number;
      database_name: string;
      username: string;
      password: string;
      created_at: string;
      remote: boolean;
      version: string;
    };
    PatchPostgresScan: {
      status: number;
      error: string;
      ended_at: string;
    };
    CreatePostgresScanResult: {
      severity: number;
      message: string;
    };
    UpdatePostgresVersion: {
      version: string;
    };
    PostgresScanResult: {
      id: number;
      severity: number;
      message: string;
      created_at: string;
    };
    PostgresScan: {
      id: number;
      status: number;
      error: string;
      created_at: string;
      ended_at: string;
      maximum_severity: number;
    };
    WorkerTask: {
      /**
       * @description The Task type
       * @enum {string}
       */
      type: "postgres_scan";
      postgres_scan?: {
        scan?: components["schemas"]["PostgresScan"];
        postgres_database?: components["schemas"]["PostgresDatabase"];
      };
    };
    LoginUser: {
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The password for login in clear text
       * @example mypassword
       */
      password: string;
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp?: string;
    };
    RegisterUser: {
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The password for login in clear text
       * @example mypassword
       */
      password: string;
      /**
       * @description The email of the user
       * @example user@example.com
       */
      email: string;
    };
    User: {
      /**
       * Format: int64
       * @description The user ID
       * @example 1
       */
      id: number;
      /**
       * @description The user name for login
       * @example john_doe
       */
      username: string;
      /**
       * @description The first name of the user
       * @example John
       */
      firstName?: string;
      /**
       * @description The last name of the user
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The email of the user
       * @example null
       */
      email: string;
      /**
       * @description The phone number of the user
       * @example null
       */
      phone?: string;
    };
    ChangePasswordLoggedIn: {
      /**
       * @description The old password
       * @example mypassword
       */
      old_password: string;
      /**
       * @description The new password
       * @example mynewpassword
       */
      new_password: string;
    };
    TOTPLogin: {
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp_code: string;
    };
    TOTPFirstStep: {
      /**
       * @description The TOTP secret
       * @example ASDASDASDASD
       */
      totp_secret: string;
    };
    TOTPSecondStep: {
      /**
       * @description The TOTP code
       * @example 123456
       */
      totp_code: string;
    };
    Success: {
      /**
       * @description The success status
       * @example true
       */
      success: boolean;
    };
    PaginatedResult: {
      /**
       * @description The success status
       * @example true
       */
      success: boolean;
      /** @example 1 */
      count: number;
      next?: string;
      results: unknown[];
    };
    PaginatedBruteforcePasswords: components["schemas"]["PaginatedResult"] & {
      results?: components["schemas"]["BruteforcePassword"][];
    };
    BruteforcePassword: {
      /**
       * Format: int64
       * @description The internal ID of the bruteforce password
       * @example 1
       */
      id: number;
      /**
       * @description The password
       * @example mypassword
       */
      password: string;
    };
    PaginatedUsers: components["schemas"]["PaginatedResult"] & {
      results?: components["schemas"]["User"][];
    };
    Error: {
      /**
       * @description The success status
       * @example false
       */
      success: boolean;
      /** @description Error message */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
